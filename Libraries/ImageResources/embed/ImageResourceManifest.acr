/*
    See notes.txt
*/

namespace ImageResources {
    enum ImgResourceType {
        STANDALONE,
        SHEET,
    }

    class ManifestTileInfo {

        field genFileName = null;
        field x = 0;
        field y = 0;
        field width = 0;
        field height = 0;
        field sizeBytes = 0;

        constructor() {}
    }

    class ManifestChunkInfo {

        field width = 0;
        field height = 0;
        field tiles = [];

        constructor() { }
    }

    class ManifestSheetInfo {

        field name;
        field id;
        field chunks = {};

        constructor() { }
    }

    class ManifestFileInfo {

        field type;
        field genFileName;
        field width = 0;
        field height = 0;
        field x = 0;
        field y = 0;
        field sheetId;
        field chunkId;

        constructor() { }
    }

    class ImageResourceManifest {

        static field resourceInfo = null;
        static field sheetInfo = null;
        static field sheetIdByName = {};
        static field filesBySheetId = {};

        static function getFileInfo(filename, sheetOnly = false) {
            ImageResourceManifest.ensureInitialized();
            output = ImageResourceManifest.resourceInfo.get(filename);
            if (output == null) {
                nkey = filename.trim().replace('\\', '/');
                output = ImageResourceManifest.resourceInfo.get(nkey);
                if (output != null) {
                    ImageResourceManifest.resourceInfo[filename] = output;
                }
            }

            if (output == null) {
                throw new ImageResources.ImageNotFoundException("Resource '{0}' does not exist.", filename);
            }

            if (sheetOnly && output.type != ImgResourceType.SHEET) {
                throw new ImageResources.ImageNotFoundException("Resource '{0}' is standalone and not included in an image sheet.", filename);
            }

            return output;
        }

        static function getSheetInfo(name) {
            ImageResourceManifest.ensureInitialized();
            if (Core.typeof(name) != Core.Type.STRING) throw new Core.InvalidArgumentException("Image sheet ID must be a string");
            id = ImageResourceManifest.sheetIdByName.get(name);
            if (id == null) throw new ImageResources.SheetNotFoundException("Image sheet with ID of '{0}' not found.", name);
            return ImageResourceManifest.sheetInfo[id];
        }

        static function ensureInitialized() {
            if (ImageResourceManifest.resourceInfo != null) return;
            resourceInfo = {};
            sheetInfo = {};
            ImageResourceManifest.resourceInfo = resourceInfo;
            ImageResourceManifest.sheetInfo = sheetInfo;

            manifest = $lib_imageresources_getManifestString();
            activeSheetId = null;
            activeChunkId = 0;
            for (line : manifest.split('\n')) {
                parts = line.split(',');
                switch (parts[0].trim()) {

                    case 'A': // A standalone file
                        genFileName = parts[1];
                        w = Core.parseInt(parts[2]);
                        h = Core.parseInt(parts[3]);
                        filename = parts[4:].join(',').trim();
                        t = new ManifestFileInfo();
                        t.type = ImgResourceType.STANDALONE;
                        t.genFileName = genFileName;
                        t.width = w;
                        t.height = h;
                        resourceInfo[filename] = t;
                        break;

                    case 'S': // declare a new sheet
                        activeSheetId = parts[1];
                        name = parts[2:].join(',').trim();
                        t = new ManifestSheetInfo();
                        t.name = name;
                        t.id = activeSheetId;
                        sheetInfo[activeSheetId] = t;
                        ImageResourceManifest.sheetIdByName[name] = activeSheetId;
                        break;

                    case 'C': // declare a new chunk
                        ++activeChunkId;
                        width = Core.parseInt(parts[1]);
                        height = Core.parseInt(parts[2]);
                        if (width == 0 && height == 0) {
                            width = 1024;
                            height = 1024;
                        }
                        t = new ManifestChunkInfo();
                        t.width = width;
                        t.height = height;

                        sheetInfo[activeSheetId].chunks[activeChunkId] = t;
                        break;

                    case 'T': // tile in the active chunk
                        t = new ManifestTileInfo();
                        t.genFileName = parts[1];
                        t.x = Core.parseInt(parts[2]);
                        t.y = Core.parseInt(parts[3]);
                        t.width = Core.parseInt(parts[4]);
                        t.height = Core.parseInt(parts[5]);
                        t.sizeBytes = Core.parseInt(parts[6]);
                        sheetInfo[activeSheetId].chunks[activeChunkId].tiles.add(t);
                        break;

                    case 'I': // image in the active sheet/chunk
                        filename = parts[5:].join(',').trim();
                        t = new ManifestFileInfo();
                        t.type = ImgResourceType.SHEET;
                        t.sheetId = activeSheetId;
                        t.chunkId = activeChunkId;
                        t.x = Core.parseInt(parts[1]);
                        t.y = Core.parseInt(parts[2]);
                        t.width = Core.parseInt(parts[3]);
                        t.height = Core.parseInt(parts[4]);
                        resourceInfo[filename] = t;

                        files = ImageResourceManifest.filesBySheetId.get(activeSheetId) ?? [];
                        ImageResourceManifest.filesBySheetId[activeSheetId] = files;
                        files.add(filename);
                        break;

                    case 'J': // A JPEG that is a member of a sheet logically but is its own chunk

                        ++activeChunkId;

                        filename = parts[5:].join(',').trim();

                        t = new ManifestTileInfo();
                        t.genFileName = parts[1];
                        t.width = Core.parseInt(parts[2]);
                        t.height = Core.parseInt(parts[3]);
                        t.sizeBytes = Core.parseInt(parts[4]);

                        t2 = new ManifestChunkInfo();
                        t2.width = t.width;
                        t2.height = t.height;
                        t2.tiles.add(t);

                        sheetInfo[activeSheetId].chunks[activeChunkId] = t2;
                        files = ImageResourceManifest.filesBySheetId.get(activeSheetId) ?? [];
                        ImageResourceManifest.filesBySheetId[activeSheetId] = files;
                        files.add(filename);

                        t = new ManifestFileInfo();
                        t.type = ImgResourceType.SHEET;
                        t.sheetId = activeSheetId;
                        t.chunkId = activeChunkId;
                        t.width = t2.width;
                        t.height = t2.height;
                        resourceInfo[filename] = t;
                        break;

                    default:
                        // If this happens, it's the compiler's fault.
                        throw new Exception();
                }
            }

            for (files : ImageResourceManifest.filesBySheetId.values()) {
                files.sort();
            }
        }
    }
}
