/*
    args[0] -> new TimeZone instance
    args[1] -> nullable ObjectInstace Core.Object
        nativeData -> an array of native TimeZone objects
    args[2] -> (int) index in the native TimeZone object list

    if the object containing the TimeZone native objects is null, then this is simply just a
    current local time zone instance that is being initialized.

    returns a list of data:

    output[0] -> (string) readable name e.g. America/New York
    output[1] -> (int) offset from UTC (in seconds) when not during DST
    output[2] -> (bool) DST is observed?
    output[3] -> (string) some sort of unique fingerprint for this timezone
*/
VM.Value lib_datetime_initTimeZone(VM.VmContext vm, Array<VM.Value> args) {

    VM.ObjectInstance timezone = (VM.ObjectInstance) args[0].internalValue;
    timezone.nativeData = new Array<object>(1);
    object nativeTzRef = null;
    string readableName = null;
    int offsetFromUtc = 0;
    int isDstObserved = 0;
    string fingerprint = null;

    if (args[1].type == VM.Types.NULL) {
        Array<string> strOut = Core.StringBuffer16;
        Array<int> intOut = Core.IntBuffer16;
        nativeTzRef = Extension._lib_datetime_getDataForLocalTimeZone(strOut, intOut);
        readableName = strOut[0];
        fingerprint = strOut[1];
        offsetFromUtc = intOut[0];
        isDstObserved = intOut[1];
    } else {
        // TODO: implement this
        return vm.globalNull;
    }

    timezone.nativeData = new Array<object>(5);
    timezone.nativeData[0] = nativeTzRef;
    timezone.nativeData[1] = readableName;
    timezone.nativeData[2] = offsetFromUtc;
    timezone.nativeData[3] = isDstObserved == 1;
    timezone.nativeData[4] = fingerprint;

    List<VM.Value> values = new List<VM.Value>();
    values.Add(VM.buildString(vm.globals, readableName));
    values.Add(VM.buildInteger(vm.globals, offsetFromUtc));
    values.Add(VM.buildBoolean(vm.globals, isDstObserved == 1));
    values.Add(VM.buildString(vm.globals, fingerprint));

    return VM.buildList(values);
}
