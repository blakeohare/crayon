/*
    args[0] -> matrix
    args[1] -> column
    args[2] -> row

*/
VM.Value lib_matrices_getValue(VM.VmContext vm, Array<VM.Value> args) {

    VM.ObjectInstance obj = (VM.ObjectInstance) args[0].internalValue;
    Array<object> nd = obj.nativeData;
    if (args[1].type != VM.Types.INTEGER || args[2].type != VM.Types.INTEGER) {
        nd[5] = "Invalid coordinates";
        return vm.globalNull;
    }

    int x = (int) args[1].internalValue;
    int y = (int) args[2].internalValue;
    int width = (int) nd[1];
    int height = (int) nd[2];
    if (x < 0 || x >= width || y < 0 || y >= height) {
        nd[5] = "Coordinates out of range.";
        return vm.globalNull;
    }

    Array<VM.Value> valueArray = (Array<VM.Value>) nd[3];
    if (!(bool) nd[4]) {
        Array<double> data = (Array<double>) nd[0];
        int length = width * height;
        int i = 0;
        while (i < length) {
            // TODO: inline this buildFLoat
            valueArray[i] = VM.buildFloat(vm.globals, data[i]);
            i += 1;
        }
    }

    return valueArray[width * y + x];
}
