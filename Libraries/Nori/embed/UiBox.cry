namespace Nori {

    /*
        Represents a physical set of elements that are rendered.
        A UiBox corresponds to...
        - A Window's renderable area excluding nested scroll panels
        - A hover box (such as a tool tip)
        - A scroll panel

        Each UI Box contains a single element, and a physically enforced width and height.

        It is important to note that a UI Box is not an element. Some elements _have_ a UIBox.

        For hit testing, the element is returned without recursing into UI Boxes.
        If that element returned has a UI Box, then hit testing recurses into it.

    */
    class UiBox {

        /*
            nativeData[0] -> actual platform ui container (<div>, Border, JPane, etc.)
        */

        field parent;
        field child;
        field width;
        field height;
        field isClipping;

        constructor(parent, width, height, isClipping) {
            $$$('allocNativeData', this, 1);
            this.parent = parent;
            this.width = width;
            this.height = height;
            this.isClipping = isClipping;
        }

        function setChild(element) {
            this.child = element;
            return this;
        }

        function renderCalculateSize(
            isHorizontal,
            containerSize,
            shouldConstrainSize, // true for things like windows and hover boxes, false for clipping elements like scroll panels.
            defaultAlign) { // Generally this is STRETCH for Windows and LEADING for other containers

            if (isHorizontal) {
                this.width = containerSize;
            } else {
                this.height = containerSize;
            }
            if (this.child != null) {
                this.child.renderCalculateSize(
                    isHorizontal,
                    isHorizontal ? this.width : this.height,
                    defaultAlign,
                    null);
            }
        }

        function render(parentUiBox) {
            $$lib_nori_render_uiBoxLayout(this, this.width, this.height, this.isClipping);
            if (this.child != null) {
                this.child.render(this);
            }
        }
    }
}
