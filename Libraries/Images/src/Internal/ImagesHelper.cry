import Base64;

namespace Images.Internal {

    const INVALID_ARG_BYTES = "Argument must be a list of integers from 0-255.";
    const INVALID_ARG_B64 = "Argument must be a valid base64 string.";

    class ImagesHelper {
        // HACK: this is an insecure hacky way to make things package-private.
        static field INST = new ImagesHelper();

        static field resourceIdAlloc = 0;

        static function verifyInt(name, value, positiveOnly = false) {
            if (Core.typeof(value) != Core.Type.INTEGER) {
                throw new InvalidArgumentException(name + " must be an integer. Found '" + value + "' instead.");
            }
            if (positiveOnly && value < 1) {
                throw new InvalidArgumentException(name + " must be greater than 0. Found '" + value + "' instead.");
            }
        }

        static function createImageFromBytes(intList, b64Str) {
            err = intList == null ? INVALID_ARG_B64 : INVALID_ARG_BYTES;
            try {
                if ($$$('imageB64BytesPreferred')) {
                    data = b64Str ?? Base64.bytesToBase64(intList);
                } else {
                    data = intList ?? Base64.base64ToBytes(b64Str);
                }
            } catch (Exception e) {
                throw new InvalidArgumentException(err);
            }

            sz = [];
            bmp = new Bitmap(Images.Internal.ImagesHelper.INST, null);
            sc = -1;
            handleResult = (_sc, w, h) => {
                sc = _sc;
                sz = [w, h];
            };
            sc = $$$('imageFromBytes', bmp, data, sz, handleResult);
            while (sc == 3) {
                Core.sleep(0.001);
            }

            if (sc == 0) {
                bmp.width = sz[0];
                bmp.height = sz[1];
                return bmp;
            }
            if (sc == 1) throw new InvalidArgumentException(err);
            if (sc == 2) throw new ImageFormatException();
            throw new Exception(); // this shouldn't happen.
        }

        static function pixelError(sc, x, y, width, height) {
            err = ['',
                "Coordinates must be integers. Found x: '" + x + "', y: '" + y + "'",
                "Coordinate out of range: (" + x + ', ' + y + ") Size: " + width + ' x ' + height,
                "Color values must be integers.",
                "Color values are out of range. RGBA values must be between 0 and 255.",
                "An unknown error occurred.", // But I'm pretty sure it was your fault.
                ][sc];
            throw new InvalidArgumentException(err);
        }

        static function toFile(format, bmp, isB64, bg = null) {
            if (format != ImageFormat.PNG && format != ImageFormat.JPEG) {
                throw new InvalidArgumentException("Format must be a value from the Images.ImageFormat enum.");
            }

            if (bg != null || format == ImageFormat.JPEG) {
                bg = bg ?? [0, 0, 0];
                t = false;
                if (Core.typeof(bg) == Type.LIST && bg.length == 3) {
                    t = true;
                    for (c : bg) {
                        if (c < 0 || c > 255) t = false;
                    }
                }
                if (!t) throw new InvalidArgumentException("Background color for opaque encoding must be a list of 3 integers from 0 to 255.");

                opaque = new Bitmap(bmp.width, bmp.height);
                opaque
                    .edit()
                    .fill(bg[0], bg[1], bg[2])
                    .drawImage(bmp, 0, 0)
                    .finish();
                bmp = opaque;
            }

            o = $$$('imageEncode', bmp, format);
            res = o[1];
            if (format == ImageFormat.PNG && o[0]) bmp._lastPng = res;
            if (o[0] != isB64) {
                if (isB64) {
                    res = Base64.bytesToBase64(res);
                    if (format == ImageFormat.PNG) bmp._lastPng = res;
                } else {
                    res = Base64.base64ToBytes(res);
                }
            }
            return res;
        }
    }
}
