namespace SRandom {

    const SIGNED_INT32_MAX = 0x7fffffff;
    const SIGNED_INT32_MAXF = 1.0 * SIGNED_INT32_MAX;

    class Randomizer {
        field _seed;
        field _queue = [];

        constructor(seed) {
            seed = 'salted-seed:' + seed;
            hash = 2;
            for (c : seed) {
                hash = (hash * 37 + Core.ord(c)) & SIGNED_INT32_MAX;
            }
            this._seed = hash;
        }

        function getInteger(min = null, max = null) {
            if (this._queue.length == 0) this._populateQueue(50);

            if (max == null) {
                if (min == null) {
                    return this._queue.pop();
                }
                return this._queue.pop() % min;
            }

            diff = max - min;
            return (this._queue.pop() % diff) + min;
        }

        function getBoolean() {
            if (this._queue.length == 0) this._populateQueue(50);
            return this._queue.pop() & 1 == 1;
        }

        function getFloat() {
            if (this._queue.length == 0) this._populateQueue(50);
            return (this._queue.pop() & SIGNED_INT32_MAX) / SIGNED_INT32_MAXF;
        }

        function shuffle(list) {
            length = list.length;

            if (this._queue.length < length) this._populateQueue(length - this._queue.length + 50);

            for (i = 0; i < length; ++i) {
                j = this._queue.pop() % length;
                t = list[i];
                list[i] = list[j];
                list[j] = t;
            }
        }

        function choice(list) {
            if (this._queue.length == 0) this._populateQueue(50);
            return list[this._queue.pop() % list.length];
        }

        function _populateQueue(n) {
            this._queue.reverse();
            this._seed = $$$('srandomPopulateQueue', this._seed, this._queue, n);
            this._queue.reverse();
        }
    }
}
