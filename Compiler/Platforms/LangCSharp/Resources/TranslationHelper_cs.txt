using System;
using System.Collections.Generic;
using Interpreter.Structs;

namespace Interpreter.Vm
{
    public static class TranslationHelper
    {
        public static VmContext ProgramData { get; set; }
        public static string ResourceManifest { get; set; }
        public static string ImageSheetManifest { get; set; }
        public static string ByteCode { get; set; }

        public static readonly bool IsWindows =
            Environment.OSVersion.Platform == PlatformID.Win32NT ||
            Environment.OSVersion.Platform == PlatformID.Win32S ||
            Environment.OSVersion.Platform == PlatformID.Win32Windows ||
            Environment.OSVersion.Platform == PlatformID.WinCE;

        public static LibraryRegistry LibraryRegistry { get; set; }

        private static List<Func<string, object>> functionPointerResolvers = new List<Func<string, object>>();

        public static object GetFunctionPointer(string name)
        {
            foreach (Func<string, object> fpResolvers in functionPointerResolvers)
            {
                object output = fpResolvers(name);
                if (output != null)
                {
                    return output;
                }
            }
            return null;
        }

        public static void RegisterFunctionPointerResolver(Func<string, object> resolver)
        {
            functionPointerResolvers.Add(resolver);
        }

        public static double GetCurrentTime()
        {
            return DateTime.Now.Ticks / 10000000.0;
        }

        public static void Noop() { }
    }
}
