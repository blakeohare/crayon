import Json;

namespace Wax {

    class WaxHub {
        @private
        constructor() { }

        static field _instance = null;

        static function getActiveHub() {
            if (WaxHub._instance == null) {
                WaxHub._instance = new WaxHub();
            }
            return WaxHub._instance;
        }

        function awaitSendRequest(serviceId, payload) {
            isDone = false;
            result = null;
            err = null;
            this.sendRequest(serviceId, payload, _result => {
                isDone = true;
                result = _result;
            }, _err => {
                isDone = true;
                err = _err;
            });

            while (!isDone) { Core.sleep(0.001); }

            if (err != null) throw new Exception(err);

            return result;
        }

        function sendRequest(serviceId, payload, cb = null, errCb = null) {
            if (Core.typeof(payload) != Type.DICTIONARY) throw new InvalidArgumentException("Payload must be a JSON-serializable dictionary.");
            serializedData = Json.serializeJson(payload); // TODO: catch error here if there's a bad nested type
            $$$('waxSend', serviceId + '', serializedData, (err, rawData) => {
                if (err == null) {
                    res = Json.parseJson(rawData);
                    if (cb != null) {
                        cb(res);
                    }
                } else {
                    if (errCb == null) throw new Exception(err);
                    errCb(err);
                }
            });
            return null;
        }
    }
}
