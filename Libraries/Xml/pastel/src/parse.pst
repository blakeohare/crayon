/*
    arg 1: string to parse
    arg 2: output list
    arg 3: dummy object instance with nativeData, (although if it doesn't, this function must initialize it)
        nativeData[0] -> Dictionary<string, string> maps XML entity codes to their string instances.
        nativeData[1] -> Dictionary<int, int> keys are a set of character codes that end unquoted attribute values. Value is ignored.

    output is the error encountered or null.

    The output list is an empty list that data is added to in a simple format...

    element: [
        (bool) true,
        (string) name,
        (string list) attribute names,
        (string list) attribute values,
        (list of lists) children in order. can be other elements or text elements
    ]

    text element: [
        (bool) false,
        (string) value
    ]
*/
VM.Value lib_xml_parse(VM.VmContext vm, Array<VM.Value> args) {
    string xml = (string) args[0].internalValue;
    VM.ListImpl list1 = (VM.ListImpl) args[1].internalValue;
    VM.ObjectInstance objInstance1 = (VM.ObjectInstance) args[2].internalValue;
    Array<object> objArray1 = objInstance1.nativeData;
    if (objArray1 == null) {
        objArray1 = new Array<object>(2);
        objInstance1.nativeData = objArray1;
        objArray1[0] = new Dictionary<string, string>();
        objArray1[1] = new Dictionary<int, int>();
    }

    List<VM.Value> output = new List<VM.Value>();
    string errMsg = lib_xml_parseImpl(
        vm,
        xml,
        Core.IntBuffer16,
        output,
        (Dictionary<string, string>) objArray1[0],
        (Dictionary<int, int>) objArray1[1]);

    if (errMsg != null) {
        return VM.buildString(vm.globals, errMsg);
    }

    VM.ListImpl list2 = (VM.ListImpl) VM.buildList(output).internalValue;
    list1.size = list2.size;
    if (@ext_boolean("ARRAY_IS_LIST")) {
        list1.list = list2.list;
    } else {
        list1.capacity = list2.capacity;
        list1.array = list2.array;
    }

    return vm.globalNull;
}
