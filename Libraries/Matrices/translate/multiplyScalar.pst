/*
    args[0] -> matrix
    args[1] -> scalar value
    args[2] -> output matrix
    args[3] -> output matrix is a matrix

*/
Value lib_matrices_function_multiplyScalar(Array<Value> args) {

    ObjectInstance obj = (ObjectInstance) args[0].internalValue;
    Array<object> nd = obj.nativeData;
    bool isInline = args[2].type == Types.NULL;
    Array<double> m1data = (Array<double>) nd[0];
    Array<double> m2data = m1data;
    if (isInline) {
        nd[4] = true;
    } else if (!(bool) args[3].internalValue) {
        nd[5] = "output must be a matrix instance";
        return VALUE_NULL;
    } else {

        obj = (ObjectInstance) args[2].internalValue;
        Array<object> nd2 = obj.nativeData;
        if ((int) nd[1] != (int) nd2[1] || (int) nd[2] != (int) nd2[2]) {
            nd[5] = "output matrix must be the same size.";
            return VALUE_NULL;
        }

        m2data = (Array<double>) nd2[0];
        nd2[4] = true;
    }

    double scalar = 0.0;
    if (args[1].type == Types.FLOAT) {
        scalar = (double) args[1].internalValue;
    } else if (args[1].type == Types.INTEGER) {
        scalar = 0.0 + (int) args[1].internalValue;
    } else {
        nd[5] = "scalar must be a number";
        return VALUE_NULL;
    }

    int i = 0;
    int length = m1data.Size();
    for (i = 0; i < length; i += 1) {
        m2data[i] = m1data[i] * scalar;
    }

    return args[0];
}
