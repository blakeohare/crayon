import CrayonUnit;
import Math;

class OpsTest : Test {

    constructor() : base() { }

    /*
        The actual and expected outputs are converted to strings before being compared.
        This is so that the type (float vs integer) can be verified. When a float is
        converted to a string, it will always have a decimal. Otherwise a float and
        integer of equal mathematical values will likely pass a == test.
    */
    function assertEq(expected, actual) {
        exp = this.canonicalizeNum(expected);
        act = this.canonicalizeNum(actual);
        assertThat(exp).isEqualTo(act);
    }

    function assertPowThrows(baseNum, powNum) {
        n = 0;
        try {
            n = baseNum ** powNum;
        } catch (InvalidArgumentException) {
            pass();
            return;
        }
        // cheesy but whatever
        assertThat(baseNum + ' ** ' + powNum + ' --> ' + n).isEqualTo('InvalidArgumentException');
    }

    // convert numerical values to strings to preserve the float-vs-int-ness of it.
    // For floats, trim it to 10 string characters to ensure
    function canonicalizeNum(n) {
        s = n + '';
        if (s.contains('.')) {
            s = ('' + Math.floor(n * 100000000 + .5) / 100000000.0)[:10];
        }
        return s;
    }

    function testBasics() {

        /*
            Each test runs twice. Once with the constants inline and once with the
            aptly named variables. This is because the Crayon compiler will optimize
            obvious expressions that only contain inline constants rather than compile
            it as an expression. The duplication is to exercise both of these codepaths.
        */

        one = 1;
        two = 2;
        three = 3;
        four = 4;
        one_f = 1.0;
        two_f = 2.0;
        three_f = 3.0;
        four_f = 4.0;
        neg_one = -1;
        neg_one_f = -1.0;
        neg_four = -4;
        neg_four_f = -4.0;
        half = 0.5;

        this.assertEq(1 + 1, 2);
        this.assertEq(one + one, 2);

        this.assertEq(1.0 + 1, 2.0);
        this.assertEq(one_f + one, 2.0);

        this.assertEq(1 + 1.0, 2.0);
        this.assertEq(one + one_f, 2.0);

        this.assertEq(1.0 + 1.0, 2.0);
        this.assertEq(one_f + one_f, 2.0);

        this.assertEq(4 ** 2, 16.0);
        this.assertEq(four ** two, 16.0);

        this.assertEq(4 ** 2.0, 16.0);
        this.assertEq(four ** two_f, 16.0);

        this.assertEq(4 ** -1, 0.25);
        this.assertEq(four ** neg_one_f, 0.25);

        this.assertEq(4.0 ** -1, 0.25);
        this.assertEq(four_f ** neg_one_f, 0.25);

        this.assertEq(3 & 2, 2);
        this.assertEq(three & two, 2);

        this.assertEq(4 | 1, 5);
        this.assertEq(four | one, 5);

        this.assertEq(3 ^ 1, 2);
        this.assertEq(three ^ one, 2);

        this.assertEq(3 << 3, 24);
        this.assertEq(three << three, 24);

        this.assertEq(4 >> 1, 2);
        this.assertEq(four >> one, 2);

        this.assertEq((-4) >> 1, -2);
        this.assertEq(neg_four >> one, -2);

        this.assertEq(4 ** 0.5, 2.0);
        this.assertEq(four ** half, 2.0);

        this.assertPowThrows(-555, 0.5);
    }
}
