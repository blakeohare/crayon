// the string argument is ignored at runtime, but at startup is used to calculate the function token, for all
// CALL_LIB_FUNCTION_DYNAMIC ops, which is then assigned to row[0]
int1 = row[0]; // function token
argCount = row[2];
object1 = libFunctionPointers[pc];

for (i = argCount - 1; i >= 0; i -= 1) {
    valueStackSize -= 1;
    funcArgs[i] = valueStack[valueStackSize];
}

prepareToSuspend(ec, stack, valueStackSize, pc);

value = Core.InvokeDynamicLibraryFunction(object1, funcArgs);
if (ec.executionStateChange) {
    ec.executionStateChange = false;
    // TODO: declare constants
    if (ec.executionStateChangeCommand == 1) {
        // Suspend VM
        return suspendInterpreter();
    }
}

if (row[3] == 1) { // output used?
    @import("ValueStackCapacityCheck.pst");
    valueStack[valueStackSize] = value;
    valueStackSize += 1;
}
