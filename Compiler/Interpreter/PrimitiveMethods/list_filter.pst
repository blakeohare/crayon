if (argCount != 1) {
    hasInterrupt = EX_InvalidArgument(ec, primitiveMethodWrongArgCountError("list filter method", 1, argCount));
} else {
    value2 = funcArgs[0];
    if (value2.type != Types.FUNCTION) {
        hasInterrupt = EX_InvalidArgument(ec, "list filter method requires a function pointer as its argument.");
    } else {
        // TODO: consider checking arg length of the method pointer?
        // For now it'll just error in the Core/embed.cry code

        primitiveMethodToCoreLibraryFallback = true;
        functionId = metadata.primitiveMethodFunctionIdFallbackLookup[0]; // MAGIC NUMBER: 0 (see metadata initializer)
        funcArgs[1] = value; // funcArgs is allocated very big.
        argCount = 2;

        output = null; // This is required. Triggers function fallback.
    }
}
