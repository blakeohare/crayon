namespace Images {

    function _throwFinished() {
        throw new Exception("This edit session has been closed.");
    }

    class EditSession {

        field _finished = false;
        field _bitmap;

        constructor(magic, bitmap) {
            if (magic != Images.Internal.ImagesHelper.INST) throw new Exception();
            this._bitmap = bitmap;
            $$$('imageSessionStart', this, this._bitmap);
        }

        function getPixel(x, y) {
            if (this._finished) _throwFinished();
            c = [];
            sc = $$$('imageGetPixel', this._bitmap, this, x, y, c);
            if (sc == 0) return c;
            Images.Internal.ImagesHelper.pixelError(sc, x, y, this._bitmap.width, this._bitmap.height);
        }

        function setPixel(x, y, rOrColor, g = null, b = null, a = 255) {
            if (this._finished) _throwFinished();
            sc = $$$('imageSetPixel', this, x, y, x, y, rOrColor, g, b, a);
            if (sc == 0) return this;
            Images.Internal.ImagesHelper.pixelError(sc, x, y, this._bitmap.width, this._bitmap.height);
        }

        function drawLine(x1, y1, x2, y2, rOrColor, g = null, b = null, a = 255) {
            if (this._finished) _throwFinished();
            sc = $$$('imageSetPixel', this, x1, y1, x2, y2, rOrColor, g, b, a);
            if (sc == 0) return this;
            if (x1 < 0 || y1 < 0 || x1 >= this._bitmap.width || y1 >= this._bitmap.height) {
                x = x1;
                y = y1;
            } else {
                x = x2;
                y = y2;
            }
            Images.Internal.ImagesHelper.pixelError(sc, x, y, this._bitmap.width, this._bitmap.height);
        }

        function fill(r, g, b, a = 255) {
            if (this._finished) _throwFinished();
            // TODO: change this once the Drawing library is fully implemented.
            maxX = this._bitmap.width - 1;
            height = this._bitmap.height;
            for (y = 0; y < height; ++y) {
                $$$('imageSetPixel', this, 0, y, maxX, y, r, g, b, a);
            }
            return this;
        }

        function drawImage(otherBitmap, x, y) {
            w = otherBitmap.width;
            h = otherBitmap.height;
            return this.drawImageRegionStretched(
                otherBitmap,
                x, y, w, h,
                0, 0, w, h);
        }

        function drawImageStretched(otherBitmap, x, y, targetWidth, targetHeight) {
            return this.drawImageRegionStretched(
                otherBitmap,
                x, y, targetWidth, targetHeight,
                0, 0, otherBitmap.width, otherBitmap.height);
        }

        function drawImageRegion(otherBitmap, x, y, regionX, regionY, regionWidth, regionHeight) {
            return this.drawImageRegionStretched(
                otherBitmap,
                x, y, regionWidth, regionHeight,
                regionX, regionY, regionWidth, regionHeight);
        }

        function drawImageRegionStretched(
            otherBitmap,
            targetX, targetY, targetWidth, targetHeight,
            regionX, regionY, regionWidth, regionHeight) {

            if (this._finished) _throwFinished();
            if (!(otherBitmap is Bitmap)) throw new InvalidArgumentException('image drawing requires a Bitmap instance.');
            Images.Internal.ImagesHelper.verifyInt('targetX', targetX);
            Images.Internal.ImagesHelper.verifyInt('targetY', targetY);
            Images.Internal.ImagesHelper.verifyInt('targetWidth', targetWidth);
            Images.Internal.ImagesHelper.verifyInt('targetHeight', targetHeight);
            Images.Internal.ImagesHelper.verifyInt('regionX', regionX);
            Images.Internal.ImagesHelper.verifyInt('regionY', regionY);
            Images.Internal.ImagesHelper.verifyInt('regionWidth', regionWidth);
            Images.Internal.ImagesHelper.verifyInt('regionHeight', regionHeight);

            $$$('imageBlit',
                this, otherBitmap,
                regionX, regionY, regionWidth, regionHeight,
                targetX, targetY, targetWidth, targetHeight);
            return this;
        }

        function finish() {
            this._finished = true;
            $$$('imageSessionFinish', this, this._bitmap);
            this._bitmap._versionId++;
            this._bitmap._lastPng = null;
            this._bitmap._versionKey = this._bitmap._resourceId + '_' + this._bitmap._versionId;
        }
    }
}
