import Math;
import U3Nori;
import U3NoriXml;

function main() {

    content = U3NoriXml.build(
    '<DockPanel>
        <TextBlock id="display" dock="North" height="10%" size="18" margin="12" horizontalAlignment="right">0</TextBlock>
        <DockPanel id="button_panel">
            <StackPanel dock="West" width="20%" id="col1">
                <Button id="num7" width="100%" height="25%">7</Button>
                <Button id="num4" width="100%" height="33%">4</Button>
                <Button id="num1" width="100%" height="50%">1</Button>
                <Button id="num0" width="100%" height="100%">0</Button>
            </StackPanel>

            <StackPanel dock="West" width="25%" id="col2">
                <Button id="num8" width="100%" height="25%">8</Button>
                <Button id="num5" width="100%" height="33%">5</Button>
                <Button id="num2" width="100%" height="50%">2</Button>
                <Button id="dec" width="100%" height="100%">.</Button>
            </StackPanel>

            <StackPanel dock="West" width="33%" id="col3">
                <Button id="num9" width="100%" height="25%">9</Button>
                <Button id="num6" width="100%" height="33%">6</Button>
                <Button id="num3" width="100%" height="50%">3</Button>
                <Button id="sign" width="100%" height="100%">+/-</Button>
            </StackPanel>

            <StackPanel dock="West" width="50%" id="col4">
                <Button id="minus" width="100%" height="25%">-</Button>
                <Button id="times" width="100%" height="33%">*</Button>
                <Button id="divide" width="100%" height="50%">/</Button>
                <Button id="equals" width="100%" height="100%">=</Button>
            </StackPanel>

            <StackPanel id="col5">
                <Button id="clear" width="100%" height="25%">C</Button>
                <Button id="sqrt" width="100%" height="33%">sqrt</Button>
                <Button id="plus" width="100%" height="100%">+</Button>
            </StackPanel>

        </DockPanel>
    </DockPanel>');

    screenUpdater = new ScreenUpdater(content.findElement('display'));
    logic = new CalculatorLogic(screenUpdater.update);

    content.findElement('num0').setClickHandler(() => { logic.pushNumber(0); });
    content.findElement('num1').setClickHandler(() => { logic.pushNumber(1); });
    content.findElement('num2').setClickHandler(() => { logic.pushNumber(2); });
    content.findElement('num3').setClickHandler(() => { logic.pushNumber(3); });
    content.findElement('num4').setClickHandler(() => { logic.pushNumber(4); });
    content.findElement('num5').setClickHandler(() => { logic.pushNumber(5); });
    content.findElement('num6').setClickHandler(() => { logic.pushNumber(6); });
    content.findElement('num7').setClickHandler(() => { logic.pushNumber(7); });
    content.findElement('num8').setClickHandler(() => { logic.pushNumber(8); });
    content.findElement('num9').setClickHandler(() => { logic.pushNumber(9); });

    content.findElement('plus').setClickHandler(() => { logic.pushOperator('+'); });
    content.findElement('minus').setClickHandler(() => { logic.pushOperator('-'); });
    content.findElement('times').setClickHandler(() => { logic.pushOperator('*'); });
    content.findElement('divide').setClickHandler(() => { logic.pushOperator('/'); });

    content.findElement('sqrt').setClickHandler(logic.pushSquareRoot);
    content.findElement('equals').setClickHandler(logic.pushEquals);
    content.findElement('clear').setClickHandler(logic.pushClear);

    frame = new Frame()
        .setTitle("U3-based Calculator")
        .setContent(content)
        .setWidth(400)
        .setHeight(600)
        .show();
}

class ScreenUpdater {
    field screenElement;

    constructor(screen) {
        this.screenElement = screen;
    }

    function update(value) {
        value = value + '';
        if (value.length > 12) {
            value = value[:12];
        }
        this.screenElement.setText(value);
    }
}

class CalculatorLogic {

    field displayUpdaterCallback;

    field currentValue = null;
    field previousValue = null;
    field operator = null;
    field lastOperatorPushed = null;
    field autoEqual = null;

    constructor(displayUpdaterCallback) {
        this.displayUpdaterCallback = displayUpdaterCallback;
    }

    function pushNumber(num) {
        this.autoEqual = null;
        this.currentValue = (this.currentValue ?? 0) * 10.0 + num;
        this.updateDisplay();
    }

    function pushOperator(op) {
        if (this.currentValue == null) return;
        this.autoEqual = null;

        this.previousValue = this.currentValue;
        this.currentValue = null;
        this.operator = op;
    }

    function pushSquareRoot() {
        value = this.currentValue ?? this.previousValue;
        if (value == null) return;

        if (value > 0) {
            this.previousValue = null;
            this.currentValue = value ** .5;
            this.updateDisplay();
        }
    }

    function pushEquals() {
        if (this.autoEqual != null) {
            this.currentValue = this.autoEqual[0];
            this.operator = this.autoEqual[1];
        }

        left = this.previousValue;
        right = this.currentValue;

        switch (this.operator ?? this.lastOperatorPushed ?? "invalid") {
            case "+": value = left + right; break;
            case "-": value = left - right; break;
            case "*": value = left * right; break;
            case "/": value = left / right; break;
            case "invalid": return;
            default: throw new Exception();
        }

        this.autoEqual = [right, this.operator];
        this.currentValue = null;
        this.operator = null;
        this.previousValue = value;

        this.updateDisplay();
    }

    function pushClear() {
        this.previousValue = null;
        this.currentValue = null;
        this.operator = null;
        this.lastOperatorPushed = null;
        this.autoEqual = null;
        this.updateDisplay();
    }

    function updateDisplay() {
        // Convert float to int if it is a whole number
        num = this.currentValue ?? this.previousValue ?? 0;
        if (num % 1 == 0) {
            num = Math.floor(num);
        }
        this.displayUpdaterCallback(num);
    }
}
