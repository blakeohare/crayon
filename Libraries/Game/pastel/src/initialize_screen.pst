/*
    arg[0] -> game width
    arg[1] -> game height
    arg[2] -> screen width
    arg[3] -> screen height
    arg[4] -> execution context ID
    All arguments are verified to be positive integers.
*/
VM.Value lib_game_initialize_screen(VM.VmContext vm, Array<VM.Value> args) {

    int ecId = (int) args[4].internalValue;

    // Get a reference to the ExecutionContext that the calling code thinks is currently active.
    // It's possible that the screen will block and re-invoke the VM and destroy the active
    // execution context, in which case, vm_suspend_for_context() will not work and fail when trying to find the
    // instance.
    VM.ExecutionContext ec = VM.getExecutionContext(vm, ecId);

    Extension._lib_game_initialize_screen(
        (int) args[0].internalValue, // game width
        (int) args[1].internalValue, // game height
        (int) args[2].internalValue, // screen width
        (int) args[3].internalValue, // screen height
        ecId);

    // Suspend the ExecutionContext that is active when this was called (as that will be the one
    // that will be checked for state changes).
    VM.vm_suspend_for_context(ec, 1);

    return vm.globalNull;
}
