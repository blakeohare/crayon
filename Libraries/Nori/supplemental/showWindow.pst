/*
    args[0] -> (ObjectInstance) window native instance
    args[1] -> (List<Value>) properties
*/
Value lib_nori_showWindow(VmContext vm, Array<Value> args) {
    ObjectInstance window = (ObjectInstance) args[0].internalValue;
    List<Value> properties = Core.ForceParens((ListImpl) args[1].internalValue).items;
    ObjectInstance root = (ObjectInstance) args[2].internalValue;
    // TODO: conditionally execute this code.
    // The only reason the properties are required here is if a platform doesn't allow changing these properties without a window being shown on the screen.
    // Alternatively, if there are no platforms like that or I can work around this, then remove the property stuff outright.
    int propertyCount = properties.Size();
    Array<object> unboxedValues = new Array<object>(propertyCount);
    for (int i = 0; i < propertyCount; i += 1) {
        unboxedValues[i] = properties[i].internalValue;
    }

    int execId = vm_getCurrentExecutionContextId(vm);

    Native._lib_nori_showWindow(window.nativeData[0], unboxedValues, root.nativeData[0], execId);

    // If this is JavaScript, this will run immediately after the showWindow call. Therefore the VM
    // must be suspended. The JavaScript implementation of Nori will fire a new Interpreter process once
    // the closed handler is run.
    if (!@ext_boolean("IS_WINDOW_SHOW_BlOCKING")) {
        vm_suspend_with_status(vm, 1);
    }

    return vm.globalNull;
}
