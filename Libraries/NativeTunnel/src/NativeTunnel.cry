namespace NativeTunnel {

    static class Tunnel {

        static field _callbacksById = {};

        static function send(type, payload, cb = null) {
            id = $$$('nativeTunnelSend', type, payload);
            sent = id > 0;
            if (cb != null && sent) {
                Tunnel._callbacksById[id] = cb;
            }
            return sent;
        }

        static function flushRecvQueue() {
            hasMore = true;
            callbacks = Tunnel._callbacksById;
            msg = [false] * 4;
            while (hasMore) {
                hasResponse = $$$('nativeTunnelRecv', msg);
                if (hasResponse) {
                    id = msg[0];
                    isSuccess = msg[1];
                    payload = msg[2];
                    isRecurring = msg[3];
                    if (!isSuccess) {
                        throw new Exception(payload);
                    }
                    callback = callbacks.get(id);
                    if (callback != null) {
                        if (!isRecurring) callbacks.remove(id);
                        callback(payload);
                    }
                } else {
                    hasMore = false;
                }
            }
        }
    }
}
