
def ResourceReader_readTextFile(path):
  path = path.replace('/', os.sep)
  c = open(path, 'rt')
  text = c.read()
  c.close()

  # Trim the unicode BOM
  if text[:3] == '\xef\xbb\xbf':
    text = text[3:]
  elif text[:1] == '\ufeff':
    text = text[1:]

  return text

def ResourceReader_readImageFile(path):
  path = path.replace('/', os.sep)
  return GetPyGameReferenceWorkaround().image.load(path).convert_alpha()

# For some of the stuff that isn't exactly game related but still requires a reference to
# some pygame library (image stuff), open a dummy window until the real window gets initialized
# by calling into the game initializer method which was registered into globals when the game
# library was imported. If the game library was not imported, the ImageResources library will not
# work correctly. This is a current limitation.
def GetPyGameReferenceWorkaround():
  initFP = TranslationHelper_globals.get('LIB:GAME:initFP')
  open_dummy_window = not TranslationHelper_globals.get('LIB:GAME:init', False)
  pg = initFP()
  if open_dummy_window:
    pg.display.set_mode((400, 300))
  return pg
