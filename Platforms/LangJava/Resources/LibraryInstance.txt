package org.crayonlang.interpreter;

import java.lang.reflect.Method;
import java.util.HashMap;

public final class LibraryInstance {

  private String name;
  private Method manifestRunner;
  private HashMap<String, Method> methods = new HashMap<String, Method>();

  public LibraryInstance(String name, Class<?> libClass) {
	this.name = name;
	String canonicalName = name.toLowerCase();
	String manifestRunnerName = "v_lib_manifest_RegisterFunctions";
	String invokablePrefix = "v_lib_" + canonicalName + "_function_";
	for (Method method : libClass.getMethods()) {
	  String methodName = method.getName();
	  if (methodName.startsWith(invokablePrefix)) {
	     methods.put(methodName.substring(invokablePrefix.length()), method);
	  } else if (methodName.equals(manifestRunnerName)) {
	    manifestRunner = method;
	  }
	}
	if (manifestRunner == null) {
	  throw new RuntimeException(this.name + " has no manifest runner.");
	}
  }

  public void runManifestMethod(Object lro) {
    try {
      manifestRunner.invoke(null, new Object[] { lro });
	} catch (RuntimeException re) {
	  throw re;
    } catch (Exception e) {
	  throw new RuntimeException(e);
	}
  }

  public Method getMethod(String name) {
    Method method = methods.get(name);
	if (method == null) throw new RuntimeException("Method not found: '" + name + "'");
	return method;
  }
}
