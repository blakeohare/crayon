/*
	arg 1: GraphicsTexture original instance
	arg 2: GraphicsTexture new instance (no native data yet)
	arg 3: boolean: flip horizontally
	arg 4: boolean: flip vertically
	arg 5: original GrahpicsTextureResource
	arg 6: new GrahpicsTextureResource (atlas-based platforms only) or null. Need to initialize this.
	
	one or both flips will be true.
	For texture atlas platforms, simply swap around the texture bounds.
	For other platforms, create a mutated copy of the image but maintain the (0, 0, 1, 1) texture bounds.
*/
import inline "FrameworkFunctions/6_arg.cry";

// The output (arg2) is an uninitialized GraphicsTexture
// Create a copy of the original (arg1) GraphicsTexture's nativeData.
objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
objInstance2 = $_cast('ObjectInstance', Value$arg2.internalValue);
objArray1 = ObjectInstance$objInstance1.nativeData;
objArray2 = $_new_array('object', 7);
ObjectInstance$objInstance2.nativeData = objArray2;
bool1 = $_cast('bool', Value$arg3.internalValue);
bool2 = $_cast('bool', Value$arg4.internalValue);
i = 6;
while (i >= 0) {
	$_array_set(objArray2, i, $_array_get(objArray1, i));
	i -= 1;
}

if (%%%LIB_GRAPHICS_USES_TEXTURE_ATLAS%%%) {

	// For texture atlas based frameworks, simply swap the left-right and top-bottom bounds.

	/*
		objArray1[1] -> texture left
		objArray1[2] -> texture top
		objArray1[3] -> texture right
		objArray1[4] -> texture button
	*/
	if (bool1) {
		object1 = $_array_get(objArray1, 1);
		$_array_set(objArray2, 1, $_array_get(objArray2, 3));
		$_array_set(objArray2, 3, object1);
	}
	if (bool2) {
		object1 = $_array_get(objArray1, 2);
		$_array_set(objArray2, 2, $_array_get(objArray2, 4));
		$_array_set(objArray2, 4, object1);
	}
	
} else {

	// For non-texture atlas based frameworks, the GraphicsTextureResource is a copy and can be 
	// freely manipulated. However, the GraphicsTexture.NativeData[0] pointer is to the old
	// GraphicsTextureResource and must be updated to the new one on arg6. 
	
	// the new GraphicsTextureResource
	objInstance1 = $_cast('ObjectInstance', Value$arg6.internalValue);
	objArray1 = ObjectInstance$objInstance1.nativeData;
	
	// the new GraphicsTexture (which current points to the old GraphicsTextureResource)
	objInstance2 = $_cast('ObjectInstance', Value$arg2.internalValue);
	// update to point to the new one (i.e. objArray1)
	$_array_set(ObjectInstance$objInstance2.nativeData, 0, objArray1);
	
	// Now do the actual flipping. The bitmap is located in nativeData[3]
	object1 = $_array_get(objArray1, 3);
	// Do the flip.
	object1 = $_lib_graphics2d_flipTexture(object1, bool1, bool2);
	$_array_set(objArray1, 3, object1);
}

// return the new GraphicsTexture so that this system call can return directly from user code and 
// save one single VM cycle.
output = arg2;
