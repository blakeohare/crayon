import Resources;
/*
    Map object. Contains the tile grid.
*/
class Map {
    field id;
    field grid;
    field width;
    field height;
    field startLoc;

    constructor(id) {
        this.id = id;
        lines = Resources.readText('levels/' + id + '.txt').trim().split('\n');
        width = lines[0].trim().length;
        height = lines.length;
        grid = makeGrid(width, height);

        TileStore.initialize();

        startLoc = null;
        for (y = 0; y < height; ++y) {
            line = lines[y].trim();
            for (x = 0; x < width; ++x) {
                id = line[x];

                // O is not a tile. It is a magic string to indicate start position.
                // Treat it as an empty tile.
                if (id == 'O') {
                    startLoc = [x, y];
                    id = '.';
                }

                if (id == '.') {
                    tile = null;
                } else {
                    template = TileStore.get(id);
                    tile = new Tile(template, x, y);
                }
                grid[x][y] = tile;
            }
        }
        this.grid = grid;
        this.width = width;
        this.height = height;
        this.startLoc = startLoc;
    }

    function render(rc, cx, cy) {
        for (y = 0; y < this.height; ++y) {
            for (x = 0; x < this.width; ++x) {
                tile = this.grid[x][y];
                if (tile != null) {
                    images = tile.template.images;
                    image = images[rc % images.length];
                    image.draw(x * 32 - cx, y * 32 - cy);
                }
            }
        }
    }
}
