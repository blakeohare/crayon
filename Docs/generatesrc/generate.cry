
function generateDocumentationHtml(docRoot) {
	output = [
		'<html>',
		'<head>',
		'<title>Documentation</title>',
		'</head>',
		'<body>',
		'<style>',
		[
			'body { font-family: "Helvetica", "Arial", sans-serif; }',
			'.codefont { font-family: "Menlo", "Consolas", "Courier New", monospace; font-size:10pt; }',
			'table.arguments { border-radius:8px; overflow:hidden; border-spacing:0px; border-collapse: separate; background-color:#eee; }',
			'table.arguments thead { background-color:#ccc; font-weight:bold; text-align:left; }',
			'table.arguments td, table.arguments th { padding:8px; }',
			'td.argname { font-weight:bold; color:#0a8; }',
			'table.arguments td.argtype { color:#444; padding-right:40px; }',
			'.codesnippet { background-color:#eee; border-radius:8px; padding:16px; margin-bottom:12px; }',
			'.itembox { margin-bottom:20px; margin-left:30px;}',
		].join('\n'),
		'</style>'];

	if (docRoot is Library) {
		generateLibraryHtml(docRoot, output);
	} else {
		throw new Exception("Unrecognized doc root type.");
	}
	output.add('</body></html>');
	return output.join('');
}

function spanCodeFont(str) {
	return '<span class="codefont">' + htmlSpecialChars(str) + '</span>';
}

function generateLibraryHtml(library, buffer) {
	buffer.add('<h1>' + htmlSpecialChars(library.name) + '</h1>');

	library.namespaces.sort(sortByNameKeyFunction);

	buffer.add('<ul>');
	for (ns : getSortedList(library.namespaces)) {
		buffer.add('<li>');
		buffer.add(spanCodeFont('namespace'));
		buffer.add(' ');
		buffer.add(htmlSpecialChars(ns.name));
		
		buffer.add('<ul>');
		if (ns.constants.length > 0) {
			for (cnst : getSortedList(ns.constants)) {
				buffer.add('<li>');
				buffer.add('<a href="#');
				buffer.add(cnst.getBookmark());
				buffer.add('">');
				buffer.add(spanCodeFont('const'));
				buffer.add(' ');
				buffer.add(htmlSpecialChars(cnst.name));
				buffer.add('</a></li>');
			}
		}

		if (ns.enums.length > 0) {
			for (en : getSortedList(ns.enums)) {
				buffer.add('<li>');
				buffer.add('<a href="#');
				buffer.add(en.getBookmark());
				buffer.add('">');
				buffer.add(spanCodeFont('enum'));
				buffer.add(' ');
				buffer.add(htmlSpecialChars(en.name));
				buffer.add('</a></li>');
			}
		}

		if (ns.functions.length > 0) {
			for (fn : getSortedList(ns.functions)) {
				buffer.add('<li>');
				buffer.add('<a href="#');
				buffer.add(fn.getBookmark());
				buffer.add('">');
				buffer.add(spanCodeFont('function'));
				buffer.add(' ');
				buffer.add(htmlSpecialChars(fn.name));
				buffer.add('(');
				for (i = 0; i < fn.argNames.length; ++i) {
					if (i > 0) buffer.add(', ');
					buffer.add(htmlSpecialChars(fn.argNames[i]));
				}
				buffer.add(')');
				buffer.add('</a>');
				buffer.add('</li>');
			}
		}

		if (ns.classes.length > 0) {
			for (cls : getSortedList(ns.classes)) {
				buffer.add('<li>');
				buffer.add('<a href="#');
				buffer.add(cls.getBookmark());
				buffer.add('">');
				buffer.add(spanCodeFont('class'));
				buffer.add(' ');
				buffer.add(htmlSpecialChars(cls.name));
				buffer.add('</a>');
				if (cls.functions.length > 0) {
					buffer.add('<ul>');
					for (fn : getSortedList(cls.functions)) {
						buffer.add('<li>');
						buffer.add('<a href="#');
						buffer.add(ns.name.lower() + '-function-' + cls.name.lower() + '-' + fn.name.lower());
						buffer.add('">');
						buffer.add(spanCodeFont((fn.isStatic ? 'static ' : '') + 'function'));
						buffer.add(' ');
						buffer.add(htmlSpecialChars(fn.name));
						buffer.add('(');
						for (i = 0; i < fn.argNames.length; ++i) {
							if (i > 0) buffer.add(', ');
							buffer.add(htmlSpecialChars(fn.argNames[i]));
						}
						buffer.add(')');
						buffer.add('</a>');
						buffer.add('</li>');
					}
					buffer.add('</ul>');
				}
				buffer.add('</li>');
			}
		}
		buffer.add('</ul>');
		buffer.add('</li>');
	}
	buffer.add('</ul>');


	for (ns : library.namespaces) {

		for (cnst : ns.constants) {
			buffer.add('<div>');
			
			buffer.add('<h2>');
			buffer.add('<a name="' + cnst.getBookmark() + '"></a>');
			buffer.add(ns.name + '.' + cnst.name);
			buffer.add('</h2>');
			
			buffer.add('<div>');
			buffer.add(cnst.description);
			buffer.add('</div>');

			buffer.add('</div>');
		}
		
		for (en : ns.enums) {
			
		}

		for (fn : ns.functions) {
			buffer.add('<div class="itembox">');
			generateFunctionHtml(buffer, fn);
			buffer.add('</div>');
		}

		for (cls : ns.classes) {
			buffer.add('<div>');
			buffer.add('<h1>');
			buffer.add('<a name="');
			buffer.add(cls.getBookmark());
			buffer.add('"></a>');
			buffer.add(ns.name + '.' + cls.name);
			buffer.add('</h1>');

			buffer.add('<div>');
			buffer.add(htmlSpecialChars(cls.description));
			buffer.add('</div>');

			classVar = cls.name;
			classVar = classVar[0].lower() + classVar[1:];

			for (fi : cls.fields) {
				buffer.add('<h2>');
				buffer.add('<a name="' + fi.getBookmark() + '"></a>');
				buffer.add(classVar + '.' + fi.name);
				buffer.add('</h2>');

				buffer.add('<div>');
				buffer.add(htmlSpecialChars(fi.description));
				buffer.add('</div>');
			}

			for (fn : cls.functions) {
				buffer.add('<div class="itembox">');
				generateFunctionHtml(buffer, fn);
				buffer.add('</div>');
			}

			buffer.add('</div>');
		}
	}

}

function formatType(typeKey) {
	switch (typeKey) {
		case 'int':
		case 'integer':
			return "integer";

		case 'bool':
		case 'boolean':
			return "boolean";

		case 'string':
			return "string";

		default:
			if (typeKey.startsWith('list-of-')) {
				return "List of " + typeKey['list-of-'.length:];
			}
			return typeKey;
	}
}

function generateFunctionHtml(buffer, fn) {
	buffer.add('<div>');

	buffer.add('<h2>');
	buffer.add('<a name="' + fn.getBookmark() + '"></a>');
	buffer.add(fn.getDisplayName());
	buffer.add('</h2>');
	
	buffer.add('<div class="itembox">');

	buffer.add('<div class="codefont codesnippet">');
	buffer.add(fn.getInvocationName());
	buffer.add('(');
	for (i = 0; i < fn.argNames.length; ++i) {
		if (i > 0) buffer.add(', ');
		buffer.add(fn.argNames[i]);
	}
	buffer.add(')');
	buffer.add('</div>');

	buffer.add('<div>');
	buffer.add(fn.description);
	buffer.add('</div>');
	
	if (fn.argNames.length > 0) {
		buffer.add('<div>');
		buffer.add("<h3>Arguments</h3>");
		buffer.add('<table class="arguments">');
		buffer.add('<thead><tr><th>Name</th><th>Type</th><th></th></thead>');
		buffer.add('<tbody>');
		for (i = 0; i < fn.argNames.length; ++i) {
			buffer.add('<tr>');
			buffer.add('<td class="codefont argname">');
			buffer.add(fn.argNames[i]);
			buffer.add('</td>');
			buffer.add('<td class="codefont argtype">');
			buffer.add(formatType(fn.argTypes[i]));
			buffer.add('</td>');
			buffer.add('<td>');
			buffer.add(fn.argDescriptions[i]);
			buffer.add('</td>');
			buffer.add('</tr>');
		}
		buffer.add('</tbody>');
		buffer.add('</table>');
		buffer.add('</div>');
	}

	if (fn.returnDescription != null) {
		buffer.add('<div>');
		buffer.add("<b>Returns</b> ");
		buffer.add('(' + fn.returnType + '): ');
		buffer.add(fn.returnDescription);
		buffer.add('</div>');
	}

	buffer.add('</div>'); // itembox
	buffer.add('</div>');
}

function htmlSpecialChars(str) {
	return str.replace('&', '&amp;').replace('<', '&lt;');
}

function getSortedList(list) {
	list.sort(sortByNameKeyFunction);
	return list;
}

function sortByNameKeyFunction(thing) {
	return thing.name.lower();
}
