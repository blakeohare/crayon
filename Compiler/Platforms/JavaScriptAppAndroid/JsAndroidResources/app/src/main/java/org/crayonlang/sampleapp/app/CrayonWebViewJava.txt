package %%%JAVA_PACKAGE%%%.app;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.util.Log;
import android.view.MotionEvent;
import android.webkit.ConsoleMessage;
import android.webkit.JavascriptInterface;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import java.util.ArrayList;

public class CrayonWebView extends WebView {

    private int executionContextId;
    private boolean readyToReceiveMessages = false;

    // Use positive values so that if events happen to sneak through before initialization is
    // complete, they won't cause division by 0 errors.
    private int logicalWidth = 100;
    private int logicalHeight = 100;
	private int screenWidth;
	private int screenHeight;

    public CrayonWebView(Context context, int width, int height) {
        super(context);
		
		this.screenWidth = width;
		this.screenHeight = height;

        this.getSettings().setJavaScriptEnabled(true);

        this.setWebViewClient(new GameLibWebViewClient());
        this.setWebChromeClient(new WebChromeClient() {
            @Override
            public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
                String filename = consoleMessage.sourceId();
                Log.d("JS", "<" + filename + ":" + consoleMessage.lineNumber() + "> " + consoleMessage.message());
                return super.onConsoleMessage(consoleMessage);
            }
        });
        this.addJavascriptInterface(new JavaScriptBridge(this), "JavaScriptBridge");
        this.loadUrl("file:///android_asset/index.html");
    }

    @Override
    public boolean onTouchEvent(MotionEvent e) {
        this.sendMessage("touch-event", "TODO", false);
        return true;
    }

    private String urlEncode(String value) {
        int length = value.length();
        if (length == 0) return "";
        StringBuilder sb = new StringBuilder();
        sb.append((int)value.charAt(0));
        for (int i = 1; i < length; ++i) {
            sb.append(' ');
            sb.append((int)value.charAt(i));
        }
        return sb.toString();
    }

    private ArrayList<String> messageQueue = new ArrayList<>();
    private void sendMessage(String type, String msg, boolean useUrlEncode) {
        if (this.readyToReceiveMessages) {
            if (useUrlEncode) {
                type = urlEncode(type);
                msg = urlEncode(msg);
            }
            final String js = "javascript:receiveMessage('" + type + "', '" + msg + "', " + (useUrlEncode ? "true" : "false") + ")";
            final WebView wv = this;
            this.post(new Runnable() {
                @Override
                public void run() {
                    wv.loadUrl(js);
                }
            });
        } else {
            messageQueue.add(type);
            messageQueue.add(msg);
        }
    }

    void receiveMessage(String type, String msg) {
        switch (type) {

            case "ready":
                this.readyToReceiveMessages = true;
                for (int i = 0; i < messageQueue.size(); i += 2) {
                    this.sendMessage(messageQueue.get(i), messageQueue.get(i + 1), false);
                }
                messageQueue.clear();
                break;

            default:
                throw new RuntimeException("Unknown message: " + type);
        }
    }

    public class JavaScriptBridge {

        private CrayonWebView webView;

        public JavaScriptBridge(CrayonWebView webView) {
            this.webView = webView;
        }

        @JavascriptInterface
        public void onSendNativeMessage(String type, String rawValue) {
            this.webView.receiveMessage(type, rawValue);
        }
    }

    private class GameLibWebViewClient extends WebViewClient {

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {

            if(Uri.parse(url).getHost().length() == 0) {
                return false;
            }

            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
            view.getContext().startActivity(intent);
            return true;
        }
    }
}
