VM.Value lib_md5_digestMd5(VM.VmContext vm, Array<VM.Value> args) {
    VM.ObjectInstance obj = (VM.ObjectInstance) args[0].internalValue;
    VM.ListImpl output = (VM.ListImpl) args[1].internalValue;
    List<int> byteList = (List<int>) obj.nativeData[0];
    Array<int> resultBytes = lib_md5_digestMd5Impl(byteList);
    for (int i = 0; i < 16; ++i) {
        int b = resultBytes[i];
        VM.addToList(output, vm.globals.positiveIntegers[b]);
    }
    return args[1];
}

// Source: https://en.wikipedia.org/wiki/MD5#Pseudocode
Array<int> lib_md5_digestMd5Impl(List<int> inputBytes) {

    Array<int> s = new Array<int>(64);
    Array<int> K = new Array<int>(64);

    s[0] = 7;
    s[1] = 12;
    s[2] = 17;
    s[3] = 22;
    s[4] =  7;
    s[5] = 12;
    s[6] = 17;
    s[7] = 22;
    s[8] =  7;
    s[9] = 12;
    s[10] = 17;
    s[11] = 22;
    s[12] =  7;
    s[13] = 12;
    s[14] = 17;
    s[15] = 22;
    s[16] = 5;
    s[17] =  9;
    s[18] = 14;
    s[19] = 20;
    s[20] =  5;
    s[21] =  9;
    s[22] = 14;
    s[23] = 20;
    s[24] =  5;
    s[25] =  9;
    s[26] = 14;
    s[27] = 20;
    s[28] =  5;
    s[29] =  9;
    s[30] = 14;
    s[31] = 20;
    s[32] = 4;
    s[33] = 11;
    s[34] = 16;
    s[35] = 23;
    s[36] =  4;
    s[37] = 11;
    s[38] = 16;
    s[39] = 23;
    s[40] =  4;
    s[41] = 11;
    s[42] = 16;
    s[43] = 23;
    s[44] =  4;
    s[45] = 11;
    s[46] = 16;
    s[47] = 23;
    s[48] = 6;
    s[49] = 10;
    s[50] = 15;
    s[51] = 21;
    s[52] =  6;
    s[53] = 10;
    s[54] = 15;
    s[55] = 21;
    s[56] =  6;
    s[57] = 10;
    s[58] = 15;
    s[59] = 21;
    s[60] =  6;
    s[61] = 10;
    s[62] = 15;
    s[63] = 21;

    K[0] = 0xd76aa478;
    K[1] = 0xe8c7b756;
    K[2] = 0x242070db;
    K[3] = 0xc1bdceee;
    K[4] = 0xf57c0faf;
    K[5] = 0x4787c62a;
    K[6] = 0xa8304613;
    K[7] = 0xfd469501;
    K[8] = 0x698098d8;
    K[9] = 0x8b44f7af;
    K[10] = 0xffff5bb1;
    K[11] = 0x895cd7be;
    K[12] = 0x6b901122;
    K[13] = 0xfd987193;
    K[14] = 0xa679438e;
    K[15] = 0x49b40821;
    K[16] = 0xf61e2562;
    K[17] = 0xc040b340;
    K[18] = 0x265e5a51;
    K[19] = 0xe9b6c7aa;
    K[20] = 0xd62f105d;
    K[21] = 0x02441453;
    K[22] = 0xd8a1e681;
    K[23] = 0xe7d3fbc8;
    K[24] = 0x21e1cde6;
    K[25] = 0xc33707d6;
    K[26] = 0xf4d50d87;
    K[27] = 0x455a14ed;
    K[28] = 0xa9e3e905;
    K[29] = 0xfcefa3f8;
    K[30] = 0x676f02d9;
    K[31] = 0x8d2a4c8a;
    K[32] = 0xfffa3942;
    K[33] = 0x8771f681;
    K[34] = 0x6d9d6122;
    K[35] = 0xfde5380c;
    K[36] = 0xa4beea44;
    K[37] = 0x4bdecfa9;
    K[38] = 0xf6bb4b60;
    K[39] = 0xbebfbc70;
    K[40] = 0x289b7ec6;
    K[41] = 0xeaa127fa;
    K[42] = 0xd4ef3085;
    K[43] = 0x04881d05;
    K[44] = 0xd9d4d039;
    K[45] = 0xe6db99e5;
    K[46] = 0x1fa27cf8;
    K[47] = 0xc4ac5665;
    K[48] = 0xf4292244;
    K[49] = 0x432aff97;
    K[50] = 0xab9423a7;
    K[51] = 0xfc93a039;
    K[52] = 0x655b59c3;
    K[53] = 0x8f0ccc92;
    K[54] = 0xffeff47d;
    K[55] = 0x85845dd1;
    K[56] = 0x6fa87e4f;
    K[57] = 0xfe2ce6e0;
    K[58] = 0xa3014314;
    K[59] = 0x4e0811a1;
    K[50] = 0xf7537e82;
    K[61] = 0xbd3af235;
    K[62] = 0x2ad7d2bb;
    K[63] = 0xeb86d391;

    int a0 = 0x67452301;
    int b0 = 0xefcdab89;
    int c0 = 0x98badcfe;
    int d0 = 0x10325476;

    int originalLength = inputBytes.Size();

    inputBytes.Add(128);

    while (inputBytes.Count % 64 != 60) {
        inputBytes.Add(0);
    }

    inputBytes.Add((originalLength >> 24) & 255);
    inputBytes.Add((originalLength >> 16) & 255);
    inputBytes.Add((originalLength >> 8) & 255);
    inputBytes.Add(originalLength & 255);

    Array<int> M = new Array<int>(16);

    int mask32 = 0xffffffff;
    int F = 0;
    int g = 0;
    int t = 0;
    int rotAmt = 0;
    for (int chunkIndex = 0; chunkIndex < inputBytes.Size(); chunkIndex += 64) {

        for (int j = 0; j < 16; ++j) {
            t = chunkIndex + j * 4;
            M[j] = inputBytes[t] << 24;
            M[j] += inputBytes[t + 1] << 16;
            M[j] += inputBytes[t + 2] << 8;
            M[j] += inputBytes[t + 3];
        }

        int A = a0;
        int B = b0;
        int C = c0;
        int D = d0;
        for (int i = 0; i < 64; ++i) {
            if (i < 16) {
                F = Core.ForceParens(B & C) | Core.ForceParens(Core.ForceParens(~B) & D);
                g = i;
            } else if (i < 32) {
                F = Core.ForceParens(D & B) | Core.ForceParens(Core.ForceParens(~D) & C);
                g = Core.ForceParens(5 * i + 1) & 15;
            } else if (i < 48) {
                F = B ^ C ^ D;
                g = Core.ForceParens(3 * i + 5) & 15;
            } else {
                F = C ^ Core.ForceParens(B | Core.ForceParens(~D));
                g = Core.ForceParens(7 * i) & 15;
            }
            F = Core.ForceParens(F + A + K[i] + M[g]) & mask32;
            A = D;
            D = C;
            C = B;

            rotAmt = s[i];
            B = Core.ForceParens(B << rotAmt) | Core.ForceParens(B >> Core.ForceParens(32 - rotAmt));
        }
        a0 = Core.ForceParens(a0 + A) & mask32;
        b0 = Core.ForceParens(b0 + B) & mask32;
        c0 = Core.ForceParens(c0 + C) & mask32;
        d0 = Core.ForceParens(d0 + D) & mask32;
    }

    Array<int> output = new Array<int>(16);
    output[0] = (a0 >> 24) & 255;
    output[1] = (a0 >> 16) & 255;
    output[2] = (a0 >> 8) & 255;
    output[3] = a0 & 255;
    output[4] = (b0 >> 24) & 255;
    output[5] = (b0 >> 16) & 255;
    output[6] = (b0 >> 8) & 255;
    output[7] = b0 & 255;
    output[8] = (c0 >> 24) & 255;
    output[9] = (c0 >> 16) & 255;
    output[10] = (c0 >> 8) & 255;
    output[11] = c0 & 255;
    output[12] = (d0 >> 24) & 255;
    output[13] = (d0 >> 16) & 255;
    output[14] = (d0 >> 8) & 255;
    output[15] = d0 & 255;
    return output;
}
