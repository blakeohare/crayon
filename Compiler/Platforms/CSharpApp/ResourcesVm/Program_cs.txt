using System;
using System.Collections.Generic;
using System.Linq;
using Interpreter;
using Interpreter.Vm;

namespace CrayonRuntime
{
    internal class Program
    {
        private static readonly HashSet<string> COMPATIBLE_VERSIONS = new HashSet<string>() {
            "2.1.1",
        };

        public static void Main(string[] args)
        {
            try
            {
                Run(args);
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.Message);
                if (e.InnerException != null)
                {
                    Console.Error.WriteLine("Cause:");
                    Console.Error.WriteLine(e.InnerException.Message);
                }
            }
        }

        private static void Run(string[] args)
        {
            if (args.Length < 2) throw new Exception("Incorrect number of args. Requires path to a cbx file and parent process ID.");

            List<string> argsList = new List<string>(args);
            string cbxPath = argsList[0];
            Dictionary<string, string> vmArgs = new Dictionary<string, string>();
            for (int i = 1; i < args.Length; ++i)
            {
                string[] t = args[i].Split(':');
                string key = t[0];
                string value = t.Length > 1 ? t[1] : "";
                for (int j = 2; j < t.Length; ++j)
                {
                    value += ":" + t[j];
                }
                vmArgs[key] = value.Trim();
            }

            bool usePrefixes = vmArgs.ContainsKey("showOutputPrefixes") && vmArgs["showOutputPrefixes"] == "yes";
            bool showLibStack = vmArgs.ContainsKey("showLibStack") && vmArgs["showLibStack"] == "yes";
            int parentProcessId = 0;

            if (!vmArgs.ContainsKey("parentProcessId") || !int.TryParse(vmArgs["parentProcessId"], out parentProcessId))
            {
                throw new Exception("Invalid or missing parent process ID.");
            }

            string[] runtimeArgs = new string[0];
            if (vmArgs.ContainsKey("runtimeargs"))
            {
                string[] runtimeArgData = vmArgs["runtimeargs"].Split(':');
                if (runtimeArgData[0] != "0")
                {
                    runtimeArgs = runtimeArgData[1]
                        .Split(',')
                        .Select(s => Base64Decode(s))
                        .ToArray();
                }
            }

            if (!cbxPath.ToLower().EndsWith(".cbx")) throw new Exception("File must be a CBX file.");
            if (!System.IO.File.Exists(cbxPath)) throw new Exception("Given CBX file does not exist.");

            if (parentProcessId > 0)
            {
                // Start a thread that checks for the parent process. If the parent process disappears, then
                // the program should terminate.
                System.Threading.Thread thread = new System.Threading.Thread(ParentChecker);
                thread.IsBackground = true;
                thread.Start(parentProcessId);
            }

            byte[] cbxData = System.IO.File.ReadAllBytes(cbxPath);

            CbxDecoder cbxDecoder = new CbxDecoder(cbxData);
            if (!COMPATIBLE_VERSIONS.Contains(cbxDecoder.CbxVersion))
                throw new Exception("CBX file was compiled with an incompatible version of Crayon than the current runtime.");

            string byteCode = cbxDecoder.ByteCode;
            if (byteCode == null) throw new Exception("CBX file did not contain byte code.");

            TranslationHelper.LibraryRegistry = new LibraryRegistry(cbxDecoder.LibraryVersionsByName);
            TranslationHelper.ImageSheetManifest = cbxDecoder.ImageSheetManifest;
            Interpreter.ResourceReader.CbxDirectory = System.IO.Path.GetDirectoryName(cbxPath);
            Interpreter.Structs.VmContext vm = CrayonWrapper.createVm(byteCode, cbxDecoder.ResourceManifest);
            CrayonWrapper.vmEnvSetCommandLineArgs(vm, runtimeArgs);
            vm.environment.stdoutPrefix = usePrefixes ? "STDOUT" : null;
            vm.environment.stacktracePrefix = usePrefixes ? "STACKTRACE" : null;
            vm.environment.showLibStack = showLibStack;
            Debugger.INSTANCE.StartListening();
            TranslationHelper.ProgramData = vm;
            TranslationHelper.StartInterpreter();
        }

        private static string Base64Decode(string encodedValue)
        {
            byte[] utf8Bytes = System.Convert.FromBase64String(encodedValue);
            return System.Text.Encoding.UTF8.GetString(utf8Bytes);
        }

        // TODO: Surely there is a better way. But for now...
        private static void ParentChecker(object pid)
        {
            System.Diagnostics.Process parentProcess = System.Diagnostics.Process.GetProcessById((int)pid);
            while (true)
            {
                if (parentProcess == null || parentProcess.HasExited)
                {
                    System.Diagnostics.Process.GetCurrentProcess().Kill();
                    return; // not strictly necessary but prevents an infinite loop compiler warning.
                }
                System.Threading.Thread.Sleep(50);
            }
        }
    }
}
