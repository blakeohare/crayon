/*
    args[0] -> Frame object
    args[1] -> window title
    args[2] -> window width
    args[3] -> window height
    args[4] -> List of UI commands
    args[5] -> Execution Context ID for resume
*/
VM.Value lib_nori_showFrame(VM.VmContext vm, Array<VM.Value> args) {
    VM.ObjectInstance frameObj = (VM.ObjectInstance)args[0].internalValue;
    string title = (string) args[1].internalValue;
    int width = (int) args[2].internalValue;
    int height = (int) args[3].internalValue;
    string data = (string) args[4].internalValue; // lib_nori_encodeListToWireFormat(args[4]);
    int execId = (int) args[5].internalValue;
    frameObj.nativeData = new Array<object>(1);
    frameObj.nativeData[0] = Extension._lib_nori_showFrame(args[0], title, width, height, data, execId);
    return vm.globalNull;
}

/*
    Invokes the eventWatcher and suspends the current context.
    The event watcher itself will resume the execution context when the window is closed.

    If it is the last frame to close, the suspended flag will be reverted from within the native call.
    If it is not, the event watcher will invoke the VM itself from within the previously running instance
    and the native invocation won't block.

    args[0] -> Frame object
    args[1] -> execution context ID to resume once the window is no longer shown
    args[2] -> function pointer of event handler
    args[3] -> function pointer of the callback to invoke after showing the window
*/
VM.Value lib_nori_runEventWatcher(VM.VmContext vm, Array<VM.Value> args) {
    VM.ObjectInstance frameObj = (VM.ObjectInstance)args[0].internalValue;
    int execContextIdForResume = (int) args[1].internalValue;
    VM.Value eventCallback = args[2];
    VM.Value postShowCallback = args[3];
    VM.ExecutionContext ec = VM.getExecutionContext(vm, execContextIdForResume);
    VM.vm_suspend_for_context(ec, 1);
    Extension._lib_nori_runEventWatcher(vm, execContextIdForResume, args[0], eventCallback, postShowCallback);
    return vm.globalNull;
}
