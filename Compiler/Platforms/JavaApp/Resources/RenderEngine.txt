package org.crayonlang.interpreter;

import java.awt.geom.AffineTransform;
import java.awt.AlphaComposite;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Graphics2D;
import java.util.ArrayList;

public final class RenderEngine {

	private static int[] renderEvents = new int[0];
	private static int renderEventsLength = 0;
	private static Object[] renderImages = new Object[0];
	private static ArrayList<Integer> textChars = null;

    private static AlphaComposite[] alphaComposite = new AlphaComposite[256];

    private RenderEngine() { }

	public static void setRenderQueues(int[] renderEvents, int renderEventsLength, Object[] images, ArrayList<Integer> textChars) {
		RenderEngine.renderEvents = renderEvents;
		RenderEngine.renderEventsLength = renderEventsLength;
		RenderEngine.renderImages = images;
		RenderEngine.textChars = textChars;
	}
	
    public static void render(Graphics2D g, int canvasWidth, int canvasHeight) {

        if (alphaComposite[0] == null) {
            for (int i = 0; i < 256; ++i) {
                alphaComposite[i] = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, i / 255f);
            }
        }

        int x, y, sx, sy, width, height, sw, sh, tw, th, red, green, blue, alpha, j;
		int mask, fontId;
        int[] xs = new int[4];
        int[] ys = new int[4];
        double angle, fontSize;
		boolean isBold, isItalic;
        java.awt.image.BufferedImage image;
		java.awt.Font font;
		AffineTransform at;
		int[] events = RenderEngine.renderEvents;
		int length = RenderEngine.renderEventsLength;
		Object[] images = RenderEngine.renderImages;
		Object[] textureNativeData;
		Object[] textureResourceNativeData;
		ArrayList<Integer> textCharacters = RenderEngine.textChars;
		int imagesIndex = 0;
		int textCharIndex = 0;
		String s;
		
        g.setColor(new Color(0, 0, 0, 255));
        g.fillRect(0, 0, canvasWidth, canvasHeight);

        for (int i = 0; i < renderEventsLength; i += 16) {
            switch (events[i]) {
				case 1: // rectangle
					x = events[i | 1];
					y = events[i | 2];
					width = events[i | 3];
					height = events[i | 4];
					red = events[i | 5];
					green = events[i | 6];
					blue = events[i | 7];
					alpha = events[i | 8];
                    // TODO: need a really fast caching mechanism for colors so I don't always rapidly alloc this
                    g.setColor(new Color(red, green, blue, alpha));
                    g.fillRect(x, y, width, height);
					break;

				case 2: // ellipse
					x = events[i | 1];
					y = events[i | 2];
					width = events[i | 3];
					height = events[i | 4];
					red = events[i | 5];
					green = events[i | 6];
					blue = events[i | 7];
					alpha = events[i | 8];
                    g.setColor(new Color(red, green, blue, alpha));
                    g.fillOval(x, y, width, height);
					break;

				case 3: // line
                    sx = events[i | 1];
                    sy = events[i | 2];
                    x = events[i | 3];
                    y = events[i | 4];
                    width = events[i | 5];
                    red = events[i | 6];
                    green = events[i | 7];
                    blue = events[i | 8];
                    alpha = events[i | 9];
					if (alpha > 0) {
						g.setColor(new Color(red, green, blue, alpha));
						g.setStroke(new java.awt.BasicStroke(width));
						g.drawLine(x, y, sx, sy);
					}
					break;

				case 4: // triangle
                    xs[0] = events[i | 1];
                    ys[0] = events[i | 2];
                    xs[1] = events[i | 3];
                    ys[1] = events[i | 4];
                    xs[2] = events[i | 5];
                    ys[2] = events[i | 6];
                    red = events[i | 7];
                    green = events[i | 8];
                    blue = events[i | 9];
                    alpha = events[i | 10];
                    g.setColor(new Color(red, green, blue, alpha));
                    g.fillPolygon(xs, ys, 3);
					break;

				case 5: // quad
                    xs[0] = events[i | 1];
                    ys[0] = events[i | 2];
                    xs[1] = events[i | 3];
                    ys[1] = events[i | 4];
                    xs[2] = events[i | 5];
                    ys[2] = events[i | 6];
                    xs[3] = events[i | 7];
                    ys[3] = events[i | 8];
                    red = events[i | 9];
                    green = events[i | 10];
                    blue = events[i | 11];
                    alpha = events[i | 12];
                    g.setColor(new Color(red, green, blue, alpha));
                    g.fillPolygon(xs, ys, 4);
					break;

				case 6: // image
					mask = events[i | 1];
					x = events[i | 8];
					y = events[i | 9];

					textureNativeData = (Object[]) images[imagesIndex++];
					textureResourceNativeData = (Object[]) textureNativeData[0];
					image = (BufferedImage) textureResourceNativeData[3];
					
					if (mask == 0) {
						g.drawImage(image, x, y, null);
					} else {
						
						if ((mask & 1) != 0) {
							sx = events[i | 2];
							sy = events[i | 3];
							sw = events[i | 4];
							sh = events[i | 5];
						} else {
							sx = 0;
							sy = 0;
							sw = image.getWidth();
							sh = image.getHeight();
						}

						if ((mask & 2) != 0) {
							tw = events[i | 6];
							th = events[i | 7];
						} else {
							tw = sw;
							th = sh;
						}

						if ((mask & 8) != 0) {
							alpha = events[i | 11];
						} else {
							alpha = 255;
						}

						if ((mask & 4) != 0) {
							angle = events[i | 10] / 1048576.0;
							at = new AffineTransform();
							at.translate(x - tw / 2, y - th / 2);
							at.translate(tw / 2, th/ 2);
							at.rotate(angle);
							at.translate(tw / -2, th / -2);
							
							if (alpha == 255) {
								g.drawImage(image, at, null);
							} else {
								g.setComposite(alphaComposite[alpha]);
								g.drawImage(image, at, null);
								g.setComposite(alphaComposite[255]);
							}
						} else {
							if (alpha == 255) {
								g.drawImage(image, x, y, x + tw, y + th, sx, sy, sx + sw, sy + sh, null);
							} else {
								g.setComposite(alphaComposite[alpha]);
								g.drawImage(image, x, y, x + tw, y + th, sx, sy, sx + sw, sy + sh, null);
								g.setComposite(alphaComposite[255]);
							}
						}
					}
					break;

				case 7: // text
					x = events[i | 1];
					y = events[i | 2];
					fontId = events[i | 3];
					fontSize = events[i | 4] / 1024.0;
					isBold = events[i | 5] == 1;
					isItalic = events[i | 6] == 1;
					font = AwtTranslationHelper.getFont(fontId, fontSize, isBold, isItalic);
					red = events[i | 7];
					green = events[i | 8];
					blue = events[i | 9];
					alpha = events[i | 10];
					// TODO: kerning @ events[i | 11]
					// TODO: line height @ events[i | 12]
					length = events[i | 13];
					s = "";
					for (j = 0; j < length; ++j) {
						s = s + Character.toString((char) (int) textCharacters.get(textCharIndex++));
					}
					
                    g.setColor(new Color(red, green, blue, alpha));
					g.setFont(font);
					g.drawString(s, x, y);
					break;
            }
        }
    }
}
