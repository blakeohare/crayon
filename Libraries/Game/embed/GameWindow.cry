import Math;

@localized('en', 'Game')
@localized('es', 'Juego')
namespace Game {

    @localized('en', 'GameWindow')
    @localized('es', 'JuegoVentana')
    class GameWindow {

        static field instance;

        field _w;
        field _h;

        static field _reusable_list = [];

        // These are static and not associated with the actual GameWindow instance.
        // That means static initializers (such as the GamePad event pump) can register events without the
        // window being open yet. Also, becuase they are static, they can be guarded against unauthorized
        // access from user code (TODO: make that last statement true by adding the library access annotation)
        static field _eventPumpHandlers = [];
        static field _frameBeginHandlers = [];
        static field _frameEndHandlers = [];

        field fps;

        constructor(title, fps, width, height, screenWidth = null, screenHeight = null) {
            Core.assert(Core.isString(title), "Title must be a string.");
            t = " must be a number.";
            w = "width";
            h = "height";
            Core.assert(Core.isNumber(fps), "FPS" + t);
            Core.assert(Core.isNumber(width), "width" + t);
            Core.assert(Core.isNumber(height), "height" + t);
            Core.assert(screenWidth == null || Core.isNumber(screenWidth), "screen " + w + t);
            Core.assert(screenHeight == null || Core.isNumber(screenHeight), "screen " + h + t);

            Core.assert(GameWindow.instance == null, "Cannot create multiple GameWindows.");
            GameWindow.instance = this;

            this.fps = fps;

            screenWidth = screenWidth ?? width;
            screenHeight = screenHeight ?? height;

            width = Math.floor(width);
            height = Math.floor(height);
            screenWidth = Math.floor(screenWidth);
            screenHeight = Math.floor(screenHeight);

            this._w = width;
            this._h = height;

            t = " must be positive.";
            Core.assert(width > 0, w + t);
            Core.assert(height > 0, h + t);
            Core.assert(screenWidth > 0, "screen " + w + t);
            Core.assert(screenHeight > 0, "screen " + h + t);
            Core.assert(fps > 0, "FPS" + t);

            $$lib_game_initialize(fps);
            $$lib_game_initialize_screen(width, height, screenWidth, screenHeight);
            $$lib_game_set_title(title);
        }

        // returns a list [isAspectRatioForced, screenWidth, screenHeight]
        // can be called before game is created
        // may possibly return 0 x 0 for the screen size if the underlying API can't tell
        // will never return [true, 0, 0]
        static function getScreenInfo() {
            return $$lib_game_getScreenInfo([false, 0, 0]);
        }

        function clockTick() {
            for (t : Game.GameWindow._frameEndHandlers) {
                t();
            }

            $$lib_game_clock_tick();

            for (t : Game.GameWindow._frameBeginHandlers) {
                t();
            }
        }

        function pumpEvents() {
            output = [];
            t = $$lib_game_pump_events(GameWindow._reusable_list);
            len = t.length;
            i = 0;
            while (i < len) {
                switch (t[i++]) {
                    // for all mouse events: t[1] -> x, t[2] -> y
                    case EventType.MOUSE_MOVE: e = new MouseMoveEvent(t[i++], t[i++]); break;
                    case EventType.MOUSE_LEFT_DOWN: e = new MouseClickEvent(t[i - 1], EventButton.LEFT, true, t[i++], t[i++]); break;
                    case EventType.MOUSE_LEFT_UP: e = new MouseClickEvent(t[i - 1], EventButton.LEFT, false, t[i++], t[i++]); break;
                    case EventType.MOUSE_RIGHT_DOWN: e = new MouseClickEvent(t[i - 1], EventButton.RIGHT, true, t[i++], t[i++]); break;
                    case EventType.MOUSE_RIGHT_UP: e = new MouseClickEvent(t[i - 1], EventButton.RIGHT, false, t[i++], t[i++]); break;

                    // for mouse scroll events: t[3] -> scroll amount
                    case EventType.MOUSE_SCROLL: e = new MouseScrollEvent(t[i++], t[i++], t[i++]); break;

                    // for key events: t[1] -> key code (see enum)
                    case EventType.KEY_DOWN: e = new KeyEvent(t[i++], true); break;
                    case EventType.KEY_UP: e = new KeyEvent(t[i++], false); break;

                    // for quit events: t[1] -> quit subtype
                    case EventType.QUIT: e = new QuitEvent(t[i++]); break;

                    default: assert(false); break;
                }

                output.add(e);
            }

            // Things like gamepad events are added here
            if (GameWindow._eventPumpHandlers.length > 0) {
                for (t : GameWindow._eventPumpHandlers) {
                    t(output);
                }
            }

            return output;
        }

        function setTitle(title) {
            title += '';
            if (title.length == 0) throw new Core.InvalidArgumentException("Title cannot be empty.");
            return $$lib_game_set_title(title);
        }
    }
}
