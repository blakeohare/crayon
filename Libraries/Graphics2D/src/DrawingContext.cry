import Images;
import Graphics2DText;

namespace Graphics2D {

    const INVALID_COLOR_ERR = "Color values must be integers from 0 to 255.";

    function createGraphicsContext(canvas) {
        return new DrawingContext(canvas, DrawingContext.UNDOCUMENTED_DO_NOT_USE);
    }

    class DrawingContext {

        field _canvas;
        field u3window = null; // lazily initialized when flushing the buffer.
        field _buffer = [];
        field _imageDataBuffer = [];
        field _bufferContainsFlush = false;
        field _transferredImageVersionKeys = {};

        static field UNDOCUMENTED_DO_NOT_USE = new Object();

        constructor(canvas, hack) {
            this._canvas = canvas;
            if (hack != DrawingContext.UNDOCUMENTED_DO_NOT_USE) throw new Exception();
        }

        field _colR = 0;
        field _colG = 0;
        field _colB = 0;
        field _colA = 0;

        function _verifyColor(rOrColor, g, b, a) {
            if (rOrColor is Color) {
                c = rOrColor._c;
                this._colR = c[0];
                this._colG = c[1];
                this._colB = c[2];
                this._colA = c[3];
            } else {
                this._colR = rOrColor;
                this._colG = g;
                this._colB = b;
                this._colA = a;
            }
            $$$('argVerifyIntRange', INVALID_COLOR_ERR, 0, 255, this._colR, this._colG, this._colB, this._colA, 4);
        }

        function fill(rOrColor, g, b) {
            this._verifyColor(rOrColor, g, b, 255);
            this._buffer.clear();
            this._buffer.add('F', this._colR, this._colG, this._colB);
            this._bufferContainsFlush = true;
            return this;
        }

        function rectangle(x, y, w, h, rOrColor, g = null, b = null, a = 255) {
            this._verifyColor(rOrColor, g, b, a);
            $$$('argVerifyNums', "Rectangle coordinates must be numbers.", x, y, w, h, 4);
            this._buffer.add('R', this._colR, this._colG, this._colB, this._colA, x, y, w, h);
            return this;
        }

        function ellipse(x, y, w, h, rOrColor, g = null, b = null, a = 255) {
            this._verifyColor(rOrColor, g, b, a);
            $$$('argVerifyNums', "Ellipse coordinates must be numbers.", x, y, w, h, 4);
            this._buffer.add('E', this._colR, this._colG, this._colB, this._colA, x, y, w, h);
            return this;
        }

        function line(x1, y1, x2, y2, w, rOrColor, g = null, b = null, a = 255) {
            this._verifyColor(rOrColor, g, b, a);
            $$$('argVerifyNums', "Line coordinates must be numbers.", x1, y1, x2, y2, 4);
            $$$('argVerifyNums', "Line width must be a number.", w, 1);
            this._buffer.add('L', this._colR, this._colG, this._colB, this._colA, x1, y1, x2, y2, w);
            return this;
        }

        function drawImage(image, x, y) {
            if (!(image is Images.Bitmap)) this._notAnImage();
            $$$('argVerifyNums', "Coordinates must be numbers.", x, y, 2);
            if (this._transferredImageVersionKeys.get(image._versionKey) == null) {
                this._submitImageData(image);
            }
            this._buffer.add('I1', 0, 0, 0, image._versionKey, x, y);
            return this;
        }

        function drawImageRegion(image, targetX, targetY, sourceX, sourceY, sourceWidth, sourceHeight) {
            if (!(image is Images.Bitmap)) this._notAnImage();
            $$$('argVerifyNums', "Coordinates must be numbers.", targetX, targetY, sourceX, sourceY, sourceWidth, sourceHeight, 6);
            if (this._transferredImageVersionKeys.get(image._versionKey) == null) {
                this._submitImageData(image);
            }
            this._buffer.add('I2', 0, 0, 0, image._versionKey, targetX, targetY, sourceX, sourceY, sourceWidth, sourceHeight);
            return this;
        }

        function drawImageAdvanced(image, targetX, targetY, targetWidth, targetHeight, sourceX, sourceY, sourceWidth, sourceHeight, alpha = 255, rotation = 0) {
            if (!(image is Images.Bitmap)) this._notAnImage();
            $$$('argVerifyNums', "Arguments must be numbers.", targetX, targetY, targetWidth, targetHeight, sourceX, sourceY, sourceWidth, sourceHeight, alpha, rotation, 10);
            if (this._transferredImageVersionKeys.get(image._versionKey) == null) {
                this._submitImageData(image);
            }
            this._buffer.add('IA', 0, 0, 0, image._versionKey, targetX, targetY, targetWidth, targetHeight, sourceX, sourceY, sourceWidth, sourceHeight, alpha, rotation);
            return this;
        }

        function drawImageRotated(image, centerX, centerY, angle) {
            if (!(image is Images.Bitmap)) this._notAnImage();
            $$$('argVerifyNums', "Arguments must be numbers.", centerX, centerY, angle, 3);
            if (this._transferredImageVersionKeys.get(image._versionKey) == null) {
                this._submitImageData(image);
            }
            this._buffer.add('I3', 0, 0, 0, image._versionKey, centerX, centerY, angle);
            return this;
        }

        function drawText(text, x, y) {
            if (!(text is TextRun)) throw new InvalidArgumentException("First argument must be a Graphics2DText.TextRun instance.");
            $$$('argVerifyNums', "x and y must be numbers.", x, y, 2);
            this._buffer.add('TX', 0, 0, 0, text._serializeToInstructions(), x, y);
            return this;
        }

        function _submitImageData(image) {
            this._imageDataBuffer.add('ImgData', 0, 0, 0, image._versionKey, image._resourceId, image.toBase64(Images.ImageFormat.PNG));
            this._transferredImageVersionKeys[image._versionKey] = true;
            // TODO: track old image data and send message to purge it
        }

        function _notAnImage() { throw new InvalidArgumentException("First argument must be an Image.Bitmap instance."); }

        // TODO: move this into an internals helper class
        function _getU3Window() {
            if (this._canvas == null) return null;
            f = this._canvas._frame;
            if (f == null) return null;
            // TODO: also check if the window is open. If not, return null.
            return f._u3window;
        }

        function flush(isGame = false) {
            win = this._getU3Window();

            if (win == null) {
                resetBackBuffer = this._bufferContainsFlush; // as opposed to appending to it.
                this._canvas._modifyBackBuffer(this._buffer, this._bufferContainsFlush);

                // TODO: copy the data to a back buffer which gets copied to the Nori Canvas instance.
                // If the back buffer has information in it and the Canvas gets added to the UI tree, it gets flushed at that time.
                throw new NotImplementedException("Cannot flush drawing context buffer if the canvas isn't in an open window. This is not a design decision, just a current gap in the implementation.");
            } else {
                buffer = this._buffer;
                if (this._imageDataBuffer.length > 0) {
                    buffer = this._imageDataBuffer + buffer;
                    this._imageDataBuffer.clear();
                }
                id = this._canvas._id;
                if (isGame) {
                    win.sendGameData(id, buffer);
                } else {
                    win.sendCanvasData(id, buffer);
                }
            }
            this._buffer.clear();

            return this;
        }
    }
}
