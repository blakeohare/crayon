namespace Math {

    const PI = 3.141592653589793238462;
    const E = 2.718281828459045235360;

    function arccos(ratio) {
        // range is checked in translated code.
        return $$$('arcCos', ratio);
    }

    function arcsin(ratio) {
        // range is checked in translated code.
        return $$$('arcSin', ratio);
    }

    function arctan(ratio_or_y, x = 1) {
        return $$$('arcTan', ratio_or_y, x);
    }

    function cos(theta) {
        return $$$('cos', theta);
    }

    function floor(value) {
        return $$$('floor', value);
    }

    function sin(theta) {
        return $$$('sin', theta);
    }

    function tan(theta) {
        return $$$('tan', theta);
    }

    // All logarithms are just implemented with natural log and divided by a constant value to change base.
    // An attempt is made to prevent floating point arithmetic from giving bogus values like log10(1000000) -> 5.999999...
    // (see fixFuzzyFloatPrecision in ValueUtil.cry)
    function log10(value) {
        return $$$('ln', value, 1 / 2.302585092994046);
    }
    function ln(value) {
        return $$$('ln', value, 1.0);
    }
    function log2(value) {
        return $$$('ln', value, 1 / 0.6931471805599453);
    }

    // Despite the fact that the following functions are relatively simple and could be implemented in
    // non-translated code, they are relatively common and the native code should be inlined if possible.
    function abs(value) {
        return $$$('abs', value);
    }

    function max(a, b) {
        return $$$('max', a, b);
    }

    function min(a, b) {
        return $$$('min', a, b);
    }

    function ensureRange(value, minBound, maxBound) {
        return $$$('ensureRange', value, minBound, maxBound);
    }

    function sign(num) {
        return $$$('sign', num);
    }
}
