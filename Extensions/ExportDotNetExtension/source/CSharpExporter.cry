import CrayonExporter;

class CSharpExporter {

    field buildData;
    field resDb;
    field properties;
    field cbxBundle;
    field templates;
    field guidSeed;

    constructor(buildData, args) {
        this.guidSeed = args.get('guidSeed') ?? buildData.getProjectId();
        this.buildData = buildData;
        this.cbxBundle = this.buildData.getCbxBundle();
        this.resDb = this.cbxBundle.getResourceDatabase();
        this.properties = this.buildData.getExportProperties();
        this.templates = new TemplateLoader();
    }

    function export() {
        files = {};
        this.doExport(files);
        FileData.writeToDisk(this.properties.getOutputDirectory(), files);
    }

    function doExport(files) {

        projectId = this.buildData.getProjectId();
        projectGuid = createGuid('HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH', 'project:' + this.guidSeed);
        solutionGuid = createGuid('HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH', 'solution:' + this.guidSeed);

        this.templates.addReplacement('PROJECT_ID', projectId);
        this.templates.addReplacement('TITLE', projectId);
        this.templates.addReplacement('PROJECT_GUID', projectGuid);
        this.templates.addReplacement('SOLUTION_GUID', solutionGuid);

        files[projectId + '/Resources/bytecode.txt'] = FileData.createTextFile(this.cbxBundle.getByteCode());
        files[projectId + '/Resources/manifest.txt'] = FileData.createTextFile(this.resDb.getManifestText() ?? '');
        files[projectId + '/Resources/imageManifest.txt'] = FileData.createTextFile(this.resDb.getImageManifestText() ?? '');

        //print("Here's the resource database...");
        //print(this.resDb._data);

        fileNames = this.resDb.getFileNames() ?? [];
        fileData = this.resDb.getFiles() ?? [];
        for (i = 0; i < fileData.length; i++) {
            file = fileData[i];
            name = fileNames[i]['res/'.length:]; // trim "res/"
            if (file.getType() == 'text') {
                emitFile = FileData.createTextFile(file.getTextContent());
            } else {
                emitFile = FileData.createBinaryFileFromB64(file.getBytesB64());
            }
            files[projectId + '/Resources/' + name] = emitFile;
        }

        files[projectId + '.sln'] = FileData.createTextFile(this.templates.getText('Solution_sln.txt'));
        files[projectId + '/' + projectId + '.csproj'] = FileData.createTextFile(this.templates.getText('ProjectFile_csproj.txt'));
        files[projectId + '/Wax.dll'] = FileData.createBinaryFileFromBytes(this.templates.getBinary('Wax.dll'));
        files[projectId + '/Runtime.dll'] = FileData.createBinaryFileFromBytes(this.templates.getBinary('Runtime.dll'));
        files[projectId + '/Program.cs'] = FileData.createTextFile(this.templates.getText('Program_cs.txt'));
        files[projectId + '/CbxUnpacker.cs'] = FileData.createTextFile(this.templates.getText('CbxUnpacker_cs.txt'));
    }
}
