enum OpCodes
{
    ADD_LITERAL, // 1: type, 2: value (0 or 1 for false/true or an integer. String values are in the string arg. Float values are as well, and are parsed.)
    ADD_NAME, // name is string arg. ID is the order in which this was encountered.
    ARG_TYPE_VERIFY, // see implementation code comment
    ASSIGN_CLOSURE, // 1: closure variable ID
    ASSIGN_INDEX, // 1: 0 or 1 for whether to push the assigned value back on the stack when done. value stack: [root, index, value]
    ASSIGN_LOCAL, // 1: local scope ID
    ASSIGN_STATIC_FIELD, // 1: class ID, 2: field ID
    ASSIGN_FIELD, // name ID of field. value stack: [root, value]
    ASSIGN_THIS_FIELD, // name ID of field. value stack: [value]
    BINARY_OP,
    BOOLEAN_NOT, // no args.
    BREAK, // 0: flag if this has been set, 1: PC offset to jump to (generally BREAK gets resolved into JUMP unless a finally block needs to run.)
    CALL_FUNCTION, // 1: type (see FunctionInvoationType enum), 2: num args passed, 3: function ID (if known), 4: output used, 5: class ID (if available)
    CAST,// see implementation code comment
    CLASS_DEFINITION, // It's complicated. See initializeClass method in MetadataInitializer.cry
    CNI_INVOKE,
    CNI_REGISTER,
    COMMAND_LINE_ARGS,
    CONTINUE, // 0: flag if this has been set, 1: PC offset to jump to (generally BREAK gets resolved into JUMP unless a finally block needs to run.)
    CORE_FUNCTION, // 1: function ID
    DEF_ORIGINAL_CODE, // 1: file ID, string arg: source code of that file with a preceding line for the file name.
    DEF_DICTIONARY, // 1: size
    DEF_LIST,
    DEREF_CLOSURE, // 1: var ID
    DEREF_DOT, // 1: field ID
    DEREF_INSTANCE_FIELD, // 1: member ID
    DEREF_STATIC_FIELD, // 1: class ID, 2: static member ID
    DUPLICATE_STACK_TOP, // 1: how many stack items should be duplicated?. get the top n of the stack, and just duplicate it
    EQUALS, // 1: 1 to reverse results
    ESF_LOOKUP, // [4n args, n = ESF token count] 4n+0: PC of try, 4n+1: PC of exception-sorter, 4n+2: PC of finally, 4n+3: value stack depth
    EXCEPTION_HANDLED_TOGGLE, // 1: boolean (0|1) indicating if the ExecutionContext's current exception should be marked as handled.
    FIELD_TYPE_INFO,
    FINALIZE_INITIALIZATION, // no ops. This indicates that builder data (e.g. List<Value> literalTableBuilder) should be converted into final static data (Value[] literalTable).
    FINALLY_END, // indicates the end of a finally block. Responsible for bubbling exceptions or returning from the function if appropriate 1: break JUMP offset, 2: continue JUMP offset, 3: 0|1 bool if break offset has been set, 4: 0|1 bool if continue offset has been set
    FUNCTION_DEFINITION, // 1: function ID, 2: function name ID (or 0 for constructors), 3: min args, 4: max args, 5: type (0 - function, 1 - method, 2 - static method, 3 - constructor, 4 - static constructor), 6: class ID (if applicable), 7: locals count, 8: Jump (skip function body)
    INDEX,
    IS_COMPARISON, // pops stack, checks if value is an instance of the given class, pushes a boolean. 1: class ID
    ITERATION_STEP, // stack is in the following state: [index, local scope ID, list]. If the index exceeds the length of the list, the loop stops and jumps over the body of the loop, which is arg 1.
    JUMP,
    JUMP_IF_EXCEPTION_OF_TYPE, // 1: offset to jump, 2+: list of class ID's
    JUMP_IF_FALSE,
    JUMP_IF_FALSE_NO_POP,
    JUMP_IF_TRUE,
    JUMP_IF_TRUE_NO_POP,
    LAMBDA,
    LIB_DECLARATION, // 1: library reference ID#, string: name of the library
    LIST_SLICE,
    LITERAL, // 1: literal ID in the literal table
    LITERAL_STREAM, // repeated version of the LITERAL op. Literals are listed in reverse order.
    LOCAL, // pushes a local value onto the stack. 1: local ID, 2: name ID
    LOC_TABLE, // 1: class ID, 2: member count n, [locale ID, n member name ID's] * k locales
    NEGATIVE_SIGN, // no args. pop, flip, push.
    POP, // no args. pop value from value stack.
    POP_IF_NULL_OR_JUMP, // if the last item on the value stack is null, pop it. If it isn't, then jump. 1: jump distance.
    PUSH_FUNC_REF, // push a verified function pointer to the stack, 1: function ID, 2: type, 3: class ID for static initialization check (or 0 if no check is necessary)
    RETURN,
    STACK_INSERTION_FOR_INCREMENT, // duplicates the top element of the stack but pushes it 3 spots back. [..., a, b, c] --> [..., c, a, b, c]
    STACK_SWAP_POP, // swaps the last 2 items on the stack and then pops the (new) last one.
    SWITCH_INT, // 1: integer switch ID, 2: offset for default case
    SWITCH_STRING, // 1: string switch ID, 2: offset for default case
    THIS, // pushes the current object context onto the stack.
    THROW, // throw an exception (exception is popped from the value stack)
    TOKEN_DATA, // 1: PC of where this token data applies (you must add the value of USER_CODE_START at runtime), 2: line, 3: col, 4: file ID
    USER_CODE_START, // 1: PC of where the user-compiled code begins. PC in token information will add this number.
    VERIFY_TYPE_IS_ITERABLE, // verifies the last item on the stack is a list
}

// Needs to be in sync with BinaryOps.cs
enum BinaryOps
{
    ADDITION = 0,
    SUBTRACTION = 1,
    MULTIPLICATION = 2,
    DIVISION = 3,
    MODULO = 4,
    EXPONENT = 5,
    BITWISE_AND = 6,
    BITWISE_OR = 7,
    BITWISE_XOR = 8,
    BIT_SHIFT_LEFT = 9,
    BIT_SHIFT_RIGHT = 10,
    LESS_THAN = 11,
    LESS_THAN_OR_EQUAL = 12,
    GREATER_THAN = 13,
    GREATER_THAN_OR_EQUAL = 14,
}

const int MAX_OP = BinaryOps.GREATER_THAN_OR_EQUAL + 1;

// Needs to be in sync with FunctionInvocationType.cs
enum FunctionInvocationType {
    NORMAL_FUNCTION = 1,
    STATIC_METHOD = 2,
    LOCAL_METHOD = 3,
    POINTER_PROVIDED = 4,
    FIELD_INVOCATION = 5,
    CONSTRUCTOR = 6,
    BASE_CONSTRUCTOR = 7,
    STATIC_CONSTRUCTOR = 8,
    PRIMITIVE_METHOD = 9,
    LAMBDA = 10,
}

enum FunctionPointerType {
    FUNCTION = 1,
    METHOD = 2,
    STATIC_METHOD = 3,
    PRIMITIVE_METHOD = 4,
    LAMBDA = 5,
}

enum Types {
    NULL = @ext_integer("TYPE_ID_NULL"),
    BOOLEAN = @ext_integer("TYPE_ID_BOOLEAN"),
    INTEGER = @ext_integer("TYPE_ID_INTEGER"),
    FLOAT = @ext_integer("TYPE_ID_FLOAT"),
    STRING = @ext_integer("TYPE_ID_STRING"),
    LIST = @ext_integer("TYPE_ID_LIST"),
    DICTIONARY = @ext_integer("TYPE_ID_DICTIONARY"),
    INSTANCE = @ext_integer("TYPE_ID_INSTANCE"),
    FUNCTION = @ext_integer("TYPE_ID_FUNCTION"),
    CLASS = @ext_integer("TYPE_ID_CLASS"),
}

const int MAX_TYPE = (Types.CLASS + 1);

enum InterpreterResultStatus {

    // Stop the harness. The VM has reached the end of the bytecode.
    FINISHED = 1,

    // stop execution and yield back to the harness. The harness assumes responsibility to resume
    // the VM. This is for things like game loop yields that yield back to the UI thread breifly
    // before invoking the VM again for the next frame. Notably used by GameWindow.clockTick().
    SUSPENDED = 2,

    // Stop the harness. Something terrible has happened.
    FATAL_ERROR = 3,

    // interpreter should immediately re-invoke itself instead of returning result. This is generally
    // done as a clean stop and re-start on a particular function such as the exception invoker in Core.
    // Additionally this may be used with a delay value in the InterpreterResult which can be used for
    // thread sleeps.
    // TODO: change this to 4 once VmResult is used instead of InterpreterResult.
    REINVOKE = 5,

    // The VM would like for the harness to load the given assembly and then re-invoke execution after
    // loading is complete.
    LOAD_ASSEMBLY = 6,
}

enum CoreExceptionTypes {
    // These absolutely must be in sync with Core/embed.cry's _LIB_CORE_ExType
    FATAL = 0,
    GENERIC_EXCEPTION = 1,
    ASSERTION_FAILED = 2,
    DIVISION_BY_ZERO = 3,
    INDEX_OUT_OF_RANGE = 4,
    INVALID_ARGUMENT = 5,
    INVALID_ASSIGNMENT = 6,
    INVALID_INVOCATION = 7,
    INVALID_KEY = 8,
    KEY_NOT_FOUND = 9,
    NULL_REFERENCE = 10,
    UNASSIGNED_VARIABLE = 11,
    UNKNOWN_FIELD = 12,
    UNSUPPORTED_OPERATION = 13,
}

enum InterruptType {
    EXCEPTION = 1,
    DEBUG_BREAKPOINT = 2, // TODO: one of these days...
    SLEEP = 3,
    LOAD_ASSEMBLY = 4,
}

const int INTEGER_POSITIVE_CACHE_SIZE = 2049;
const int INTEGER_NEGATIVE_CACHE_SIZE = 257;

enum PrimitiveMethodName {
    ADD,
    ARG_COUNT_MAX,
    ARG_COUNT_MIN,
    CHOICE,
    CLEAR,
    CLONE,
    CONCAT,
    CONTAINS,
    CREATE_INSTANCE,
    ENDS_WITH,
    FILTER,
    GET,
    GET_NAME,
    INDEX_OF,
    INSERT,
    INVOKE,
    IS_A,
    JOIN,
    KEYS,
    LOWER,
    LTRIM,
    MAP,
    MERGE,
    POP,
    REMOVE,
    REPLACE,
    REVERSE,
    RTRIM,
    SHUFFLE,
    SORT,
    SPLIT,
    STARTS_WITH,
    TRIM,
    UPPER,
    VALUES,
}

/*
    Once a finally block ends, what should the VM do?
    This is all of course superceded by the presence of an uncaught exception.
*/
enum PostFinallyBehavior {
    NOTHING = 0,
    BREAK = 1,
    CONTINUE = 2,
    RETURN = 3,
}
