import FileIO;
import Xml;

class Library {
	field name;
	field description;
	field namespaces = [];
}

class Namespace {
	field name;
	field constants = [];
	field enums = [];
	field functions = [];
	field classes = [];
}

class Function {
	field name;
	field description;
	field argNames = [];
	field argTypes = [];
	field argDescriptions = [];
	field returnDescription;
	field returnType;
}

class Enum {
	field name;
	field description;
	field valueNames = [];
	field valueDescriptions = [];
}

function getAllXml(docsRoot) {
	output = [];
	getAllXmlImpl(docsRoot, output);
	return output;
}

function getAllXmlImpl(path, output) {
	for (file : FileIO.directoryList(path)) {
		fullpath = path + '/' + file;
		if (FileIO.directoryExists(fullpath)) {
			getAllXmlImpl(fullpath, output);
		} else if (file.endsWith('.xml')) {
			output.add(fullpath);
		}
	}
}

function adaptXml(xmlRoot) {
	switch (xmlRoot.name) {
		case 'library':
			return adaptLibraryXml(xmlRoot);
		default:
			throw new Exception("Unknown root type: '" + xmlRoot.name + "'");
	}
}

function adaptLibraryXml(libraryElement) {
	lib = new Library();
	lib.name = libraryElement.attributes.get('name');
	lib.description = libraryElement.attributes.get('description');
	for (child : getAllXmlChildrenNodes(libraryElement)) {
		switch (child.name) {
			case 'description':
				lib.description = getTextContent(child);
				break;
			case 'name':
				lib.name = getTextContent(child);
				break;
			case 'namespace':
				lib.namespaces.add(adaptLibraryNamespaceXml(child));
				break;
			default:
				throw new Exception("Unknown child of library element: '" + child.name + "'");
		}
	}
	return lib;
}

function adaptLibraryNamespaceXml(nsElement) {
	ns = new Namespace();
	ns.name = nsElement.attributes.get('name');
	for (child : getAllXmlChildrenNodes(nsElement)) {
		switch (child.name) {
			case 'name':
				ns.name = getTextContent(child);
				break;
			case 'enum':
				ns.enums.add(adaptEnum(child));
				break;
			case 'function':
				ns.functions.add(adaptFunction(child));
				break;
			case 'class':
				ns.functions.add(adaptClass(child));
				break;
			case 'constant':
				ns.constants.add(adaptConstant(child));
				break;
			default:
				throw new Exception("Unknown child of namespace element: '" + child.name + "'");
		}
	}
	return ns;
}

function adaptEnum(enumElement) {
	en = new Enum();
	en.name = enumElement.attributes.get('name');
	en.description = enumElement.attributes.get('description');
	for (child : getAllXmlChildrenNodes(enumElement)) {
		switch (child.name) {
			case 'name':
				en.name = getTextContent(child);
				break;
			case 'description':
				en.description = getTextContent(child);
				break;
			case 'value':
				adaptEnumValue(child, en);
				break;
			default:
				throw new Exception("Unknown child of enum element: '" + child.name + "'");
		}
	}
	return en;
}

function adaptEnumValue(element, enumDef) {
	name = element.attributes.get('name');
	description = element.attributes.get('description');
	for (child : getAllXmlChildrenNodes(element)) {
		switch (child.name) {
			case 'name':
				name = getTextContent(child);
				break;
			case 'description':
				description = getTextContent(child);
				break;
			default:
				throw new Exception("Unknown child of enum's value element: '" + child.name + "'");
		}
	}
	enumDef.valueNames.add(name);
	enumDef.valueDescriptions.add(description);
}

function adaptFunction(element) {
	fn = new Function();
	fn.name = element.attributes.get('name');
	fn.description = element.attributes.get('description');
	for (child : getAllXmlChildrenNodes(element)) {
		switch (child.name) {
			case 'name':
				fn.name = getTextContent(child);
				break;
			case 'description':
				fn.description = getTextContent(child);
				break;
			case 'arg':
				fn.argNames.add(child.attributes.get('name'));
				fn.argTypes.add(child.attributes.get('type'));
				fn.argDescriptions.add(child.attributes.get('description'));
				break;
			case 'returns':
				fn.returnType = child.attributes.get('type');
				fn.returnDescription = child.attributes.get('description');
				break;
			default:
				throw new Exception("Unknown child of function element: '" + child.name + "'");
		}
	}
	return fn;
}

function adaptClass(element) {
	throw new Exception("Not implemented.");
}

function adaptConstant(element) {
	throw new Exception("Not implemented.");
}

function getTextContent(xmlNode) {
	text = [];
	for (child : xmlNode.children) {
		if (child.type == Xml.NodeType.TEXT) {
			text.add(child.value);
		} else {
			throw new Exception("TODO: text styling elements.");
		}
	}
	return text.join('');
}

// throws if there's a stray text node.
function getAllXmlChildrenNodes(node) {
	output = [];
	for (child : node.children) {
		if (child.type == Xml.NodeType.TEXT) {
			if (child.value.trim().length > 0) {
				throw new Exception("Unexpected text blob in '" + node.name + "' element.");
			}
		} else {
			output.add(child);
		}
	}
	return output;
}

function generateDocumentationHtml(docRoot) {
	output = [
		'<html>',
		'<head>',
		'<title>Documentation</title>',
		'</head>',
		'<body>'];

	if (docRoot is Library) {
		generateLibraryHtml(docRoot, output);
	} else {
		throw new Exception("Unrecognized doc root type.");
	}
	output.add('</body></html>');
	return output.join('');
}

function generateLibraryHtml(library, buffer) {
	buffer.add('<h1>' + htmlSpecialChars(library.name) + '</h1>');

	library.namespaces.sort(sortByNameKeyFunction);

	for (ns : getSortedList(library.namespaces)) {
		buffer.add('<h2>' + htmlSpecialChars(ns.name) + ' namespace</h2>');
		if (ns.constants.length > 0) {
			for (cnst : getSortedList(ns.constants)) {
				buffer.add('<h3>Constant: ' + htmlSpecialChars(cnst.name) + '</h3>');
			}
		}

		if (ns.enums.length > 0) {
			for (en : getSortedList(ns.enums)) {
				buffer.add('<h3>Enum: ' + htmlSpecialChars(en.name) + '</h3>');
			}
		}

		if (ns.functions.length > 0) {
			for (fn : getSortedList(ns.functions)) {
				buffer.add('<h3>Function: ' + htmlSpecialChars(fn.name) + '</h3>');
			}
		}
	}
}

function htmlSpecialChars(str) {
	return str.replace('&', '&amp;').replace('<', '&lt;');
}

function getSortedList(list) {
	list.sort(sortByNameKeyFunction);
	return list;
}

function sortByNameKeyFunction(thing) {
	return thing.name.lower();
}

function main() {
	docsRoot = FileIO.currentDirectory();
	docsRoot = '/Users/blakeohare/Crayon/Docs';
	xmlFiles = getAllXml(docsRoot);

	for (file : xmlFiles) {
		print(file);
		xml = FileIO.fileReadText(file);
		outputPath = file[:-'.xml'.length] + '.html';

		doc = Xml.parse(xml);
		docTree = adaptXml(doc);
		
		html = generateDocumentationHtml(docTree);

		FileIO.fileWriteText(outputPath, html);
	}
}
