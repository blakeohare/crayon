// arg 1: value
// arg 2: min
// arg 3: max
@import("inline/3_arg.pst");

bool1 = false; // type error flag.

if (arg2.type == Types.FLOAT) float2 = (double) arg2.internalValue;
else if (arg2.type == Types.INTEGER) float2 = 0.0 + (int) arg2.internalValue;
else bool1 = true;

if (arg3.type == Types.FLOAT) float3 = (double) arg3.internalValue;
else if (arg3.type == Types.INTEGER) float3 = 0.0 + (int) arg3.internalValue;
else bool1 = true;

if (!bool1 && float3 < float2) {
    // Min and max are swapped D:
    // It OK.
    // I fix 4 u.
    float1 = float3;
    float3 = float2;
    float2 = float1;
    value = arg2;
    arg2 = arg3;
    arg3 = value;
}

if (arg1.type == Types.FLOAT) float1 = (double) arg1.internalValue;
else if (arg1.type == Types.INTEGER) float1 = 0.0 + (int) arg1.internalValue;
else bool1 = true;

if (bool1) {
    hasInterrupt = EX_InvalidArgument(ec, "ensureRange requires numeric arguments.");
} else if (float1 < float2) {
    output = arg2;
} else if (float1 > float3) {
    output = arg3;
} else {
    output = arg1;
}
