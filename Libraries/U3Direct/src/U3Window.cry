import Base64;
import Environment;
import IconEncoder;
import MessageHub;
import ProcessUtil;
import Images;
import TextEncoding;

namespace U3Direct {

    enum WindowMode {
        GRAPHICS,
        UI,
    }

    class U3Window {
        field _hub;
        field _inputBuffer = [];
        field _overrideClose = null;
        field _gamepads = [];
        field _hubSendQueue = [];

        constructor(eventListener, onClose = null) {
            this._hub = new Hub();
            isDebug = $var['CRAYON_LIB_MESSAGE_HUB_DEBUG_MODE'] == true;
            if (isDebug) {
                this._hub.setDebugOverrideToken('u3debug');
            } else {
                this._hub.setDesktopInitializer(token => {
                    cryHome = Environment.getEnvironmentVariable('CRAYON_HOME');
                    if (cryHome == null) throw new Exception("CRAYON_HOME not set.");

                    args = [
                        '--u3:token', token,
                        '--u3:pid', Process.getCurrentProcessId() + ''
                    ];

                    env = Environment.getEnvironment()['platform'];
                    useShell = false;
                    if (env == 'windows') {
                        execFile = cryHome + '\\u3\\u3window.exe';
                    } else if (env == 'mac') {
                        args = [cryHome + '/u3/u3window.app', '--args'] + args;
                        execFile = 'open';
                        useShell = true;
                    } else {
                        throw new NotImplementedException();
                    }

                    p = new Process()
                        .setExecutable(execFile)
                        .setShellMode(useShell)
                        .onFinish(status => {
                            print("Finished with status: " + status);
                        })
                        .setArgs(args);
                    p.run();
                });
            }

            this._hub.listen('u3events', (msgs, cb) => {
                for (msg : msgs) {
                    eventType = msg['eventName'];
                    id = msg['id'];
                    arg = msg['arg'];
                    if (eventType == 'audio') {
                        parts = arg.split(':');
                        switch (parts[0]) {
                            case 'ready':
                                U3AudioEntity.markAudioAsReady();
                                break;
                            case 'loaded':
                                t = this.audioEntitiesById.get(id);
                                t.markAsLoaded();
                                break;
                            default:
                                throw new NotImplementedException(parts[0]);
                        }
                    } else if (eventType == 'gamepad') {
                        this.applyGamepadData(arg.split(':'));
                    } else {
                        eventListener(eventType, id, arg);
                    }
                }
            });

            this._hub.listen('u3batch', (data, cb) => {
                i = 0;
                while (i < data.length) {
                    len = data[i++];
                    item = {
                        "name": data[i],
                        "args": data[i + 1 : i + len],
                    };
                    i += len;
                    this._inputBuffer.add(item);
                }
                cb(null);
            });

            this._hub.listen('u3close', (data, cb) => {
                if (this._overrideClose != null) {
                    this._overrideClose(data + '');
                } else {
                    this.close();
                }
                cb(null);
            });

            this._hub.setOnClose(() => {
                if (onClose != null) onClose();
            });
        }

        field audioEntitiesById = {};
        function registerAudio(audioEntity) {
            this.audioEntitiesById[audioEntity.id] = audioEntity;
        }

        function overrideCloseBehavior(cb) {
            this._overrideClose = cb;
        }

        function show(title, width, height, initialData, isBlocking, keepAspectRatio) {

            setupComplete = false;
            this._hub.setOnReady(() => {

                icon = '';
                if (!Environment.isJavaScript()) {
                    /*
                    easyIcon = new Bitmap(64, 64);
                    blue = new Bitmap(32, 32);
                    blue.edit().fill(0, 0, 255).finish();
                    easyIcon.edit().drawImage(blue, 16, 16).finish();
                    icon = bytesToBase64(new IconBuilder().addImage(easyIcon).toBytes());
                    //*/
                    icon = 'AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAMMOAADDDgAAAAAAAAAAAAAAAAAAAAAAAAAAAABgQwAAVDoAHIZgCOOfcQf/mWsA/5tsAP94VAD/LiAA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYUMAAFE4AByTZwLjsXwC/6d1AP+odQD/kGUA/zwqAOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQ7AAA/LAAcmGoA48KIAP+yfAD/wYcA/8mNAP9eQQDjAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUDgAADwsADSEXAHoxIgDmRTAA/2NFAP+2fwD/XkIA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdFEAAJdqAAIsHwAVDwoAcT4rAPZKNAD/Vz0A/1E4AOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE81AABLMwAZWT0AynFOAOV3UwD7XkEA/2VGAP9ROADjAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNS0cAMjEvTn95bfSOdTz/mG4M/4mAaf+Fbz3/UDcA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXl5fADg5OXelp6v/hXxn/25UF/+mqKz/gHlo/0MtAOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEE0GAAuJhQncVgd56d5Dv+4gQL/h2Ya/5twDv9cQADjAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgQgAASzMAHKVzAOPNjwD/vYQA/7+FAP+2fgD/UTkA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYEMAAFM5AByLYwfjpXUG/55uAP+fbwD/gVoA/zUlAOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBDAABKMwALe1cFsbiEDv+2gAL/tX4A/4hfAP8gFwCxAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi2QIAHZUBU7TmxX08qwK/+KdAP+qdwD0MiMATlQ6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFo+AAApGQALpHcOse6tFP/PkQH/jGIAsTspAAtcQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiWIIAHRSBU3SmRX0wIkK9GpKAE17VgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFo+AAA3JAANnnIMu59yDLs6JwANXEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA+B8AAPgfAAD8PwAA/D8AAA==';
                }

                initMsg = {
                    "title": title,
                    "width": width,
                    "height": height,
                    "initialData": initialData,
                    "keepAspectRatio": keepAspectRatio,

                    // This is a duplicate with command line args, but debug mode doesn't send
                    // command line args, so they're being sent again later here.
                    "pid": Process.isSupported() ? Process.getCurrentProcessId() : 0,
                    "icon": icon,
                };

                this._hub.send('u3init', initMsg, (_) => {
                    setupComplete = true;
                });

                // The message hub will put these in the queue, if present.
                // The important thing is that u3init is first in the queue.
                for (item : this._hubSendQueue) {
                    this.sendData(item);
                }
                this._hubSendQueue = null;
            });

            if (isBlocking) {
                this._hub.startBlocking();
            } else {
                this._hub.start();
                while (!setupComplete && this._hub._isRunning) {
                    Core.sleep(0.005);
                }
            }
            return this;
        }

        function sendData(items) {
            if (this._hubSendQueue != null) {
                this._hubSendQueue.add(items);
            } else {
                this._hub.send('u3data', { "buffer": items });
            }
            return this;
        }

        field _isGame = false;
        function sendGameData(canvasId, items) {
            data = ['CV', canvasId, items.length] + items;
            if (!this._isGame) {
                this._isGame = true;
                data = ['GS', canvasId] + data;
            }
            data.add('FE', -1);
            return this.sendData(data);
        }

        function sendCanvasData(id, items) {
            return this.sendData(['CV', id, items.length] + items);
        }

        function close() {
            this._hub.send('u3close', {});
            this._hub.disconnect();
            return this;
        }

        function flushInputData() {
            b = this._inputBuffer;
            this._inputBuffer = [];
            return b;
        }

        field _newDeviceCallback = null;
        field _deviceTouchedCallback = null;

        function applyGamepadData(args) {
            switch (args[0]) {
                case 'device':
                    // a new device has been found
                    index = parseInt(args[1]);
                    name = TextEncoding.convertBytesToText(Base64.base64ToBytes(args[2]), TextFormat.UTF8);
                    axisCount = parseInt(args[3]);
                    btnCount = parseInt(args[4]);

                    while (index >= this._gamepads.length) { this._gamepads.add(null); }
                    this._gamepads[index] = {
                        'name': name,
                        'axes': [0.0] * axisCount,
                        'buttons': [false] * btnCount,
                        'dirty': [], // pairs will be pushed to this list indicating changes
                    };
                    if (this._newDeviceCallback != null) this._newDeviceCallback();
                    break;
                case 'state':
                    cb = this._deviceTouchedCallback;
                    for (i = 1; i < args.length; ++i) {
                        t = args[i].split('|');
                        device = this._gamepads[parseInt(t[0])];
                        type = t[1];
                        itemIndex = parseInt(t[2]);
                        if (type == 'A') {
                            newValue = parseInt(t[3]) / 1000.0;
                            device['axes'][itemIndex] = newValue;
                        } else {
                            newValue = t[3] == '1';
                            device['buttons'][itemIndex] = newValue;
                        }

                        if (cb != null) {
                            device['dirty'].add(type, itemIndex);
                        }
                    }
                    if (cb != null) {
                        cb();
                    }
                    break;
            }
        }
    }
}
