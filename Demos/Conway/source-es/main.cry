entablar Game;
entablar Graphics2D;
entablar Math;
entablar Random;

const FPS = 60;
const WIDTH = 50;
const HEIGHT = 40;
const CELL_SIZE = 16;
const SCREEN_WIDTH = CELL_SIZE * WIDTH;
const SCREEN_HEIGHT = CELL_SIZE * HEIGHT;

funcion getRandomBlue() {
    volver [
        Random.randomInt(100, 200),
        Random.randomInt(40),
        Random.randomInt(170, 255)
    ];
}

funcion main() {
    window = crear GameWindow("Conway's Game of Life", FPS, SCREEN_WIDTH, SCREEN_HEIGHT);

    totalCells = WIDTH * HEIGHT;

    trues = [verdad] * (totalCells / 3);
    falses = [falso] * (totalCells - trues.length);
    grid = trues + falses;
    grid.shuffle();
    cellPixelX = [];
    para (x = 0; x < WIDTH; ++x) {
        cellPixelX.add(x * CELL_SIZE);
    }
    cellPixelY = [];
    para (y = 0; y < HEIGHT; ++y) {
        cellPixelY.add(y * CELL_SIZE);
    }

    buffer = [falso] * totalCells;
    neighborsLookup = [];
    indices = [];
    blues = [];
    offsets = [-1, 0, 1];
    para (y = 0; y < HEIGHT; ++y) {
        para (x = 0; x < WIDTH; ++x) {
            indices.add(indices.length);
            blues.add(getRandomBlue());
            neighbors = [];
            para (dx : offsets) {
                para (dy : offsets) {
                    neighborX = dx + x;
                    neighborY = dy + y;
                    si (neighborX >= 0 &&
                        neighborY >= 0 &&
                        neighborX < WIDTH &&
                        neighborY < HEIGHT &&
                        (neighborX != x || neighborY != y)) {

                        neighbors.add(neighborX + neighborY * WIDTH);
                    }
                }
            }
            neighborsLookup.add(neighbors);
        }
    }

    lastPosition = -1;
    mousePressed = falso;

    // Lookup table for what to do if a live cell has n neighbors
    liveTransformationLookup = [falso] * 9; // die unless...
    liveTransformationLookup[2] = verdad; // has exactly 2 neighbors
    liveTransformationLookup[3] = verdad; // has exactly 3 neighbors

    // Lookup table for what to do if a dead cell has n neighbors
    deadTransformationLookup = [falso] * 9; // stay dead unless...
    deadTransformationLookup[3] = verdad; // has exactly 3 neighbors

    mientras (verdad) {
        para (event : window.pumpEvents()) {
            elegir (event.type) {
                caso EventType.QUIT:
                    volver;

                caso EventType.MOUSE_MOVE:
                    lastCol = event.x / CELL_SIZE;
                    lastRow = event.y / CELL_SIZE;
                    si (lastCol >= 0 && lastRow >= 0 && lastCol < WIDTH && lastRow < HEIGHT) {
                        lastPosition = lastCol + lastRow * WIDTH;
                    }
                    parar;

                caso EventType.MOUSE_LEFT_DOWN:
                    mousePressed = verdad;
                    parar;

                caso EventType.MOUSE_LEFT_UP:
                    mousePressed = falso;
                    parar;
            }
        }

        si (lastPosition >= 0) {
            // bring half of the cells in the neighbors lookup for the cursor's position to life.
            neighbors = neighborsLookup[lastPosition];
            neighbors.shuffle();
            para (i = 0; i < neighbors.length / 2; ++i) {
                grid[neighbors[i]] = verdad;
            }
        }

        // Perform an iteration on the entire grid...
        para (index : indices) {
            // Count neighbors
            neighbors = 0;
            para (neighborIndex : neighborsLookup[index]) {
                si (grid[neighborIndex]) {
                    neighbors++;
                }
            }

            // Lookup new state
            buffer[index] = (grid[index]
                ? liveTransformationLookup
                : deadTransformationLookup)[neighbors];
        }

        // swap buffers
        t = buffer;
        buffer = grid;
        grid = t;

        // Draw the grid
        Draw.fill(0, 0, 0);
        index = 0;
        para (y : cellPixelY) {
            para (x : cellPixelX) {
                si (grid[index]) {
                    rgb = blues[index];
                    Draw.rectangle(
                        x, y, CELL_SIZE, CELL_SIZE,
                        rgb[0], rgb[1], rgb[2]);
                } mas si (index == lastPosition) {
                    Draw.rectangle(
                        x, y, CELL_SIZE, CELL_SIZE,
                        64, 64, 64);
                }

                ++index;
            }
        }

        window.clockTick();
    }
}
