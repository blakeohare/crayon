if (argCount != 1) {
    hasInterrupt = EX_InvalidArgument(ec, primitiveMethodWrongArgCountError("list concat method", 1, argCount));
} else {
    value2 = funcArgs[0];
    if (value2.type != Types.LIST) {
        hasInterrupt = EX_InvalidArgument(ec, "list concat methods requires a list as an argument.");
    } else {
        list2 = (ListImpl) value2.internalValue;
        intArray1 = list1.type;

        if (intArray1 != null && !canAssignGenericToGeneric(vm, list2.type, 0, intArray1, 0, intBuffer)) {
            hasInterrupt = EX_InvalidArgument(ec, "Cannot concat a list: incompatible types.");
        } else {
            if (intArray1 != null && intArray1[0] == Types.FLOAT && list2.type[0] == Types.INTEGER) {
                bool1 = true;
            } else {
                bool1 = false;
            }
            len = list2.size;

            if (@ext_boolean("ARRAY_IS_LIST")) {
                for (i = 0; i < len; i += 1) {
                    value = list2.list[i];
                    if (bool1) {
                        value = buildFloat(globals, 0.0 + (int)value.internalValue);
                    }
                    list1.list.Add(value);
                }
            } else {
                int1 = list1.size;

                while (int1 + len > list1.capacity) {
                    increaseListCapacity(list1);
                }

                for (i = 0; i < len; i += 1) {
                    value = list2.array[i];
                    if (bool1) {
                        value = buildFloat(globals, 0.0 + (int)value.internalValue);
                    }
                    list1.array[int1 + i] = value;
                }
                list1.size += len;
            }
        }
    }
}
