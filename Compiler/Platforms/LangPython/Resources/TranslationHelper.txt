TranslationHelper_globals = {}

def always_true(): return True
def always_false(): return False

def TranslationHelper_setProgramData(value):
  TranslationHelper_globals['pd'] = value

def TranslationHelper_getProgramData():
  return TranslationHelper_globals['pd']

def TranslationHelper_determineLibraryAvailability(name, ver):
  return TranslationHelper_globals['libreg'].loadLibrary(name, ver)

def TranslationHelper_setLibraries(libraries):
  TranslationHelper_globals['libreg'] = LibraryRegistry(libraries)

def string_check_slice(haystack, i, needle):
  return haystack[i:i + len(needle)] == needle

def string_substring(s, start, length = None):
  if length == None: return s[start:]
  return s[start:start + length]

def _parse_float_helper(f_out, value):
  try:
    output = float(value)
    f_out[0] = 1
    f_out[1] = output
  except:
    f_out[0] = -1

_NUM_CHARS = {}
for c in '0123456789':
  _NUM_CHARS[c] = True

def _is_valid_integer(value):
  first = True
  if value == '-': return False
  for c in value:
    if first:
      first = False
      if c == '-':
        continue
    if not _NUM_CHARS.get(c, False):
      return False
  return True

def wrappedChr(code):
  if code < 0 or code > 255: return '?'
  return chr(code)

def create_assertion(message):
  raise Exception(message)

def _clear_list(list):
  while len(list) > 0:
    list.pop()

def create_sorted_copy_of_list(items):
  items = items[:]
  items.sort()
  return items

_TranslationHelper_fnFinders = []

def TranslationHelper_getFunction(name):
  for fnFinderFn in _TranslationHelper_fnFinders:
    output = fnFinderFn(name)
    if output != None:
      return output
  return None

def TranslationHelper_registerFunctionFinder(fnFinderFn):
  _TranslationHelper_fnFinders.append(fnFinderFn)

def TH_startVm(vm):
  TH_handleInterpreterResult(v_startVm(vm))

def TH_runInterpreter(execId):
  vm = TranslationHelper_getProgramData()
  return TH_handleInterpreterResult(v_runInterpreter(vm, execId))

def TH_runInterpreterWithFunctionPointer(fpValue, args):
  vm = TranslationHelper_getProgramData()
  return TH_handleInterpreterResult(v_runInterpreterWithFunctionPointer(vm, fpValue, args))

def TH_handleInterpreterResult(result):
  vm = TranslationHelper_getProgramData()
  status = v_getVmResultStatus(result)
  while status == 5 or status == 6: # REINVOKE || LOAD_ASSEMBLY
    if status == 6: # LOAD_ASSEMBLY
      parts = v_getVmResultAssemblyInfo(result).split(',')
      name, version = parts;
      # TODO: LoadAssembly(name, version)
    else:
      time.sleep(v_getVmReinvokeDelay(result))

    result = v_runInterpreter(vm, v_getVmResultExecId(result))
    status = v_getVmResultStatus(result)
  if status == 1: # FINISHED
    if v_isVmResultRootExecContext(result):
      sys.exit(0)
    return result

  if status == 2: return result # SUSPEND
  if status == 3: # FATAL
    if v_isVmResultRootExecContext(result): 
      sys.exit(1)
    return result

  raise Exception() # invalid status
