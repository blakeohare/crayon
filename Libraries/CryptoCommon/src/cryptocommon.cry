import TextEncoding;

namespace CryptoCommon {

    class AbstractHash {

        field _result = null;
        field _bytes = [];

        constructor() { }

        function showWarning(name, userOverride) {
            if (userOverride != 'unsafe') {
                print(
                    name + " is not cryptographically secure and should be avoided " +
                    "if possible. See https://crayonlang.org/cryptowarning for " +
                    "more information and how to disable this message.");
            }
        }

        function addText(value, textEncoding = TextEncoding.TextFormat.UTF8) {
            this._result = null;
            bytes = TextEncoding.convertTextToBytes(value, textEncoding);
            this._bytes.concat(bytes);
            return this;
        }

        function addInteger(value) {
            this._result = null;
            this._bytes.add(
                value & 255,
                (value >> 8) & 255,
                (value >> 16) & 255,
                (value >> 24) & 255);
            return this;
        }

        function addByte(value) {
            this._result = null;
            this._bytes.add(value & 255);
            return this;
        }

        function digestImpl() {
            throw new NotImplementedException();
        }

        function digestByteList() {
            this._result = this._result ?? this.digestImpl();
            return this._result.clone();
        }

        function digestHex() {
            bytes = this.digestByteList();
            sb = [];
            h = '0123456789abcdef';
            for (b : bytes) {
                sb.add(h[b >> 4], h[b & 15]);
            }
            return sb.join('');
        }
    }
}
