import Json;
import TextEncoding;
import Http2.Internal;

namespace Http2 {

    class HttpResponse {

        field _fields = {};

        @private constructor() { }

        static function _construct(sc, status, contentType, headersFlat, bytesObj, str) {
            resp = new HttpResponse();
            set(resp, ResField.STATUS_CODE, sc);
            set(resp, ResField.STATUS_MESSAGE, status);
            set(resp, ResField.CONTENT_TYPE, contentType);
            set(resp, ResField.CONTENT_BYTES, bytesObj);
            set(resp, ResField.CONTENT_TEXT, str);
            set(resp, ResField.HEADERS, {});

            for (i = 0; i < headersFlat.length; i += 2) {
                n = headersFlat[i];
                v = headersFlat[i + 1];
                getBucket(resp, n).add(n, v);
            }
            return resp;
        }

        function isOk() {
            sc = this._fields[ResField.STATUS_CODE];
            return sc >= 200 && sc < 300;
        }

        function getStatusCode() {
            return this._fields[ResField.STATUS_CODE];
        }

        function getStatusMessage() {
            return this._fields[ResField.STATUS_MESSAGE];
        }

        function getTextContent() {
            t = this._fields[ResField.CONTENT_TEXT];
            if (t == null) {
                t = TextEncoding.convertBytesToText(this.getBinaryContent()); // throws a TextEncodingException if it can't figure it out.
                this._fields[ResField.CONTENT_TEXT] = t;
            }
            return t;
        }

        function getJsonContent() {
            return Json.parseJson(this.getTextContent());
        }

        function getBinaryContent() {
            o = this._fields[ResField.CONTENT_BYTES];
            b = [];
            $$$('bytesObjToList', o, b);
            return b;
        }

        function getContentType() {
            return this._fields[ResField.CONTENT_TYPE];
        }

        function getHeader(name) {
            b = getBucket(this, name);
            if (b.length > 0) return b[2];
            return null;
        }

        function getHeaders(name) {
            return getBucket(this, name)[1::2];
        }

        function getHeaderNames(name) {
            o = [];
            for (b : this._fields[ResField.HEADERS].values()) {
                if (b.length > 0) o.add(b[0]);
            }
            return o;
        }
    }
}
