function @type('string') lib_xml_parse(
	@type('string') input,
	@type('Array<int>') indexPtr,
	@type('List<Value>') output,
	@type('Dictionary<string, string>') entityLookup,
	@type('Dictionary<int, int>') stringEnders) {

	if ($_dictionary_size(entityLookup) == 0) {
		$_dictionary_set(entityLookup, 'amp', '&');
		$_dictionary_set(entityLookup, 'lt', '<');
		$_dictionary_set(entityLookup, 'gt', '>');
		$_dictionary_set(entityLookup, 'quot', '"');
		$_dictionary_set(entityLookup, 'apos', "'");
		// TODO: consider having two lookups, this one and another for character code entities whose
		// lifetime is bound to the life of this function call. Otherwise using one cache could potentially
		// be a huge memory leak.
		// For documents containing foreign text, this could be a very good performance boost as opposed to
		// parsing each code each time.
	}
	
	if ($_dictionary_size(stringEnders) == 0) {
		$_dictionary_set(stringEnders, $_ord(' '), 1);
		$_dictionary_set(stringEnders, $_ord('"'), 1);
		$_dictionary_set(stringEnders, $_ord("'"), 1);
		$_dictionary_set(stringEnders, $_ord('<'), 1);
		$_dictionary_set(stringEnders, $_ord('>'), 1);
		$_dictionary_set(stringEnders, $_ord('\t'), 1);
		$_dictionary_set(stringEnders, $_ord('\r'), 1);
		$_dictionary_set(stringEnders, $_ord('\n'), 1);
		$_dictionary_set(stringEnders, $_ord('/'), 1);
	}

	$_array_set(indexPtr, 0, 0);
	
	lib_xml_skipWhitespace(input, indexPtr);
	// Skip the XML declaration if present. Non-Standalone is not supported and the encoding is already changed to UTF-8 if it is a Crayon string.
	// This naive implementation feels silly though. I should parse the attributes out and verify them.
	if (lib_xml_popIfPresent(input, indexPtr, '<?xml')) {
		@type('int') newBegin = $_string_index_of(input, '?>');
		if (newBegin == -1) {
			return lib_xml_error(input, $_array_get(indexPtr, 0) - 5, "XML Declaration is not closed.");
		}
		$_array_set(indexPtr, 0, newBegin + 2);
	}
	@type('string') error = lib_xml_skipStuff(input, indexPtr);
	if (error != null) return error;
	
	error = lib_xml_parseElement(input, indexPtr, output, entityLookup, stringEnders);
	if (error != null) return error;
	lib_xml_skipStuff(input, indexPtr);
	
	if ($_array_get(indexPtr, 0) != $_string_length(input)) {
		return lib_xml_error(input, $_array_get(indexPtr, 0), "Unexpected text.");
	}
	return null;
}

function @type('string') lib_xml_error(@type('string') xml, @type('int') index, @type('string') msg) {
	@type('string') loc = "";
	if (index < $_string_length(xml)) {
		@type('int') line = 1;
		@type('int') col = 0;
		@type('int') i = 0;
		while (i <= index) {
			if ($_string_char_code_at(xml, i) == $_ord('\n')) {
				line += 1;
				col = 0;
			} else {
				col += 1;
			}
			i += 1;
		}
		loc = $_string_concat(" on line ", $_string_cast_weak(line), ", col ", $_string_cast_weak(col));
	}
	return $_string_concat("XML parse error", loc, ": ", msg);
}

function @type('string') lib_xml_skipStuff(@type('string') xml, @type('Array<int>') indexPtr) {
	@type('int') index = $_array_get(indexPtr, 0) - 1;
	while (index < $_array_get(indexPtr, 0)) {
		index = $_array_get(indexPtr, 0);
		lib_xml_skipWhitespace(xml, indexPtr);
		@type('string') error = lib_xml_skipComment(xml, indexPtr);
		if (error != null) return error;
	}
	return null;
}

function @type('int') lib_xml_skipWhitespace(@type('string') xml, @type('Array<int>') indexPtr) {
	@type('int') length = $_string_length(xml);
	for (@type('int') i = $_array_get(indexPtr, 0); i < length; i += 1) {
		@type('int') c = $_string_char_code_at(xml, i);
		if (c != $_ord(' ') &&
			c != $_ord('\t') &&
			c != $_ord('\n') &&
			c != $_ord('\r')) {
			$_array_set(indexPtr, 0, i);
			return 0;
		}
	}
	$_array_set(indexPtr, 0, i);
	return 0;
}

function @type('string') lib_xml_skipComment(@type('string') xml, @type('Array<int>') indexPtr) {
	if (lib_xml_popIfPresent(xml, indexPtr, '<!--')) {
		
		@type('int') i = $_string_index_of(xml, '-->', $_array_get(indexPtr, 0));
		if (i == -1) {
			return lib_xml_error(xml, $_array_get(indexPtr, 0) - 4, "Unclosed comment.");
		}
		$_array_set(indexPtr, 0, i + 3);
	}
	return null;
}

function @type('bool') lib_xml_isNext(@type('string') xml, @type('Array<int>') indexPtr, @type('string') value) {
	return $_string_substring_exists_at(xml, $_array_get(indexPtr, 0), value);
}

function @type('bool') lib_xml_popIfPresent(@type('string') xml, @type('Array<int>') indexPtr, @type('string') s) {
	if ($_string_substring_exists_at(xml, $_array_get(indexPtr, 0), s)) {
		$_array_set(indexPtr, 0, $_array_get(indexPtr, 0) + $_string_length(s));
		return true;
	}
	return false;
}

function @type('string') lib_xml_parseElement(
	@type('string') xml,
	@type('Array<int>') indexPtr,
	@type('List<Value>') output,
	@type('Dictionary<string, string>') entityLookup,
	@type('Dictionary<int, int>') stringEnders) {
	
	@type('int') length = $_string_length(xml);
	@type('List<Value>') attributeKeys = $_new_list('Value');
	@type('List<Value>') attributeValues = $_new_list('Value');
	@type('List<Value>') children = $_new_list('Value');
	@type('List<Value>') element = $_new_list('Value');
	@type('string') error = null;
	if (!lib_xml_popIfPresent(xml, indexPtr, '<')) {
		return lib_xml_error(xml, $_array_get(indexPtr, 0), "Expected: '<'");
	}
	
	@type('string') name = lib_xml_popName(xml, indexPtr);
	lib_xml_skipWhitespace(xml, indexPtr);
	@type('bool') hasClosingTag = true;
	while (true) {
		if ($_array_get(indexPtr, 0) >= length) {
			return lib_xml_error(xml, length, "Unexpected EOF");
		}
		
		if (lib_xml_popIfPresent(xml, indexPtr, '>')) {
			break;
		}
		
		if (lib_xml_popIfPresent(xml, indexPtr, '/>')) {
			hasClosingTag = false;
			break;
		}
		@type('string') key = lib_xml_popName(xml, indexPtr);
		if ($_string_length(key) == 0) return lib_xml_error(xml, $_array_get(indexPtr, 0), "Expected attribute name.");
		$_list_push(attributeKeys, buildString(key));
		lib_xml_skipWhitespace(xml, indexPtr);
		if (!lib_xml_popIfPresent(xml, indexPtr, '=')) {
			return lib_xml_error(xml, $_array_get(indexPtr, 0), "Expected: '='");
		}
		lib_xml_skipWhitespace(xml, indexPtr);
		error = lib_xml_popString(xml, indexPtr, attributeValues, entityLookup, stringEnders);
		if (error != null) return error;
		
		lib_xml_skipWhitespace(xml, indexPtr);
	}
	
	if (hasClosingTag) {
		@type('string') close = $_string_concat('</', name, '>');
		while (!lib_xml_popIfPresent(xml, indexPtr, close)) {
			if (lib_xml_isNext(xml, indexPtr, '</')) {
				error = lib_xml_error(xml, $_array_get(indexPtr, 0) - 2, "Unexpected close tag.");
			} else if (lib_xml_isNext(xml, indexPtr, '<!--')) {
				error = lib_xml_skipComment(xml, indexPtr);
			} else if (lib_xml_isNext(xml, indexPtr, '<')) {
				error = lib_xml_parseElement(xml, indexPtr, children, entityLookup, stringEnders);
			} else {
				error = lib_xml_parseText(xml, indexPtr, children, entityLookup);
			}
			if (error == null && $_array_get(indexPtr, 0) >= length) {
				// TODO: include the location of the starting tag.
				error = lib_xml_error(xml, length, "Unexpected EOF. Unclosed tag.");
			}
			
			if (error != null) return error;
		}
	}
	
	$_list_push(element, VALUE_TRUE);
	$_list_push(element, buildString(name));
	$_list_push(element, buildList(attributeKeys));
	$_list_push(element, buildList(attributeValues));
	$_list_push(element, buildList(children));
	$_list_push(output, buildList(element));
	return null;
}

function @type('string') lib_xml_parseText(
	@type('string') xml,
	@type('Array<int>') indexPtr,
	@type('List<Value>') output,
	@type('Dictionary<string, string>') entityLookup) {
	
	@type('int') length = $_string_length(xml);
	@type('int') start = $_array_get(indexPtr, 0);
	@type('int') i = start;
	@type('bool') ampFound = false;
	@type('int') c = 0;
	while (i < length) {
		c = $_string_char_code_at(xml, i);
		if (c == $_ord('<')) {
			break;
		} else if (c == $_ord('&')) {
			ampFound = true;
		}
		i += 1;
	}
	if (i > start) {
		$_array_set(indexPtr, 0, i);
		@type('string') textValue = $_string_substring(xml, start, i - start);
		if (ampFound) {
			textValue = lib_xml_ampUnescape(textValue, entityLookup);
		}
		@type('List<Value>') textElement = $_new_list('Value');
		$_list_push(textElement, VALUE_FALSE);
		$_list_push(textElement, buildString(textValue));
		$_list_push(output, buildList(textElement));
	}
	return null;
}

function @type('string') lib_xml_popName(@type('string') xml, @type('Array<int>') indexPtr) {
	@type('int') length = $_string_length(xml);
	@type('int') i = $_array_get(indexPtr, 0);
	@type('int') start = i;
	@type('int') c = 0;
	// TODO: proper char matching based on https://www.w3.org/TR/REC-xml/#d0e804
	while (i < length) {
		c = $_string_char_code_at(xml, i);
		if ((c >= $_ord('a') && c <= $_ord('z')) ||
			(c >= $_ord('A') && c <= $_ord('Z')) ||
			(c >= $_ord('0') && c <= $_ord('9')) ||
			c == $_ord('_') || c == $_ord('.') || c == $_ord(':') || c == $_ord('-')) {
			// yup, that's valid.
		} else {
			break;
		}
		
		i += 1;
	}
	@type('string') output = $_string_substring(xml, start, i - start);
	$_array_set(indexPtr, 0, i);
	return output;
}

function @type('string') lib_xml_popString(
	@type('string') xml,
	@type('Array<int>') indexPtr,
	@type('List<Value>') attributeValueOut,
	@type('Dictionary<string, string>') entityLookup,
	@type('Dictionary<int, int>') stringEnders) {
	
	@type('int') length = $_string_length(xml);
	@type('int') start = $_array_get(indexPtr, 0);
	@type('int') end = length;
	@type('int') i = start;
	@type('int') stringType = $_string_char_code_at(xml, i);
	
	// Allow unwrapped strings. Not standard, but common enough of a mistake to support
	// Unwrapped strings are terminated by an operator character <, >, =, ", ', or space
	@type('bool') unwrapped = stringType != $_ord('"') && stringType != $_ord("'");
	@type('bool') ampFound = false;
	@type('int') c = $_ord(' ');
	
	if (unwrapped) {
		@type('bool') stahp = false;
		while (i < length) {
			c = $_string_char_code_at(xml, i);
			if ($_dictionary_contains(stringEnders, c)) {
				end = i;
				break;
			} else  if (c == $_ord('&')) {
				ampFound = true;
			}
			i += 1;
		}
	} else {
		i += 1;
		start = i;
		while (i < length) {
			c = $_string_char_code_at(xml, i);
			if (c == stringType) {
				end = i;
				i += 1;
				break;
			} else if (c == $_string_as_char('&')) {
				ampFound = true;
			}
			i += 1;
		}
	}
	
	$_array_set(indexPtr, 0, i);
	
	@type('string') output = $_string_substring(xml, start, end - start);
	
	if (ampFound) {
		output = lib_xml_ampUnescape(output, entityLookup);
	}
	
	$_list_push(attributeValueOut, buildString(output));
	return null;
}

function @type('string') lib_xml_ampUnescape(@type('string') value, @type('Dictionary<string, string>') entityLookup) {
	@type('Array<string>') ampParts = $_string_split(value, '&');
	for (@type('int') i = 1; i < $_array_length(ampParts); i += 1) {
		@type('string') component = $_array_get(ampParts, i);
		@type('int') semicolon = $_string_index_of(component, ';');
		// stray &'s without a semicolon are bregudgingly preserved without error.
		// TODO: Pass in a boolean for strict mode, maybe? Or maybe that's too puritanical?
		if (semicolon != -1) {
			@type('string') entityCode = $_string_substring(component, 0, semicolon);
			@type('string') entityValue = lib_xml_getEntity(entityCode, entityLookup);
			if (entityValue == null) {
				// put the & back and just move on.
				entityValue = '&';
			} else {
				// strip out the entity code and semicolon
				component = $_string_substring(component, semicolon + 1, $_string_length(component) - semicolon);
			}
			$_array_set(ampParts, i, $_string_concat(entityValue, component));
		}
	}
	return $_array_join(ampParts, "");
}

function @type('string') lib_xml_getEntity(@type('string') code, @type('Dictionary<string, string>') entityLookup) {
	if ($_dictionary_contains(entityLookup, code)) {
		return $_dictionary_get_guaranteed(entityLookup, code);
	}
	
	/*
	if ($_string_char_code_at(code, 0) == $_ord('#')) {
		// TODO: add parsing for stuff like &#39; and &#x123F;
	}//*/
	
	return null;
}
