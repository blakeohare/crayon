namespace Zip {

    const RANDOM_ACCESS_ERR = "This archive does not allow random access of entries.";

    class ZipReader {

        field _entriesReadSoFar = [];
        field _nextEntry = null;
        field _endReached = false;
        field _cacheModeEnabled = true;
        field _entryLookup = null;

        constructor(bytes, allowRandomAccess = true) {
            this._cacheModeEnabled = allowRandomAccess;
            sc = $lib_zip_initializeZipReader(this, bytes);
            switch (sc) {
                case 0: break;
                case 1: throw new InvalidArgumentException("Invalid byte list used to create ZipReader");
                case 2: throw new InvalidArgumentException("These bytes are not a valid zip archive.");
                default: throw new Exception(); // unknown error
            }
        }

        function hasNextEntry() {
            return this._readerPeek() != null;
        }

        function getNextEntry() {
            e = this._readerPop();
            if (e == null) throw new InvalidOperationException("There are no more entries in this zip archive.");
            return e;
        }

        function getAllEntries() {
            if (!this._cacheModeEnabled) throw new InvalidOperationException(Zip.RANDOM_ACCESS_ERR);

            while (this.hasNextEntry()) {
                this._readerPop();
            }
            return this._entriesReadSoFar.clone();
        }

        function getEntry(path) {
            if (this._entryLookup == null) {

                if (!this._cacheModeEnabled) throw new InvalidOperationException(Zip.RANDOM_ACCESS_ERR);

                for (entry : this.getAllEntries()) {
                    this._entryLookup[entry.getName()] = entry;
                }
            }
            return this._entryLookup.get(path);
        }

        function _readerPopulatePeekNextEntry() {
            this._nextEntry = null;
            if (this._endReached) return;

            // used as an output struct
            z = [
                false, // next entry found
                '', // name
                false, // is directory stub
                [], // bytes out
            ];

            if (!$lib_zip_readerPeekNextEntry(this, z)) {
                throw new Exception("Reading zip archive has encountered an error.");
            }

            if (!z[0]) { // not found
                this._endReached = true;
                return;
            }

            this._nextEntry = ZipEntry._createInternal(z[2], z[1], z[3]);

            if (this._cacheModeEnabled) {
                this._entriesReadSoFar.add(this._nextEntry);
            }

            return this._nextEntry;
        }

        function _readerPeek() {
            return this._nextEntry ?? this._readerPopulatePeekNextEntry();
        }

        function _readerPop() {
            e = this._readerPeek();
            this._nextEntry = null;
            return e;
        }
    }
}
