using Interpreter.Structs;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Interpreter.Vm
{
    public static class EventLoop
    {
        private class EventLoopInvocation
        {
            public bool StartFromBeginning { get; set; }
            public double Timestamp { get; set; }
            public Value FunctionPointer { get; set; }
            public Value[] FunctionPointerArgs { get; set; }
            public object[] FunctionPointerNativeArgs { get; set; }
            public int ExecutionContextId { get; set; }
        }

        private static List<EventLoopInvocation> queue = new List<EventLoopInvocation>();

        public static void ResumeExecution(int executionContextId)
        {
            AddItemToQueue(new EventLoopInvocation()
            {
                ExecutionContextId = executionContextId,
            });
        }

        public static void ExecuteFunctionPointer(Value fp, IList<Value> args)
        {
            AddItemToQueue(new EventLoopInvocation()
            {
                FunctionPointer = fp,
                FunctionPointerArgs = args.ToArray(),
            });
        }

        public static void ExecuteFunctionPointerNativeArgs(Value fp, IList<object> args)
        {
            AddItemToQueue(new EventLoopInvocation()
            {
                FunctionPointer = fp,
                FunctionPointerNativeArgs = args.ToArray(),
            });
        }

        public static void ExecuteFunctionPointerWithDelay(Value fp, double delay)
        {
            AddItemToQueue(new EventLoopInvocation()
            {
                FunctionPointer = fp,
                FunctionPointerArgs = new Value[0],
                Timestamp = TranslationHelper.GetCurrentTime() + delay,
            });
        }

        public static void ResumeExecutionAfterDelay(int executionContextId, double delay)
        {
            if (delay <= 0) ResumeExecution(executionContextId);
            else
            {
                AddItemToQueue(new EventLoopInvocation()
                {
                    ExecutionContextId = executionContextId,
                    Timestamp = TranslationHelper.GetCurrentTime() + delay,
                });
            }
        }

        private static void AddItemToQueue(EventLoopInvocation invocation)
        {
            if (invocation.Timestamp == 0)
            {
                invocation.Timestamp = TranslationHelper.GetCurrentTime() - 0.0000001;
            }
            lock (queue)
            {
                queue.Add(invocation);
            }
        }

        private static EventLoopInvocation PopItemFromQueue()
        {
            double currentTime = TranslationHelper.GetCurrentTime();
            EventLoopInvocation lowest = null;
            int lowestIndex = -1;
            lock (queue)
            {
                for (int i = 0; i < queue.Count; ++i)
                {
                    EventLoopInvocation item = queue[i];
                    if (item.Timestamp < currentTime && (lowest == null || item.Timestamp < lowest.Timestamp))
                    {
                        lowestIndex = i;
                        lowest = item;
                    }
                }

                if (lowest != null)
                {
                    queue.RemoveAt(lowestIndex);
                }
            }

            return lowest;
        }

        private static int startingThreadId = 0;
        private static int GetThreadId() { return System.Threading.Thread.CurrentThread.ManagedThreadId; }

        public static void EnsureRunningOnStartingThread()
        {
            if (GetThreadId() != startingThreadId)
            {
                throw new Exception("The VM cannot be invoked on a separate thread.");
            }
        }

        public static void StartInterpreter()
        {
            if (startingThreadId != 0) throw new Exception();
            startingThreadId = GetThreadId();
            AddItemToQueue(new EventLoopInvocation()
            {
                StartFromBeginning = true,
            });
            RunEventLoop();
        }

        private static Value ConvertNativeArg(VmContext vm, object na)
        {
            if (na == null) return vm.globalNull;
            if (na is Value) return (Value)na; // allow mixed native/Value
            if (na is bool) return (bool)na ? vm.globalTrue : vm.globalFalse;
            if (na is string) return CrayonWrapper.buildString(vm.globals, (string)na);
            if (na is int) return CrayonWrapper.buildInteger(vm.globals, (int)na);
            if (na is double) return CrayonWrapper.buildFloat(vm.globals, (double)na);
            if (na is float) return CrayonWrapper.buildFloat(vm.globals, (float)na);
            if (na is object[])
            {
                List<Value> list = new List<Value>(((object[])na).Select(a => ConvertNativeArg(vm, a)));
                return CrayonWrapper.buildList(list);
            }

            throw new NotImplementedException("Unsupported type for native arg: " + na.GetType());
        }

        private static void RunEventLoopIteration(EventLoopInvocation invocation)
        {
            VmContext vm = TranslationHelper.ProgramData;
            EnsureRunningOnStartingThread();

            // Debugger.INSTANCE.FlushMessageQueue();

            if (invocation == null) return;

            InterpreterResult result;
            if (invocation.StartFromBeginning)
            {
                result = CrayonWrapper.startVm(vm);
            }
            else if (invocation.FunctionPointer != null)
            {
                Value[] args = invocation.FunctionPointerArgs;
                if (args == null)
                {
                    object[] nativeArgs = invocation.FunctionPointerNativeArgs;
                    args = new Value[nativeArgs.Length];
                    for (int i = 0; i < args.Length; ++i)
                    {
                        args[i] = ConvertNativeArg(vm, nativeArgs[i]);
                    }
                }
                result = CrayonWrapper.runInterpreterWithFunctionPointer(vm, invocation.FunctionPointer, args);
            }
            else
            {
                result = CrayonWrapper.runInterpreter(vm, invocation.ExecutionContextId);
            }

            switch (result.status)
            {
                case 1: // execution context is FINISHED
                    if (result.isRootContext) Environment.Exit(0);
                    break;

                case 2: // SUSPEND
                    // do nothing.
                    break;

                case 3: // FATAL ERROR
                    if (result.isRootContext) Environment.Exit(1);
                    break;

                case 5: // RE-INVOKE, possibly with a delay
                    ResumeExecutionAfterDelay(result.executionContextId, result.reinvokeDelay);
                    break;

                case 7: // BREAKPOINT
                    // do nothing
                    break;
            }
        }

        public static void RunEventLoop()
        {
            while (true)
            {
                EventLoopInvocation invocation = PopItemFromQueue();
                if (invocation != null)
                {
                    RunEventLoopIteration(invocation);
                }
                else
                {
                    // TODO: Check if root execution context has ended.
                }
                System.Threading.Thread.Sleep(1);
            }
        }

        public static void RunEventLoopThroughCurrentItems()
        {
            bool foundAny = true;
            while (foundAny)
            {
                List<EventLoopInvocation> items = new List<EventLoopInvocation>();
                while (true)
                {
                    EventLoopInvocation invocation = PopItemFromQueue();
                    if (invocation == null) break;
                    else items.Add(invocation);
                }

                foundAny = items.Count > 0;

                foreach (EventLoopInvocation item in items)
                {
                    RunEventLoopIteration(item);
                }
            }
        }

        public static InterpreterResult RunInterpreter(int executionContextId)
        {
            EnsureRunningOnStartingThread();
            // Debugger.INSTANCE.FlushMessageQueue();
            return HandleInterpreterStatus(CrayonWrapper.runInterpreter(TranslationHelper.ProgramData, executionContextId));
        }

        public static InterpreterResult RunInterpreter(Value functionPointer, params Value[] args)
        {
            EnsureRunningOnStartingThread();
            // Debugger.INSTANCE.FlushMessageQueue();
            return HandleInterpreterStatus(CrayonWrapper.runInterpreterWithFunctionPointer(TranslationHelper.ProgramData, functionPointer, args));
        }

        private static InterpreterResult HandleInterpreterStatus(InterpreterResult result)
        {
            while (result.status == 5) // REINVOKE
            {
                double sleepForSeconds = result.reinvokeDelay;
                System.Threading.Thread.Sleep((int)(1000 * sleepForSeconds));
                // Debugger.INSTANCE.FlushMessageQueue();
                result = CrayonWrapper.runInterpreter(TranslationHelper.ProgramData, result.executionContextId);
            }
            if (result.status == 1) // FINISHED
            {
                if (result.isRootContext) Environment.Exit(0);
                return result;
            }
            if (result.status == 2 || result.status == 7) return result; // SUSPEND || BREAKPOINT
            if (result.status == 3) // FATAL
            {
                if (result.isRootContext) Environment.Exit(1);
                return result;
            }
            throw new Exception(); // invalid status
        }

        private static Func<VmContext, Value[], Value> GetStartupFunction(string name)
        {
            object fn = TranslationHelper.GetFunctionPointer(name);
            if (fn == null) return null;
            return fn as Func<VmContext, Value[], Value>;
        }
    }
}
