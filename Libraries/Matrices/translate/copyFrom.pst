/*
    args[0] -> target matrix
    args[1] -> copy-from matrix
    args[2] -> is copy-from matrix a matrix instance
*/
Value lib_matrices_function_copyFrom(Array<Value> args) {
    ObjectInstance obj = (ObjectInstance) args[0].internalValue;
    Array<object> nd1 = obj.nativeData;
    obj = (ObjectInstance) args[1].internalValue;
    Array<object> nd2 = obj.nativeData;

    if (!(bool)args[2].internalValue) {
        nd1[5] = "value was not a matrix";
        return VALUE_NULL;
    }

    if ((int)nd1[1] != (int)nd2[1] ||
        (int)nd1[2] != (int)nd2[2]) {

        nd1[5] = "Matrices were not the same size.";
        return VALUE_NULL;
    }

    Array<double> target = (Array<double>) nd1[0];
    Array<double> source = (Array<double>) nd2[0];

    // TODO: use system array copy if available
    int len = target.Size();
    int i = 0;
    while (i < len) {
        target[i] = source[i];
        i += 1;
    }

    return args[0];
}
