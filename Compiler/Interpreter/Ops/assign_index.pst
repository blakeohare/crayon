
valueStackSize -= 3;
value = valueStack[valueStackSize + 2]; // value
value2 = valueStack[valueStackSize + 1]; // index
root = valueStack[valueStackSize];

type = root.type;
bool1 = row[0] == 1; // re-push this onto the stack once it is assigned
if (type == Types.LIST) {
    if (value2.type == Types.INTEGER) {
        i = (int) value2.internalValue;
        list1 = (ListImpl) root.internalValue;
        // TODO: #generics: make this optional when the scope is statically typed. Indicate this on this op
        if (list1.type != null) {
            value3 = canAssignTypeToGeneric(vm, value, list1.type, 0);
            if (value3 == null) {
                hasInterrupt = EX_InvalidArgument(ec, Core.StringConcatAll("Cannot convert a ", typeToStringFromValue(vm, value), " into a ", typeToString(vm, list1.type, 0)));
            }
            value = value3;
        }

        if (!hasInterrupt) {
            if (i >= list1.size) {
                hasInterrupt = EX_IndexOutOfRange(ec, "Index is out of range.");
            } else if (i < 0) {
                i += list1.size;
                if (i < 0) {
                    hasInterrupt = EX_IndexOutOfRange(ec, "Index is out of range.");
                }
            }

            if (!hasInterrupt) {
                if (@ext_boolean("ARRAY_IS_LIST")) {
                    list1.list[i] = value;
                } else {
                    list1.array[i] = value;
                }
            }
        }
    } else {
        hasInterrupt = EX_InvalidArgument(ec, "List index must be an integer.");
    }
} else if (type == Types.DICTIONARY) {

    dictImpl = (DictImpl) root.internalValue;

    if (dictImpl.valueType != null) {
        value3 = canAssignTypeToGeneric(vm, value, dictImpl.valueType, 0);
        if (value3 == null) {
            hasInterrupt = EX_InvalidArgument(ec, "Cannot assign a value to this dictionary of this type.");
        } else {
            value = value3;
        }
    }

    // Note: if the value type check failed, this will overwrite the error, which is okay.
    // The extra if statement to prevent doing this work in the event of a failure isn't worth it.
    keyType = value2.type;
    if (keyType == Types.INTEGER) {
        intKey = (int) value2.internalValue;
    } else if (keyType == Types.STRING) {
        stringKey = (string) value2.internalValue;
    } else if (keyType == Types.INSTANCE) {
        objInstance1 = (ObjectInstance) value2.internalValue;
        intKey = objInstance1.objectId;
    } else {
        hasInterrupt = EX_InvalidArgument(ec, "Invalid key for a dictionary.");
    }

    if (!hasInterrupt) {
        bool2 = dictImpl.size == 0; // dictionary is empty
        if (dictImpl.keyType != keyType) {
            if (dictImpl.valueType != null) {
                // keys don't match and this is a strongly typed dictionary
                hasInterrupt = EX_InvalidKey(ec, "Cannot assign a key of this type to this dictionary.");
            } else if (!bool2) {
                // keys don't match and this dictionary has stuff in it so you can't change it.
                hasInterrupt = EX_InvalidKey(ec, "Cannot have multiple keys in one dictionary with different types.");
            }
        } else if (keyType == Types.INSTANCE && dictImpl.keyClassId > 0 && objInstance1.classId != dictImpl.keyClassId) {
            if (isClassASubclassOf(vm, objInstance1.classId, dictImpl.keyClassId)) {
                hasInterrupt = EX_InvalidKey(ec, "Cannot use this type of object as a key for this dictionary.");
            }
        }
    }

    if (!hasInterrupt) {
        if (keyType == Types.STRING) {
            int1 = dictImpl.stringToIndex.TryGet(stringKey, -1);
            if (int1 == -1) {
                dictImpl.stringToIndex[stringKey] = dictImpl.size;
                dictImpl.size += 1;
                dictImpl.keys.Add(value2);
                dictImpl.values.Add(value);
                if (bool2) { // is empty?
                    dictImpl.keyType = keyType;
                }
            } else {
                dictImpl.values[int1] = value;
            }
        } else {
            int1 = dictImpl.intToIndex.TryGet(intKey, -1);
            if (int1 == -1) {
                dictImpl.intToIndex[intKey] = dictImpl.size;
                dictImpl.size += 1;
                dictImpl.keys.Add(value2);
                dictImpl.values.Add(value);
                if (bool2) { // is empty?
                    dictImpl.keyType = keyType;
                }
            } else {
                dictImpl.values[int1] = value;
            }
        }
    }
} else {
    hasInterrupt = EX_UnsupportedOperation(ec, Core.StringConcatAll(getTypeFromId(type), " type does not support assigning to an index."));
}

// This shouldn't hurt even when there's an interrupt.
if (bool1) {
    // No capacity check necessary. Things were already popped off.
    valueStack[valueStackSize] = value;
    valueStackSize += 1;
}
