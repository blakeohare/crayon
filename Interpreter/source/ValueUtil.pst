
Value buildNull(VmGlobals globals) {
    return globals.valueNull;
}

// These are prone to infinite recursion.
// The problem is that not all platforms have a way to check for reference equality for things
// like dictionaries or lists.
string valueToString(VmContext vm, Value wrappedValue) {

    int type = wrappedValue.type;

    if (type == Types.NULL) return "null";

    if (type == Types.BOOLEAN) {
        if (((bool) wrappedValue.internalValue)) {
            return "true";
        }
        return "false";
    }

    if (type == Types.FLOAT) {
        string floatStr = Core.FloatToString(((double) wrappedValue.internalValue));
        if (!floatStr.Contains(".")) {
            Core.StringAppend(floatStr, ".0");
        }
        return floatStr;
    }

    if (type == Types.INTEGER) return Core.IntToString(((int) wrappedValue.internalValue));

    if (type == Types.STRING) return ((string) wrappedValue.internalValue);

    if (type == Types.LIST) {
        // TODO: STRING BUILDER!
        ListImpl internalList = (ListImpl) wrappedValue.internalValue;
        string output = "[";
        for (int i = 0; i < internalList.size; i += 1) {
            if (i > 0) {
                Core.StringAppend(output, ", ");
            }
            if (@ext_boolean("ARRAY_IS_LIST")) {
                Core.StringAppend(output, valueToString(vm, internalList.list[i]));
            } else {
                Core.StringAppend(output, valueToString(vm, internalList.array[i]));
            }
        }
        Core.StringAppend(output, "]");
        return output;
    }

    if (type == Types.INSTANCE) {
        ObjectInstance objInstance = ((ObjectInstance) wrappedValue.internalValue);
        int classId = objInstance.classId;
        int ptr = objInstance.objectId;
        ClassInfo classInfo = vm.metadata.classTable[classId];
        int nameId = classInfo.nameId;
        string className = vm.metadata.identifiers[nameId];
        return Core.StringConcatAll("Instance<", className, "#", Core.IntToString(ptr), ">");
    }

    if (type == Types.DICTIONARY) {
        // This is nasty because not all platforms have a way to check for instance equality for lists and dictionaries.
        // Therefore this is also prone to infinite recursion.
        DictImpl dict = (DictImpl) wrappedValue.internalValue;
        if (dict.size == 0) {
            return "{}";
        }

        // TODO: STRING BUILDER! OMG, WHY DID YOU DO THIS
        string output = "{";
        List<Value> keyList = dict.keys;
        List<Value> valueList = dict.values;
        for (int i = 0; i < dict.size; i += 1) {
            if (i > 0) Core.StringAppend(output, ", ");
            Core.StringAppend(output, Core.StringConcatAll(
                valueToString(vm, dict.keys[i]),
                ": ",
                valueToString(vm, dict.values[i])));
        }
        Core.StringAppend(output, " }");
        return output;
    }

    // This should not happen.
    return "<unknown>";
}

VmGlobals initializeConstantValues() {
    Array<Value> pos = new Array<Value>(INTEGER_POSITIVE_CACHE_SIZE);
    Array<Value> neg = new Array<Value>(INTEGER_NEGATIVE_CACHE_SIZE);
    for (int i = 0; i < INTEGER_POSITIVE_CACHE_SIZE; i += 1) {
        pos[i] = new Value(Types.INTEGER, i);
    }
    for (i = 1; i < INTEGER_NEGATIVE_CACHE_SIZE; i += 1) {
        neg[i] = new Value(Types.INTEGER, -i);
    }
    neg[0] = pos[0];

    VmGlobals globals = new VmGlobals(
        new Value(Types.NULL, null),
        new Value(Types.BOOLEAN, true),
        new Value(Types.BOOLEAN, false),
        pos[0],
        pos[1],
        neg[1],
        new Value(Types.FLOAT, 0.0),
        new Value(Types.FLOAT, 1.0),
        new Value(Types.STRING, ""),
        pos,
        neg,
        new Dictionary<string, Value>(),
        new Array<int>(1),
        new Array<int>(1),
        new Array<int>(1),
        new Array<int>(1),
        new Array<int>(1),
        new Array<int>(2));
    globals.commonStrings[""] = globals.stringEmpty;
    globals.booleanType[0] = Types.BOOLEAN;
    globals.intType[0] = Types.INTEGER;
    globals.floatType[0] = Types.FLOAT;
    globals.stringType[0] = Types.STRING;
    globals.classType[0] = Types.CLASS;
    globals.anyInstanceType[0] = Types.INSTANCE;
    globals.anyInstanceType[1] = 0;
    return globals;
}

// TODO: #generics: pass in the globals object and cache these, maybe on the class definitions themselves
Array<int> createInstanceType(int classId) {
    Array<int> o = new Array<int>(2);
    o[0] = Types.INSTANCE;
    o[1] = classId;
    return o;
}

Value buildInteger(VmGlobals g, int num) {
    if (num < 0) {
        if (num > -INTEGER_NEGATIVE_CACHE_SIZE) {
            return g.negativeIntegers[-num];
        }
    } else {
        if (num < INTEGER_POSITIVE_CACHE_SIZE) {
            return g.positiveIntegers[num];
        }
    }
    return new Value(Types.INTEGER, num);
}

Value buildString(VmGlobals g, string s) {
    if (s.Size() == 0) return g.stringEmpty;
    return new Value(Types.STRING, s);
}

Value buildBoolean(VmGlobals g, bool value) {
    if (value) return g.boolTrue;
    return g.boolFalse;
}

Value buildFloat(VmGlobals g, double value) {
    // 0 and 1 are safe float comparisons, but in failure, it'll just fall back to default behavior
    if (value == 0.0) return g.floatZero;
    if (value == 1.0) return g.floatOne;
    return new Value(Types.FLOAT, value);
}

// This returns a numerical code rather than a boolean
//  0 = false
//  1 = true
//  2 = The "==" operation is not defined
int doEqualityComparisonAndReturnCode(Value a, Value b) {
    int leftType = a.type;
    int rightType = b.type;

    if (leftType == rightType) {

        if (@ext_boolean("IS_PYTHON")) {
            if (leftType < Types.LIST) {
                if (a.internalValue == b.internalValue) {
                    return 1;
                }
                return 0;
            }
        }

        int output = 0;
        switch (leftType) {
            case Types.NULL:
                output = 1;
                break;

            case Types.INTEGER:
                if ((int) a.internalValue == (int) b.internalValue) {
                    output = 1;
                }
                break;

            case Types.FLOAT:
                if ((double) a.internalValue == (double) b.internalValue) {
                    output = 1;
                }
                break;

            case Types.BOOLEAN:
                if ((bool) a.internalValue == (bool) b.internalValue) {
                    output = 1;
                }
                break;

            case Types.STRING:
                if (@ext_boolean("IS_JAVA")) {
                    if (Core.StringEquals(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else {
                    if ((string) a.internalValue == (string) b.internalValue) {
                        output = 1;
                    }
                }
                break;

            // These 3 types will always have identical references if they are truly equal.
            case Types.LIST:
            case Types.DICTIONARY:
            case Types.INSTANCE:
                if (@ext_boolean("IS_PYTHON") || @ext_boolean("IS_RUBY")) {
                    if (Core.StrongReferenceEquality(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else if (@ext_boolean("IS_C")) {
                    // TODO: is this okay to do? Do Value structs ever get "re-wrapped"?
                    // If this is okay, can the above case be simplified into this?
                    if (Core.StrongReferenceEquality(a, b)) {
                        output = 1;
                    }
                } else {
                    if ((object)a.internalValue == (object)b.internalValue) {
                        output = 1;
                    }
                }
                break;

            // Functions can have multiple references that are equal
            case Types.FUNCTION:
                FunctionPointer f1 = ((FunctionPointer) a.internalValue);
                FunctionPointer f2 = ((FunctionPointer) b.internalValue);
                if (f1.functionId == f2.functionId) {
                    // checking if they are pointing to the same function is not enough. Must also
                    // compare that the object they are attached to is also the same (but only true
                    // for non-static functions)
                    if ((f1.type == FunctionPointerType.METHOD) || (f1.type == FunctionPointerType.PRIMITIVE_METHOD)) {
                        if (doEqualityComparisonAndReturnCode(f1.context, f2.context) == 1) {
                            output = 1;
                        }
                    } else {
                        output = 1;
                    }
                    // TODO: currently lambdas that are from the same code location are considered equal.
                    // This should probably be instead based on reference equality instead.
                }
                break;

            // Classes can have multiple references that are equal
            case Types.CLASS:
                ClassValue c1 = (ClassValue) a.internalValue;
                ClassValue c2 = (ClassValue) b.internalValue;
                if (c1.classId == c2.classId) {
                    output = 1;
                }
                break;

            default:
                output = 2;
                break;
        }

        return output;
    }

    // if (thing == null) is ultra-common so add a short circuit for it.
    if (rightType == Types.NULL) return 0;

    // The ONLY time values of different types should be equal is with numbers.
    // Do a strict == comparison even though these are floats.
    if ((leftType == Types.INTEGER) && (rightType == Types.FLOAT)) {
        if (((int) a.internalValue) == ((double) b.internalValue)) {
            return 1;
        }
    } else if ((leftType == Types.FLOAT) && (rightType == Types.INTEGER)) {
        if (((double) a.internalValue) == ((int) b.internalValue)) {
            return 1;
        }
    }

    return 0;
}

void reverseList(ListImpl list) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        list.list.Reverse();
    } else {
        int _len = list.size;
        Value t = null;
        int i2 = 0;
        Array<Value> arr = list.array;
        for (int i = _len >> 1; i < _len; i += 1) {
            i2 = _len - i - 1;
            t = arr[i];
            arr[i] = arr[i2];
            arr[i2] = t;
        }
    }
}

int clearList(ListImpl a) {
    if (!@ext_boolean("ARRAY_IS_LIST")) {
        for (int i = a.size - 1; i >= 0; i -= 1) {
            a.array[i] = null;
        }
    } else if (@ext_boolean("PLATFORM_SUPPORTS_LIST_CLEAR")) {
        a.list.Clear();
    } else {
        if (a.size == 1) {
            a.list.Pop();
        } else {
            a.list = new List<Value>();
        }
    }
    a.size = 0;
    return 0;
}

Value getItemFromList(ListImpl list, int i) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        return list.list[i];
    } else {
        return list.array[i];
    }
}

ListImpl makeEmptyList(Array<int> type, int capacity) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        return new ListImpl(type, 0, new List<Value>());
    } else {
        return new ListImpl(type, 0, capacity, new Array<Value>(capacity));
    }
}

void setItemInList(ListImpl list, int i, Value v) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        list.list[i] = v;
    } else {
        list.array[i] = v;
    }
}

void addToList(ListImpl list, Value item) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        list.list.Add(item);
    } else {
        if (list.size == list.capacity) {
            increaseListCapacity(list);
        }
        list.array[list.size] = item;
    }
    list.size += 1;
}

void increaseListCapacity(ListImpl list) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        // TODO: some sort of assert
    } else {
        int oldCapacity = list.capacity;
        int newCapacity = oldCapacity * 2;
        if (newCapacity < 8) newCapacity = 8;
        Array<Value> newArr = new Array<Value>(newCapacity);
        Array<Value> oldArr = list.array;
        for (int i = 0; i < oldCapacity; i += 1) {
            // TODO: add system array copy to Pastel
            newArr[i] = oldArr[i];
        }
        list.capacity = newCapacity;
        list.array = newArr;
    }
}

Value buildList(List<Value> valueList) {
    return buildListWithType(null, valueList);
}

Value buildListWithType(Array<int> type, List<Value> valueList) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        return new Value(Types.LIST, new ListImpl(type, valueList.Size(), valueList));
    } else {
        int _len = valueList.Size();
        ListImpl output = makeEmptyList(type, _len);
        for (int i = 0; i < _len; i += 1) {
            output.array[i] = valueList[i];
        }
        output.size = _len;
        return new Value(Types.LIST, output);
    }
}

PlatformRelayObject buildRelayObj(
        int type,
        int iarg1,
        int iarg2,
        int iarg3,
        double farg1,
        string sarg1) {

    return new PlatformRelayObject(type, iarg1, iarg2, iarg3, farg1, sarg1);
}

Value buildCommonString(VmGlobals g, string s) {
    Value value = null;
    value = g.commonStrings.TryGet(s, null);
    if (value == null) {
        value = buildString(g, s);
        g.commonStrings[s] = value;
    }
    return value;
}

Value multiplyString(VmGlobals globals, Value strValue, string str, int n) {
    if (n <= 2) {
        if (n == 1) return strValue;
        if (n == 2) return buildString(globals, Core.StringConcatAll(str, str));
        return globals.stringEmpty;
    }

    List<string> builder = new List<string>();
    while (n > 0) {
        n -= 1;
        builder.Add(str);
    }

    str = builder.Join("");
    return buildString(globals, str);
}

string stringDecode(string encoded) {
    if (!encoded.Contains("%")) {
        int length = encoded.Size();
        char per = "%"[0];
        List<string> builder = new List<string>();
        for (int i = 0; i < length; i += 1) {
            char c = encoded[i];
            if ((c == per) && ((i + 2) < length)) {
                builder.Add(stringFromHex(
                    Core.StringConcatAll("",
                    Core.CharToString(encoded[(i + 1)]),
                    Core.CharToString(encoded[(i + 2)]))));
            } else {
                builder.Add(Core.StringConcatAll("", Core.CharToString(c)));
            }
        }

        return builder.Join("");
    }

    return encoded;
}

string stringFromHex(string encoded) {
    encoded = encoded.ToUpper();
    string hex = "0123456789ABCDEF";
    List<string> output = new List<string>();
    int length = encoded.Size();
    int a = 0;
    int b = 0;
    string c = null;
    for (int i = 0; (i + 1) < length; i += 2) {
        c = Core.StringConcatAll("", Core.CharToString(encoded[i]));
        a = hex.IndexOf(c);
        if (a == -1) return null;
        c = Core.StringConcatAll("", Core.CharToString(encoded[(i + 1)]));
        b = hex.IndexOf(c);
        if (b == -1) return null;
        a = (a * 16) + b;
        output.Add(Core.CharToString(Core.Chr(a)));
    }
    return output.Join("");
}

// TODO: rename this to buildStringObjectDictionary. It's used by the JSON library.
Value buildStringDictionary(VmGlobals globals, Array<string> stringKeys, Array<Value> values) {
    int size = stringKeys.Length();
    DictImpl d = new DictImpl(size, Types.STRING, 0, null, new Dictionary<int, int>(), new Dictionary<string, int>(), new List<Value>(), new List<Value>());
    string k = null;
    for (int i = 0; i < size; i += 1) {
        k = stringKeys[i];
        if (d.stringToIndex.Contains(k)) {
            d.values[d.stringToIndex[k]] = values[i];
        } else {
            d.stringToIndex[k] = d.values.Size();
            d.values.Add(values[i]);
            d.keys.Add(buildString(globals, k));
        }
    }
    d.size = d.values.Size(); // in the event of collisions, the final size won't be the size of the input.
    return new Value(Types.DICTIONARY, d);
}

// Copy the contents of the original into the clone.
// If the clone is null, create a new one.
// Return the clone.
DictImpl cloneDictionary(DictImpl original, DictImpl clone) {

    int type = original.keyType;
    int i = 0;
    int size = original.size;
    int kInt = 0;
    string kString = null;
    if (clone == null) {
        clone = new DictImpl(0, type, original.keyClassId, original.valueType, new Dictionary<int, int>(), new Dictionary<string, int>(), new List<Value>(), new List<Value>());
        if (type == Types.STRING) {
            while (i < size) {
                clone.stringToIndex[(string)original.keys[i].internalValue] = i;
                i += 1;
            }
        } else {
            while (i < size) {
                if (type == Types.INSTANCE) {
                    kInt = Core.ForceParens((ObjectInstance)original.keys[i].internalValue).objectId;
                } else {
                    kInt = (int)original.keys[i].internalValue;
                }
                clone.intToIndex[kInt] = i;
                i += 1;
            }
        }
        i = 0;
        while (i < size) {
            clone.keys.Add(original.keys[i]);
            clone.values.Add(original.values[i]);
            i += 1;
        }
    } else {
        for (i = 0; i < size; i += 1) {
            if (type == Types.STRING) {
                kString = (string)original.keys[i].internalValue;
                if (clone.stringToIndex.Contains(kString)) {
                    clone.values[clone.stringToIndex[kString]] = original.values[i];
                } else {
                    clone.stringToIndex[kString] = clone.values.Size();
                    clone.values.Add(original.values[i]);
                    clone.keys.Add(original.keys[i]);
                }
            } else {
                if (type == Types.INTEGER) {
                    kInt = (int)original.keys[i].internalValue;
                } else {
                    kInt = Core.ForceParens((ObjectInstance)original.keys[i].internalValue).objectId;
                }
                if (clone.intToIndex.Contains(kInt)) {
                    clone.values[clone.intToIndex[kInt]] = original.values[i];
                } else {
                    clone.intToIndex[kInt] = clone.values.Size();
                    clone.values.Add(original.values[i]);
                    clone.keys.Add(original.keys[i]);
                }
            }
        }
    }

    clone.size = clone.intToIndex.Size() + clone.stringToIndex.Size();

    return clone;
}

// Used by logarithm operations that should return whole numbers
double fixFuzzyFloatPrecision(double x) {
    if ((x % 1) != 0) {
        double u = x % 1;
        if (u < 0) {
            u += 1.0;
        }
        bool roundDown = false;
        if (u > 0.9999999999) {
            roundDown = true;
            x += 0.1;
        } else {
            if (u < 0.000000000015) {
                roundDown = true;
            }
        }
        if (roundDown) {
            if (@ext_boolean("INT_IS_FLOOR") || (x > 0)) {
                x = Core.Int(x) + 0.0;
            } else {
                x = Core.Int(x) - 1.0;
            }
        }
    }
    return x;
}

double canonicalizeAngle(double a) {
    double twopi = 2 * 3.14159265358979;
    a = a % twopi;
    if (a < 0) a += twopi;
    return a;
}

double getFloat(Value num) {
    if (num.type == Types.FLOAT) return (double) num.internalValue;
    return ((int) num.internalValue) + 0.0;
}

object getNativeDataItem(Value objValue, int index) {
    ObjectInstance obj = (ObjectInstance) objValue.internalValue;
    return obj.nativeData[index];
}

int nextPowerOf2(int value) {
    if (((value - 1) & value) == 0) return value;
    int output = 1;
    while (output < value) {
        output *= 2;
    }
    return output;
}

Array<int> reallocIntArray(Array<int> original, int requiredCapacity) {
    int oldSize = original.Size();
    int size = oldSize;
    while (size < requiredCapacity) {
        size *= 2;
    }
    Array<int> output = new Array<int>(size);
    for (int i = 0; i < oldSize; i += 1) {
        output[i] = original[i];
    }
    return output;
}

ListImpl valueConcatLists(ListImpl a, ListImpl b) {
    if (@ext_boolean("ARRAY_IS_LIST")) {
        return new ListImpl(null, a.size + b.size, Core.ListConcat(a.list, b.list));
    } else {
        int aLen = a.size;
        int bLen = b.size;
        int size = aLen + bLen;
        ListImpl c = new ListImpl(null, size, size, new Array<Value>(size));
        int i = 0;
        while (i < aLen) {
            c.array[i] = a.array[i];
            i += 1;
        }
        i = 0;
        while (i < bLen) {
            c.array[i + aLen] = b.array[i];
            i += 1;
        }
        c.size = c.capacity;
        return c;
    }
}

ListImpl valueMultiplyList(ListImpl a, int n) {
    int _len = a.size * n;
    ListImpl output = makeEmptyList(a.type, _len);
    if (_len == 0) return output;
    int aLen = a.size;
    int i = 0;
    Value value = null;
    if (aLen == 1) {
        if (@ext_boolean("ARRAY_IS_LIST")) {
            value = a.list[0];
        } else {
            value = a.array[0];
        }
        for (i = 0; i < n; i += 1) {
            if (@ext_boolean("ARRAY_IS_LIST")) {
                output.list.Add(value);
            } else {
                output.array[i] = value;
            }
        }
    } else {
        int j = 0;
        for (i = 0; i < n; i += 1) {
            for (j = 0; j < aLen; j += 1) {
                if (@ext_boolean("ARRAY_IS_LIST")) {
                    output.list.Add(a.list[j]);
                } else {
                    output.array[i * aLen + j] = a.array[j];
                }
            }
        }
    }
    output.size = _len;
    return output;
}

bool isStringEqual(string a, string b) {
    if (@ext_boolean("IS_JAVA")) {
        if (a == null || b == null) {
            return a == null && b == null;
        }

        if (Core.StringEquals(a, b)) {
            return true;
        }
    } else {
        if ((string) a == (string) b) {
            return true;
        }
    }
    return false;
}
