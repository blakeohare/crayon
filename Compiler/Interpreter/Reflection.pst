// File for reflection-related core functions.

Value Reflect_allClasses(VmContext vm) {
    List<Value> valueList = new List<Value>();
    Array<ClassInfo> classTable = vm.metadata.classTable;
    for (int i = 1; i < classTable.Size(); i += 1) {
        ClassInfo classInfo = classTable[i];
        if (classInfo == null) { // ClassInfo table is over-allocated.
            i = classTable.Size();
        } else {
            valueList.Add(new Value(Types.CLASS, new ClassValue(false, classInfo.id)));
        }
    }
    return new Value(Types.LIST, valueList);
}

// TODO: once the static method reflection is implemented, this doesn't need to take in EC anymore, since there will be no exception.
Value Reflect_getMethods(VmContext vm, ExecutionContext ec, Value methodSource) {
    List<Value> methodList = new List<Value>();
    if (methodSource.type == Types.INSTANCE) {
        ObjectInstance objInstance1 = (ObjectInstance) methodSource.internalValue;
        ClassInfo classInfo = vm.metadata.classTable[objInstance1.classId];
        for (int i = 0; i < classInfo.functionIds.Size(); i += 1) {
            int functionId = classInfo.functionIds[i];
            if (functionId != -1) {
                methodList.Add(new Value(Types.FUNCTION, new FunctionPointer(FunctionPointerType.METHOD, methodSource, objInstance1.classId, functionId, null)));
            }
        }
    } else {
        ClassValue classValue = (ClassValue) methodSource.internalValue;
        ClassInfo classInfo = vm.metadata.classTable[classValue.classId];
        EX_UnsupportedOperation(ec, "static method reflection not implemented yet.");
    }
    return new Value(Types.LIST, methodList);
}
