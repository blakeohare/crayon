typedef struct List {
  int size;
  int capacity;
  int item_size;
  union {
  	char* char_items;
  	int* int_items;
  	double* double_items;
  	void** ptr_items;
  };
} List;

List* List_new(int item_size)
{
	List* list = (List*) malloc(sizeof(List));
	list->size = 0;
	list->capacity = 0;
	list->char_items = NULL;
	return list;
}

void List_increase_capacity(List* list, int item_size)
{
	if (list->capacity == 0)
	{
		list->capacity = 4;
		list->char_items = (char*) malloc(list->capacity * item_size);
	}
	else
	{
		list->capacity <<= 1;
		list->char_items = (char*) realloc(list->char_items, list->capacity * item_size);
	}
}

void List_add_char(List* list, char c)
{
	if (list->size == list->capacity) List_increase_capacity(list, sizeof(char));
	list->char_items[list->size++] = c;
}

void List_add_int(List* list, int item)
{
	if (list->size == list->capacity) List_increase_capacity(list, sizeof(int));
	list->int_items[list->size++] = item;
}

void List_add_ptr(List* list, void* ptr)
{
	if (list->size == list->capacity) List_increase_capacity(list, sizeof(void*));
	list->ptr_items[list->size++] = ptr;
}

void List_add_double(List* list, double value)
{
	if (list->size == list->capacity) List_increase_capacity(list, sizeof(double));	
	list->double_items[list->size++] = value;
}

void List_clear(List* list)
{
	free(list->char_items);
	list->capacity = 0;
	list->size = 0;
}
