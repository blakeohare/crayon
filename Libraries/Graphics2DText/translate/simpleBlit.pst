/*
    Adds a blit to the Graphics2D.Draw._queue
    This is ONLY used from non-GL platforms.
    Spoof the Image resource native data structure by

    args[0] -> TextSurface instance
        nativeData[0] -> a bitmap of the rendered text
    args[1] -> Graphics2D.Draw._queue
        nativeData[0] -> ...
    args[2] -> x
    args[3] -> y
    args[4] -> alpha

    This method requires a dummy call to Draw.rectangle so that the event queue is pre-expanded if necessary.
    This is why there's a -16 in the index for the queue length
    TODO: add a way to create dummy images without being backed by real images, then blit a dummy image instead to expand the image queue
*/
Value lib_graphics2dtext_function_simpleBlit(Array<Value> args) {
    object nativeBlittableBitmap = Core.ForceParens((ObjectInstance)args[0].internalValue).nativeData[0];
    Array<object> drawQueueNativeData = Core.ForceParens((ObjectInstance)args[1].internalValue).nativeData;
    int alpha = (int) args[4].internalValue;

    Array<int> eventQueue = (Array<int>) drawQueueNativeData[0];
    int index = (int) drawQueueNativeData[1] - 16;
    Array<object> imageQueue = (Array<object>) drawQueueNativeData[2];
    int imageQueueLength = (int) drawQueueNativeData[3];

    eventQueue[index] = 6;
    eventQueue[index | 1] = 0; // mask indicating that this is a basic blit
    eventQueue[index | 8] = (int) args[2].internalValue; // x
    eventQueue[index | 9] = (int) args[3].internalValue; // y

    // TODO: set the args for applying alpha

    if (imageQueue.Size() == imageQueueLength) {
        int oldSize = imageQueue.Size();
        int newSize = oldSize * 2;
        Array<object> newImageQueue = new Array<object>(newSize);
        for (int i = 0; i < oldSize; i += 1) {
            newImageQueue[i] = imageQueue[i];
            imageQueue = newImageQueue;
            drawQueueNativeData[2] = imageQueue;
        }
    }

    imageQueue[imageQueueLength] = nativeBlittableBitmap; // This is actually a mess of object arrays where bmp = nativeBlittableBitmap[0][3];
    drawQueueNativeData[3] = imageQueueLength + 1;

    return VALUE_NULL;
}
