
// Many of these read functions take in an integer _pointer_ as an index. This is accomplished
// by passing in a reference to an integer array of length 1.

string read_till(Array<int> index, string raw, int length, char end) {
    List<char> output = new List<char>();
    bool ctn = true;
    char c = ' ';
    while (ctn) {
        c = raw[index[0]];
        if (c == end) {
            ctn = false;
        } else {
            output.Add(c);
        }
        index[0] = index[0] + 1;
    }
    return output.Join();
}

int read_integer(Array<int> pindex, string raw, int length, string alphaNums) {
    int num = 0;
    char c = raw[pindex[0]];
    pindex[0] = pindex[0] + 1;
    if (c == '%') {
        string value = read_till(pindex, raw, length, '%');
        num = Core.ParseInt(value);
    } else if (c == '@') {
        num = read_integer(pindex, raw, length, alphaNums);
        num *= 62;
        num += read_integer(pindex, raw, length, alphaNums);
    } else if (c == '#') {
        num = read_integer(pindex, raw, length, alphaNums);
        num *= 62;
        num += read_integer(pindex, raw, length, alphaNums);
        num *= 62;
        num += read_integer(pindex, raw, length, alphaNums);
    } else if (c == '^') {
        num = -1 * read_integer(pindex, raw, length, alphaNums);
    } else {
        Core.EmitComment("TODO: string.IndexOfChar(c)");
        num = alphaNums.IndexOf(Core.CharToString(c));
        if (num == -1) {
            // TODO: assert
        }
    }
    return num;
}

string read_string(Array<int> pindex, string raw, int length, string alphaNums) {
    string b64 = read_till(pindex, raw, length, '%');
    return Core.Base64ToString(b64);
}

Code loadByteCode() {
    string raw = Core.ReadByteCodeFile();

    Array<int> index = new Array<int>(1);
    index[0] = 0;
    int length = raw.Size();

    string header = read_till(index, raw, length, '@');
    if (header != "CRAYON") {
        // TODO: assert
    }

    string alphaNums = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    int opCount = read_integer(index, raw, length, alphaNums);

    Array<int> ops = new Array<int>(opCount);
    Array<Array<int>> iargs = new Array<Array<int>>(opCount);
    Array<string> sargs = new Array<string>(opCount);
    char c = ' ';
    int argc = 0;
    int j = 0;
    string stringarg = null;
    bool stringPresent = false;
    int iarg = 0;
    Array<int> iarglist = null;

    for (int i = 0; i < opCount; i += 1) {
        c = raw[index[0]];
        index[0] = (index[0] + 1);
        argc = 0;
        stringPresent = true;
        if (c == '!') argc = 1;
        else if (c == '&') argc = 2;
        else if (c == '*') argc = 3;
        else {
            if (c != '~') {
                stringPresent = false;
                index[0] = (index[0] - 1);
            }
            argc = read_integer(index, raw, length, alphaNums);
        }

        iarglist = new Array<int>((argc - 1));
        for (j = 0; j < argc; j += 1) {
            iarg = read_integer(index, raw, length, alphaNums);
            if (j == 0) {
                ops[i] = iarg;
            } else {
                iarglist[(j - 1)] = iarg;
            }
        }
        iargs[i] = iarglist;
        if (stringPresent) {
            stringarg = read_string(index, raw, length, alphaNums);
        } else {
            stringarg = null;
        }
        sargs[i] = stringarg;
    }

    return new Code(ops, iargs, sargs);
}
