
// all codepaths push a value, so only subtract 1

if (@ext_boolean("HAS_INCREMENT")) {
    value = valueStack[--valueStackSize];
} else {
    valueStackSize -= 1;
    value = valueStack[valueStackSize];
}
root = valueStack[valueStackSize - 1];

if (root.type == Types.LIST) {
    if (value.type != Types.INTEGER) {
        hasInterrupt = EX_InvalidArgument(ec, "List index must be an integer.");
    } else {
        i = (int) value.internalValue;
        list1 = (List<Value>) root.internalValue;
        if (i < 0) {
            i += list1.Size();
        }
        if (i < 0 || i >= list1.Size()) {
            hasInterrupt = EX_IndexOutOfRange(ec, "List index is out of bounds");
        } else {
            valueStack[valueStackSize - 1] = list1[i];
        }
    }
} else if (root.type == Types.DICTIONARY) {
    dictImpl = (DictImpl) root.internalValue;
    keyType = value.type;
    if (keyType != dictImpl.keyType) {
        if (dictImpl.size == 0) {
            hasInterrupt = EX_KeyNotFound(ec, "Key not found. Dictionary is empty.");
        } else {
            hasInterrupt = EX_InvalidKey(ec, Core.StringConcatAll("Incorrect key type. This dictionary contains ", getTypeFromId(dictImpl.keyType), " keys. Provided key is a ", getTypeFromId(keyType), "."));
        }
    } else {
        if (keyType == Types.INTEGER) {
            intKey = (int) value.internalValue;
        } else if (keyType == Types.STRING) {
            stringKey = (string) value.internalValue;
        } else if (keyType == Types.INSTANCE) {
            intKey = Core.ForceParens((ObjectInstance) value.internalValue).objectId;
        } else {
            if (dictImpl.size == 0) {
                hasInterrupt = EX_KeyNotFound(ec, "Key not found. Dictionary is empty.");
            } else {
                hasInterrupt = EX_KeyNotFound(ec, "Key not found.");
            }
        }

        if (!hasInterrupt) {
            if (keyType == Types.STRING) {
                stringIntDict1 = (Dictionary<string, int>) dictImpl.stringToIndex;
                if (stringIntDict1.Contains(stringKey)) {
                    valueStack[valueStackSize - 1] = dictImpl.values[stringIntDict1[stringKey]];
                } else {
                    hasInterrupt = EX_KeyNotFound(ec, Core.StringConcatAll("Key not found: '", stringKey, "'"));
                }
            } else {
                intIntDict1 = (Dictionary<int, int>) dictImpl.intToIndex;
                if (intIntDict1.Contains(intKey)) {
                    valueStack[valueStackSize - 1] = dictImpl.values[intIntDict1[intKey]];
                } else {
                    // TODO: show key (for objects and ints)
                    hasInterrupt = EX_KeyNotFound(ec, "Key not found.");
                }
            }
        }
    }
} else if (root.type == Types.STRING) {
    string1 = (string) root.internalValue;
    if (value.type != Types.INTEGER) {
        hasInterrupt = EX_InvalidArgument(ec, "String indices must be integers.");
    } else {
        int1 = (int) value.internalValue;
        if (int1 < 0) {
            int1 += string1.Size();
        }
        if (int1 < 0 || int1 >= string1.Size()) {
            hasInterrupt = EX_IndexOutOfRange(ec, "String index out of range.");
        } else {
            // Single char strings are common.
            valueStack[valueStackSize - 1] = buildCommonString(globals, Core.CharToString(string1[int1]));
        }
    }
} else {
    hasInterrupt = EX_InvalidArgument(ec, Core.StringConcatAll("Cannot index into this type: ", getTypeFromId(root.type)));
}
