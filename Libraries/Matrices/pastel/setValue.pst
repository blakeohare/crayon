/*
    args[0] -> matrix
    args[1] -> column
    args[2] -> row
    args[3] -> value

*/
VM.Value lib_matrices_setValue(VM.VmContext vm, Array<VM.Value> args) {

    VM.ObjectInstance obj = (VM.ObjectInstance) args[0].internalValue;
    Array<object> nd = obj.nativeData;
    if (args[1].type != VM.Types.INTEGER || args[2].type != VM.Types.INTEGER) {
        nd[5] = "Invalid coordinates";
        return vm.globalNull;
    }

    int x = (int) args[1].internalValue;
    int y = (int) args[2].internalValue;
    int width = (int) nd[1];
    int height = (int) nd[2];
    if (x < 0 || x >= width || y < 0 || y >= height) {
        nd[5] = "Coordinates out of range.";
        return vm.globalNull;
    }

    double value = 0.0;
    if (args[3].type == VM.Types.FLOAT) {
        value = (double) args[3].internalValue;
    } else if (args[3].type == VM.Types.INTEGER) {
        value = 0.0 + (int) args[3].internalValue;
    } else {
        nd[5] = "Value must be a number.";
        return vm.globalNull;
    }
    int index = y * width + x;
    Array<double> data = (Array<double>) nd[0];
    Array<VM.Value> valueArray = (Array<VM.Value>)nd[3];
    data[index] = value;
    valueArray[index] = VM.buildFloat(vm.globals, value);

    return args[0];
}
