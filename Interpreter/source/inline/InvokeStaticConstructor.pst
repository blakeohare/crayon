// TODO: re-design this as an interrupt so that this code isn't duplicated via inline
// import ~4 times. When that is done, it's possible to remove the staticConstructorNotInvoked
// boolean as it will be redundant with the hasInterrupt boolean flag.

// This code will set staticConstructorNotInvoked and use it as output.
// staticConstructorNotInvoked == true --> continue to run the op code that invoked this as usual.
// staticConstructorNotInvoked == fase --> do not run the op code. The static constructor has been invoked and stack vars updated.

// This code assumes all stack-related local variables (like valueStackSize, pc, etc) are in an accurate state.

staticConstructorNotInvoked = true;
if (classInfo.staticInitializationState < 2) {
    stack.pc = pc;
    // maybeInvokeStaticConstructor is null if the static constructor was not invoked.
    stackFrame2 = maybeInvokeStaticConstructor(vm, ec, stack, classInfo, valueStackSize, Core.IntBuffer16);

    if (Core.IntBuffer16[0] == 1) {
        return generateException(vm, stack, pc, valueStackSize, ec, CoreExceptionTypes.FATAL, "Static initialization loop detected. The class this field is a member of is not done being initialized.");
    }

    if (stackFrame2 != null) {
        staticConstructorNotInvoked = false;
        stack = stackFrame2;
        pc = stack.pc;
        localsStackSetToken = stack.localsStackSetToken;
        localsStackOffset = stack.localsStackOffset;
    }
}
