namespace Nori {

    const TextBox_HasBorder = 'tb.border';
    const TextBox_MultiLine = 'tb.multiline';

    class AbstractTextBox : InputElement {

        field _isPassword;

        constructor(type) : base(type) {
            this._isPassword = type == 'PasswordBox';
        }

        function getText() {
            return this._getValue();
        }

        function setText(text) {
            return this._setValue(text);
        }

        function getShowBorder() { return this._getBoolProperty(TextBox_HasBorder); }
        function setShowBorder(value) { return this._setBoolProperty(TextBox_HasBorder, value); }

        function setOnTextChangedHandler(fn) { return this._setValueChangedHandler(fn); }
        function clearOnTextChangedHandler() { return this._setValueChangedHandler(null); }

        function setAttributeWithString(name, strValue) {
            switch (name) {
                case '<content>':
                case 'text':
                    return this.setText(strValue);
                case 'showBorder': return this._setBooleanAsString(TextBox_HasBorder, strValue);
                default: return base.setAttributeWithString(name, strValue);
            }
        }
    }

    class TextBox : AbstractTextBox {
        constructor() : base('TextBox') { }

        function setMultiLine(value) { return this._setBoolProperty(TextBox_MultiLine, value); }
        function isMultiLine() { return this._getBoolProperty(TextBox_MultiLine); }

        function setAttributeWithString(name, strValue) {
            switch (name) {
                case 'multiline': return this._setBooleanAsString(TextBox_MultiLine, strValue);
                default: return base.setAttributeWithString(name, strValue);
            }
        }
    }

    class PasswordBox : AbstractTextBox {
        constructor() : base('PasswordBox') { }
    }
}
