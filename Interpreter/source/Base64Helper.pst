bool Base64Helper_bytesToB64(Value userByteList, ListImpl output, ListImpl stringsByInt) {
    if (userByteList.type != Types.LIST) return false;
    Array<int> bytes = listImplToBytes((ListImpl) userByteList.internalValue);
    if (bytes == null) return false;
    int byteCount = bytes.Size();
    int pairCount = byteCount * 4;
    while (pairCount % 3 != 0) {
        pairCount += 1;
    }
    Array<int> pairs = new Array<int>(pairCount);
    int j = 0;
    int i = 0;
    for (i = 0; i < byteCount; i += 1) {
        pairs[j] = (bytes[i] >> 6);
        pairs[j + 1] = (bytes[i] >> 4) & 3;
        pairs[j + 2] = (bytes[i] >> 2) & 3;
        pairs[j + 3] = bytes[i] & 3;
        j += 4;
    }

    while (j < pairCount) {
        pairs[j] = 0;
        j += 1;
    }

    int strLen = Core.IntegerDivision(pairCount, 3);

    if (@ext_boolean("ARRAY_IS_LIST")) {
        List<Value> lookupList = stringsByInt.list;
        List<Value> itemsList = output.list;
        for (i = 0; i < pairCount; i += 3) {
            itemsList.Add(lookupList[Core.ForceParens(pairs[i] << 4) + Core.ForceParens(pairs[i + 1] << 2) + pairs[i + 2]]);
        }
    } else {
        Array<Value> lookupArray = stringsByInt.array;
        output.capacity = strLen + 2; // ='s may potentially be added as padding, so go ahead and allocate them in the capacity. Harmless if unused.
        Array<Value> itemsArray = new Array<Value>(strLen + 2);
        output.array = itemsArray;
        j = 0;
        for (i = 0; i < pairCount; i += 3) {
            itemsArray[j] = lookupArray[Core.ForceParens(pairs[i] << 4) + Core.ForceParens(pairs[i + 1] << 2) + pairs[i + 2]];
            j += 1;
        }
    }

    output.size = strLen;

    return true;
}
