using System;
using System.Collections.Generic;
using Interpreter.Vm;

namespace CrayonRuntime
{
    internal class Program
    {
        private static readonly HashSet<string> COMPATIBLE_VERSIONS = new HashSet<string>() {
            "0.2.0",
        };

        public static void Main(string[] args)
        {
            try
            {
                Run(args);
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.Message);
                if (e.InnerException != null)
                {
                	Console.Error.WriteLine("Cause:");
                	Console.Error.WriteLine(e.InnerException.Message);
                }
            }
        }

        private static void Run(string[] args)
        {
            if (args.Length < 2) throw new Exception("Incorrect number of args. Requires path to a cbx file and parent process ID.");

            List<string> argsList = new List<string>(args);
            string cbxPath = argsList[0];
			string vmpidRaw = argsList[1];
            argsList.RemoveAt(0);
            argsList.RemoveAt(0);
            args = argsList.ToArray();

			int vmPid = 0;
            if (!cbxPath.ToLower().EndsWith(".cbx")) throw new Exception("File must be a CBX file.");
            if (!System.IO.File.Exists(cbxPath)) throw new Exception("Given CBX file does not exist.");
			if (!vmpidRaw.StartsWith("vmpid:") || !int.TryParse(vmpidRaw.Substring("vmpid:".Length), out vmPid)) throw new Exception("Invalid VM Process ID.");

			if (vmPid > 0)
			{
                System.Threading.Thread thread = new System.Threading.Thread(ParentChecker);
                thread.IsBackground = true;
                thread.Start(vmPid);
			}

            byte[] cbxData = System.IO.File.ReadAllBytes(cbxPath);

            CbxDecoder cbxDecoder = new CbxDecoder(cbxData);
            if (!COMPATIBLE_VERSIONS.Contains(cbxDecoder.CbxVersion))
                throw new Exception("CBX file was compiled with an incompatible version of Crayon than the current runtime.");

            string byteCode = cbxDecoder.ByteCode;
            if (byteCode == null) throw new Exception("CBX file did not contain byte code.");

            TranslationHelper.CommandLineArgs = args;
            TranslationHelper.LibraryRegistry = new LibraryRegistry(cbxDecoder.LibraryVersionsByName);
            TranslationHelper.ByteCode = byteCode;
            TranslationHelper.ResourceManifest = cbxDecoder.ResourceManifest;
            Interpreter.ResourceReader.CbxDirectory = System.IO.Path.GetDirectoryName(cbxPath);

            CrayonWrapper.v_main();
        }

        // TODO: Surely there is a better way. But for now...
        private static void ParentChecker(object pid)
        {
            System.Diagnostics.Process parentProcess = System.Diagnostics.Process.GetProcessById((int)pid);
            while (true)
            {
                if (parentProcess == null || parentProcess.HasExited)
                {
                    System.Diagnostics.Process.GetCurrentProcess().Kill();
					return; // not strictly necessary but prevents an infinite loop compiler warning.
                }
                System.Threading.Thread.Sleep(50);
            }
        }
    }
}
