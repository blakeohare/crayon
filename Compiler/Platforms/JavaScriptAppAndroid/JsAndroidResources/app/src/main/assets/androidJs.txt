// android.js
// overrides to the regular JavaScript project.

C$common$envDescriptor = () => 'android|javascript';

C$common$globalOptions['is_android'] = true;
C$common$globalOptions['fullscreen'] = true;
C$common$globalOptions['aspect_ratio'] = 1.0;

C$android$receiveMessageDecoder = function(s) {
    var output = [];
    var codes = s.split(' ');
    var length = codes.length;
    for (var i = 0; i < length; ++i) {
        output.push(String.fromCharCode(parseInt(codes[i])));
    }
    return output.join('');
};

receiveMessage = function(type, payload, useEncoding) {
    if (useEncoding) {
        type = C$android$receiveMessageDecoder(type);
        payload = C$android$receiveMessageDecoder(payload);
    }
    var parts = payload.split(' ');
    switch (type) {
        // These are no longer used.
        case 'touch-points-status': break;
        case 'touch-event': break;
        case 'screen-ratio': break;

        case 'tunnel-response':
            tunnelResponseQueue.push({
                msgId: parseInt(parts[0]),
                status: parseInt(parts[1]),
                isRecurring: parts[2] == 'T',
                payload: parts.slice(3).join(' '),
            });
            break;

        case 'back-button':
            let backUnhandledCb = () => { sendMessage('unhandled-back-button', ''); };
            // TODO: check if U3 is available and has a hardware back button handler registered.
            backUnhandledCb();
            break;

        default:
            console.log("Unknown message type: " + type);
            break;
    }
};

sendMessage = function(type, msg) {
    JavaScriptBridge.onSendNativeMessage(type, msg);
};

sendMessage('ready', '');

let tunnelIdAlloc = 1;
PST$registerExtensibleCallback('nativeTunnelSend', arr => {
    let id = tunnelIdAlloc++;
    sendMessage('tunnel-message', arr[0] + "|" + id + "|" + arr[1]);
    return id;
});

let tunnelResponseQueue = [];
PST$registerExtensibleCallback('nativeTunnelRecv', arr => {
    if (tunnelResponseQueue.length == 0) return false;
    let first = tunnelResponseQueue[0];
    tunnelResponseQueue = tunnelResponseQueue.slice(1);
    arr[0] = first.msgId;
    arr[1] = first.status;
    arr[2] = first.payload;
    arr[3] = first.isRecurring;
    return true;
});

C$common$envIsMobile = () => true;

C$setUrlPath = (path) => { };
C$getUrlPath = () => null;
C$common$launchBrowser = (url, fr, name) => { console.log("TODO: Open URLs (" + url + ")"); };
