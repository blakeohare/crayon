import TextEncoding;

namespace Zip {

    class ZipEntry {

        field _name = '';
        field _bytes = [];
        field _isEmptyDir = false;

        @private
        constructor() { }

        static function fromBytes(name, bytes) {
            ZipEntry._ensureValidArchiveInfo(name, bytes);

            e  = new ZipEntry();
            e._name = name;
            e._bytes = bytes;
            return e;
        }

        static function fromString(name, text, format = TextEncoding.TextFormat.UTF8) {
            bytes = TextEncoding.convertTextToBytes(text, format);
            return ZipEntry.fromBytes(name, bytes);
        }

        static function emptyDirectoryPlaceholder(name) {
            ZipEntry._ensureValidArchiveInfo(name, []);

            e = new ZipEntry();
            e._name = name;
            e._isEmptyDir = true;
            return e;
        }

        static function _createInternal(isDir, name, bytes) {
            e = new ZipEntry();
            e._isEmptyDir = isDir;
            e._name = name;
            e._bytes = bytes;
            return e;
        }

        function getName() {
            return this._name;
        }

        function getBytes() {
            return this._bytes.clone();
        }

        function getSize() {
            return this._bytes.length;
        }

        function getString(format = TextEncoding.TextFormat.UNKNOWN) {
            return TextEncoding.convertBytesToText(this._bytes, format);
        }

        function tryGetString(format = TextEncoding.TextFormat.UNKNOWN) {
            try {
                return this.getString(format);
            } catch (Exception) {
                return null;
            }
        }

        static function _ensureValidArchiveInfo(name, bytes) {
            err = null;
            switch ($lib_zip_ensureValidArchiveInfo(name, bytes)) {
                case 1: err = "Invalid archive name: '" + (name ?? 'null') + "'"; break;
                case 2: err = "Invalid byte list."; break;
                default: return;
            }
            throw new InvalidArgumentException(err);
        }
    }

}
