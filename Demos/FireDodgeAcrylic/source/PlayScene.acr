import Game;
import Graphics2D;
import Math;

enum GameMode {
    PLAYING,
    YOU_DIED,
}

public class PlayScene : AbstractScene {

    private Sprite player;
    private Fire[] fires = new List<Sprite>();

    private int gameCounter = 0;

    private int mode = GameMode.PLAYING;
    private int modeCounter = 0;

    public constructor() : base() {
        // Start player out in the center of the screen
        int centerX = SCREEN_WIDTH / 2;
        int centerY = SCREEN_HEIGHT / 2;
        int[] position = new int[] { centerX, centerY };
        this.player = new Player(position);
    }

    public override void processInput(Game.Event[] events) {
        for (Game.Event event : events) {
            // Player clicked
            if (event.type == EventType.MOUSE_LEFT_DOWN) {
				MouseClickEvent clickEvent = (MouseClickEvent) event;
                // And player hasn't died yet
                if (this.mode == GameMode.PLAYING) {

                    // Ensure the coordinate isn't too close to the edge.
                    int x = Math.ensureRange(clickEvent.x, 30, SCREEN_WIDTH - 30);
                    int y = Math.ensureRange(clickEvent.y, 30, SCREEN_HEIGHT - 30);

                    // Tell the player sprite to go there.
                    this.player.targetPosition = new int[] { x, y };
                }
            }
        }
    }

    public override void update() {
        this.gameCounter++;
        this.modeCounter++;

        switch (this.mode) {
            case GameMode.PLAYING:

                // Add a new fire every 2/3 of a second
                if (this.modeCounter % (FPS * 2 / 3) == 0) {
                    Fire fire = new Fire(randomEdgePoint());
                    fire.targetPosition = randomEdgePoint();
                    this.fires.add(fire);
                }

                // Update player position
                this.player.update();

                // Check for player touching a fire.
                if (this.isPlayerTouchingFire()) {
                    this.player.isDead = true;
                    this.mode = GameMode.YOU_DIED;
                    this.modeCounter = 0;
                }

                break;

            case GameMode.YOU_DIED:
                // wait 2 seconds before restarting
                if (this.modeCounter > FPS * 2) {
                    this.switchScene(new PlayScene());
                }
                break;
        }

        // Update the fire positions
        for (Fire fire : this.fires) {
            fire.update();
        }
    }

    public bool isPlayerTouchingFire() {
        float px = this.player.position[0];
        float py = this.player.position[1];
        int playerWidth = this.player.width;

        for (Fire fire : this.fires) {
            float dx = fire.position[0] - px;
            float dy = fire.position[1] - py;
            if (dx > 100 || dy > 100) {
                // fast and easy vicinity check that most sprites will not pass.
                continue;
            }

            float distance = (dx ** 2 + dy ** 2) ** .5;
            float deathDistance = (playerWidth + fire.width) / 2;
            deathDistance *= .7; // make the game a little easier

            if (distance < deathDistance) {
                return true;
            }
        }
        return false;
    }

    public override void render() {

        // This color is charcoal
        Draw.fill(40, 40, 40);

        // Draw fires
        for (Fire fire : this.fires) {
            fire.render(this.gameCounter);
        }

        // Draw player (after fires, so always on top)
        this.player.render(this.gameCounter);

        // Display number of fires on the screen.
        this.displayScore();
    }

    public void displayScore() {
        string text = this.fires.length + '';
        int x = 10; // 10 pixels from the left
        int y = SCREEN_HEIGHT - ImageLibrary.getTextChar('0').height - 10; // 10 pixels from the bottom
        for (string char : text) {
            GraphicsTexture img = ImageLibrary.getTextChar(char);
            img.draw(x, y);
            x += img.width + 5;
        }
    }
}
