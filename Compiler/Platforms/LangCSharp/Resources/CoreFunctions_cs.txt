using Interpreter.Structs;
using System;
using System.Windows.Forms;

namespace Interpreter.Vm
{
    internal static class CoreFunctions
    {
        public static object[] NamedPipeCreate(string name)
        {
            System.IO.Pipes.NamedPipeClientStream pipe = new System.IO.Pipes.NamedPipeClientStream(name);
            pipe.Connect();
            return new object[] {
                pipe,
                new System.IO.StreamReader(pipe),
                new System.IO.StreamWriter(pipe),
            };
        }

        private static System.IO.StreamWriter GetStreamWriter(object pipeWrapper)
        {
            return (System.IO.StreamWriter)((object[])pipeWrapper)[2];
        }

        private static string NamedPipeConvertErrorMessage(string dotNetError)
        {
            if (dotNetError.StartsWith("Pipe is broken")) return "Pipe is broken.";

            return "An unknown error has occurred.";
        }

        public static string NamedPipeWriteLine(object pipeWrapper, string value)
        {
            try
            {
                GetStreamWriter(pipeWrapper).WriteLine(value);
            }
            catch (System.IO.IOException ioe)
            {
                return NamedPipeConvertErrorMessage(ioe.Message);
            }
            return null;
        }

        public static string NamedPipeFlush(object pipeWrapper)
        {
            try
            {
                GetStreamWriter(pipeWrapper).Flush();
            }
            catch (System.IO.IOException ioe)
            {
                return NamedPipeConvertErrorMessage(ioe.Message);
            }
            return null;
        }

        public static object NamedPipeServerCreate(string name, Value startFn, Value onDataFn, Value closeFn)
        {
            System.IO.Pipes.NamedPipeServerStream namedPipe = new System.IO.Pipes.NamedPipeServerStream(name, System.IO.Pipes.PipeDirection.In);
            System.IO.StreamReader reader = new System.IO.StreamReader(namedPipe);
            object[] output = new object[] { namedPipe, reader, startFn, onDataFn, closeFn };

            // TODO: do this in another thread and then fire the startFn
            namedPipe.WaitForConnection();

            // TODO: EventLoop work to invoke onDataFn on ReadLine.

            return output;
        }

        public static string NamedPipeServerClose(object pipeRaw)
        {
            object[] pipe = (object[])pipeRaw;
            System.IO.Pipes.NamedPipeServerStream namedPipe = (System.IO.Pipes.NamedPipeServerStream)pipe[0];
            namedPipe.Close();
            return null;
        }
    }
}
