/*
    All function calls (even constructor invocations and primitive methods) go through this op code, with the exception
    of static constructors that are implicitly called from dereferencing a static field. However, implicit static constructor
    invocations that occur as a result of a static method invocation goes through this op as well.

    Generally, any ambiguous function invocation (such as invoking a field on a variable of unknown type) is resolved into
    a known invocation, and then follows through the rest of the shared codepath.

    Here are the values of FunctionInvocationType, and what they do in this op...

        NORMAL_FUNCTION
        Nothing special. Function is invoked.

        STATIC_METHOD
        Check to see if the class is staticly initialized. If it isn't (or not in progress), don't pop the args, subtract
        1 from the PC, and then change the invocation type to STATIC_CONSTRUCTOR. When it returns, it'll return to the previous
        PC and then resume this op again and it'll be initialized.

        LOCAL_METHOD
        At the final invocation phase, functionId and value must be set.

        POINTER_PROVIDED
        Pop the stack, look at the pointer, and figure out what this is. Change type accordingly.
        This happens before final invocation time.

        FIELD_INVOCATION
        Pop the stack, look at the pointer, look at the field name, then resolve this into one of the following:
        LOCAL_METHOD, POINTER_PROVIDED (i.e. it's a function pointer that was set on a normal field of a class), or
        PRIMITIVE_METHOD

        CONSTRUCTOR

        BASE_CONSTRUCTOR

        STATIC_CONSTRUCTOR
        This is never invoked from the byte code. It is always invoked as a result of STATIC_METHOD.
        When it is invoked, it must mark the stack frame as having a static initalization resolution, so that when it's popped,
        the class is marked as fully initialized.

        PRIMITIVE_METHOD
        This is the only function invocation that does not result in stack changes. The value is computed
        synchronously and immediately pushed back to the stack. There are a few exceptions such as list.sort(fp) that
        will resolve into a NORMAL_FUNCTION and point to a known Core function.
    }

    args:
    row[0] --> type (see above)
    row[1] --> args passed by user. If this is -1, then that means a list was passed and should be used instead. This is a special case just used for Core.functionInvoke.
    row[2] --> functionID if known (available for all types except POINTER_PROVIDED and FIELD_INVOCATION)
    row[3] --> 1 if output is used
    row[4] -->
        if this is a FIELD_INVOCATION then this is the global name ID
        otherwise this is the class ID if this is a method or constructor of any type.
    row[5] -->
        for LOCAL_METHOD invocation -> the local field ID of the field being invoked. Used to do lookup on specific
            class if different than the one the function ID refers to.
        for FIELD_INVOCATION -> current locale ID

*/
type = row[0];
argCount = row[1];
functionId = row[2];
returnValueUsed = row[3] == 1;
classId = row[4];

// Check to see if a static initialization is required.
if (type == FunctionInvocationType.STATIC_METHOD || type == FunctionInvocationType.CONSTRUCTOR) {
    Core.EmitComment("constructor or static method");
    classInfo = metadata.classTable[classId];
    @import("InvokeStaticConstructor.pst");
} else {
    staticConstructorNotInvoked = true;
}

if (staticConstructorNotInvoked) {

    bool1 = true;

    Core.EmitComment("construct args array");
    // Note that if a static constructor is invoked, the args of the previous static method are safe because argCount was set to 0.

    if (argCount == -1) {
        // See hack at the beginning of ByteCodeCompiler.cs's CompileFunctionCall method
        valueStackSize -= 1;
        value = valueStack[valueStackSize];
        if (value.type == Types.NULL) {
            argCount = 0;
        } else if (value.type == Types.LIST) {
            list1 = (ListImpl) value.internalValue;
            argCount = list1.size;
            for (i = argCount - 1; i >= 0; i -= 1) {
                if (@ext_boolean("ARRAY_IS_LIST")) {
                    funcArgs[i] = list1.list[i];
                } else {
                    funcArgs[i] = list1.array[i];
                }
            }
        } else {
            hasInterrupt = EX_InvalidArgument(ec, "Function pointers' .invoke method requires a list argument.");
        }
    } else {
        for (i = argCount - 1; i >= 0; i -= 1) {
            valueStackSize -= 1;
            funcArgs[i] = valueStack[valueStackSize];
        }
    }

    if (!hasInterrupt) {
        if (type == FunctionInvocationType.LOCAL_METHOD) {
            value = stack.objectContext;
            objInstance1 = ((ObjectInstance) value.internalValue);
            if (objInstance1.classId != classId) {
                int2 = row[5];
                if (int2 != -1) {
                    classInfo = classTable[objInstance1.classId];
                    functionId = classInfo.functionIds[int2];
                }
            }
        } else if (type == FunctionInvocationType.FIELD_INVOCATION) {
            Core.EmitComment("field invocation");
            // provided pointers have no risk of requiring a static initialization because the pointer can only be
            // provided from a source that would have already triggered it.

            // Pop the stack and see what we have.
            valueStackSize -= 1;
            value = valueStack[valueStackSize];
            localeId = row[5];

            switch (value.type) {
                case Types.NULL:
                    hasInterrupt = EX_NullReference(ec, "Invoked method on null.");
                    break;

                case Types.INSTANCE:
                    Core.EmitComment("field invoked on an object instance.");
                    objInstance1 = (ObjectInstance) value.internalValue;
                    int1 = objInstance1.classId; // note that classId has the field name ID and so this is sort of confusing
                    classInfo = classTable[int1];
                    intIntDict1 = classInfo.localeScopedNameIdToMemberId;
                    int1 = row[4] * magicNumbers.totalLocaleCount + row[5];
                    i = intIntDict1.TryGet(int1, -1);
                    if (i != -1) {
                        int1 = intIntDict1[int1]; // int1 is now the member ID.
                        // now that we have the member ID, check to see if this is a field or a known method.
                        functionId = classInfo.functionIds[int1];
                        if (functionId > 0) {
                            // This is a local method. 'value' already contains the context.
                            type = FunctionInvocationType.LOCAL_METHOD;
                        } else {
                            // This is just a field which is a pointer to something. Dereference the field into 'value' and change type to POINTER_PROVIDED.
                            // Since there are unverified POINTER_PROVIDED codepaths at this point, don't do verification that it is a FunctionPointer here
                            // as it will be done redundantly later.
                            value = objInstance1.members[int1];
                            type = FunctionInvocationType.POINTER_PROVIDED;

                            valueStack[valueStackSize] = value;
                            valueStackSize += 1;
                        }
                    } else {
                        hasInterrupt = EX_UnknownField(ec, "Unknown field.");
                    }
                    break;

                case Types.CLASS:
                    Core.EmitComment("field invocation on a class object instance.");
                    functionId = resolvePrimitiveMethodName2(globalNameIdToPrimitiveMethodName, value.type, classId); // enum value in PrimitiveMethodName
                    if (functionId < 0) {
                        hasInterrupt = EX_InvalidInvocation(ec, "Class definitions do not have that method.");
                    } else {

                        // Note: a static constructor will never need to run because it will have already happened
                        // at the time that you fetched the class reference.

                        functionId = resolvePrimitiveMethodName2(globalNameIdToPrimitiveMethodName, value.type, classId);
                        if (functionId < 0) {
                            hasInterrupt = EX_InvalidInvocation(ec, Core.StringConcatAll(getTypeFromId(value.type), " does not have that method."));
                        } else {

                            if (globalNameIdToPrimitiveMethodName[classId] == PrimitiveMethodName.CREATE_INSTANCE) {
                                type = FunctionInvocationType.CONSTRUCTOR;
                                classValue = ((ClassValue) value.internalValue);
                                if (classValue.isInterface) {
                                    hasInterrupt = EX_UnsupportedOperation(ec, "Cannot create an instance of an interface.");
                                } else {
                                    classId = classValue.classId;
                                    if (!returnValueUsed) {
                                        // TODO: This is kind of silly.
                                        // Try removing it and verify there is no stack corruption.
                                        hasInterrupt = EX_UnsupportedOperation(ec, "Cannot create an instance and not use the output.");
                                    } else {
                                        classInfo = metadata.classTable[classId];
                                        functionId = classInfo.constructorFunctionId;
                                    }
                                }
                            } else {
                                type = FunctionInvocationType.PRIMITIVE_METHOD;
                            }
                        }
                    }
                    break;

                default:
                    Core.EmitComment("primitive method suspected.");
                    // resolve a primitive method
                    functionId = resolvePrimitiveMethodName2(globalNameIdToPrimitiveMethodName, value.type, classId); // enum value in PrimitiveMethodName
                    if (functionId < 0) {
                        hasInterrupt = EX_InvalidInvocation(ec, Core.StringConcatAll(getTypeFromId(value.type), " does not have that method."));
                    } else {
                        type = FunctionInvocationType.PRIMITIVE_METHOD;
                    }
                    break;
            }
        }
    }

    if (type == FunctionInvocationType.POINTER_PROVIDED && !hasInterrupt) {
        Core.EmitComment("pointer provided");

        valueStackSize -= 1;
        value = valueStack[valueStackSize];

        if (value.type == Types.FUNCTION) {
            functionPointer1 = ((FunctionPointer) value.internalValue);
            switch (functionPointer1.type) {
                case FunctionPointerType.FUNCTION:
                    Core.EmitComment("pointer to a function");
                    functionId = functionPointer1.functionId;
                    type = FunctionInvocationType.NORMAL_FUNCTION;
                    break;
                case FunctionPointerType.METHOD:
                    Core.EmitComment("pointer to a method");
                    functionId = functionPointer1.functionId;
                    value = functionPointer1.context;
                    type = FunctionInvocationType.LOCAL_METHOD;
                    break;
                case FunctionPointerType.STATIC_METHOD:
                    Core.EmitComment("pointer to a static method");
                    functionId = functionPointer1.functionId;
                    classId = functionPointer1.classId;
                    type = FunctionInvocationType.STATIC_METHOD;
                    break;
                case FunctionPointerType.PRIMITIVE_METHOD:
                    Core.EmitComment("pointer to a primitive method");
                    value = functionPointer1.context;
                    functionId = functionPointer1.functionId;
                    type = FunctionInvocationType.PRIMITIVE_METHOD;
                    break;
                case FunctionPointerType.LAMBDA:
                    Core.EmitComment("lambda instance");
                    value = functionPointer1.context;
                    functionId = functionPointer1.functionId; // the function ID is the PC
                    type = FunctionInvocationType.LAMBDA;
                    closure = functionPointer1.closureVariables;
                    break;
            }
        } else {
            hasInterrupt = EX_InvalidInvocation(ec, "This type cannot be invoked like a function.");
        }
    }

    if (type == FunctionInvocationType.PRIMITIVE_METHOD && !hasInterrupt) {
        Core.EmitComment("primitive method invocation");
        output = VALUE_NULL;
        primitiveMethodToCoreLibraryFallback = false;
        switch (value.type) {
            case Types.STRING:
                Core.EmitComment("...on a string");
                string1 = ((string) value.internalValue);
                switch (functionId) {
                    case PrimitiveMethodName.CONTAINS: @import("PrimitiveMethods/string_contains.pst"); break;
                    case PrimitiveMethodName.ENDS_WITH: @import("PrimitiveMethods/string_ends_with.pst"); break;
                    case PrimitiveMethodName.INDEX_OF: @import("PrimitiveMethods/string_index_of.pst"); break;
                    case PrimitiveMethodName.LOWER: @import("PrimitiveMethods/string_lower.pst"); break;
                    case PrimitiveMethodName.LTRIM: @import("PrimitiveMethods/string_ltrim.pst"); break;
                    case PrimitiveMethodName.REPLACE: @import("PrimitiveMethods/string_replace.pst"); break;
                    case PrimitiveMethodName.REVERSE: @import("PrimitiveMethods/string_reverse.pst"); break;
                    case PrimitiveMethodName.RTRIM: @import("PrimitiveMethods/string_rtrim.pst"); break;
                    case PrimitiveMethodName.SPLIT: @import("PrimitiveMethods/string_split.pst"); break;
                    case PrimitiveMethodName.STARTS_WITH: @import("PrimitiveMethods/string_starts_with.pst"); break;
                    case PrimitiveMethodName.TRIM: @import("PrimitiveMethods/string_trim.pst"); break;
                    case PrimitiveMethodName.UPPER: @import("PrimitiveMethods/string_upper.pst"); break;
                    default: output = null; break;
                }
                break;
            case Types.LIST:
                Core.EmitComment("...on a list");
                list1 = ((ListImpl) value.internalValue);
                switch (functionId) {
                    case PrimitiveMethodName.ADD: @import("PrimitiveMethods/list_add.pst"); break;
                    case PrimitiveMethodName.CHOICE: @import("PrimitiveMethods/list_choice.pst"); break;
                    case PrimitiveMethodName.CLEAR: @import("PrimitiveMethods/list_clear.pst"); break;
                    case PrimitiveMethodName.CLONE: @import("PrimitiveMethods/list_clone.pst"); break;
                    case PrimitiveMethodName.CONCAT: @import("PrimitiveMethods/list_concat.pst"); break;
                    case PrimitiveMethodName.CONTAINS: @import("PrimitiveMethods/list_contains.pst"); break;
                    case PrimitiveMethodName.FILTER: @import("PrimitiveMethods/list_filter.pst"); break;
                    case PrimitiveMethodName.INSERT: @import("PrimitiveMethods/list_insert.pst"); break;
                    case PrimitiveMethodName.JOIN: @import("PrimitiveMethods/list_join.pst"); break;
                    case PrimitiveMethodName.MAP: @import("PrimitiveMethods/list_map.pst"); break;
                    case PrimitiveMethodName.POP: @import("PrimitiveMethods/list_pop.pst"); break;
                    case PrimitiveMethodName.REMOVE: @import("PrimitiveMethods/list_remove.pst"); break;
                    case PrimitiveMethodName.REVERSE: @import("PrimitiveMethods/list_reverse.pst"); break;
                    case PrimitiveMethodName.SHUFFLE: @import("PrimitiveMethods/list_shuffle.pst"); break;
                    case PrimitiveMethodName.SORT: @import("PrimitiveMethods/list_sort.pst"); break;
                    default: output = null; break;
                }
                break;
            case Types.DICTIONARY:
                Core.EmitComment("...on a dictionary");
                dictImpl = (DictImpl) value.internalValue;
                switch (functionId) {
                    case PrimitiveMethodName.CLEAR: @import("PrimitiveMethods/dict_clear.pst"); break;
                    case PrimitiveMethodName.CLONE: @import("PrimitiveMethods/dict_clone.pst"); break;
                    case PrimitiveMethodName.CONTAINS: @import("PrimitiveMethods/dict_contains.pst"); break;
                    case PrimitiveMethodName.GET: @import("PrimitiveMethods/dict_get.pst"); break;
                    case PrimitiveMethodName.KEYS: @import("PrimitiveMethods/dict_keys.pst"); break;
                    case PrimitiveMethodName.MERGE: @import("PrimitiveMethods/dict_merge.pst"); break;
                    case PrimitiveMethodName.REMOVE: @import("PrimitiveMethods/dict_remove.pst"); break;
                    case PrimitiveMethodName.VALUES: @import("PrimitiveMethods/dict_values.pst"); break;
                    default: output = null; break;
                }
                break;
            case Types.FUNCTION:
                Core.EmitComment("...on a function pointer");
                functionPointer1 = ((FunctionPointer) value.internalValue);
                switch (functionId) {
                    case PrimitiveMethodName.ARG_COUNT_MAX: @import("PrimitiveMethods/function_arg_count_max.pst"); break;
                    case PrimitiveMethodName.ARG_COUNT_MIN: @import("PrimitiveMethods/function_arg_count_min.pst"); break;
                    case PrimitiveMethodName.GET_NAME: @import("PrimitiveMethods/function_get_name.pst"); break;
                    case PrimitiveMethodName.INVOKE: @import("PrimitiveMethods/function_invoke.pst"); break;
                    default: output = null; break;
                }
                break;
            case Types.CLASS:
                Core.EmitComment("...on a class definition");
                classValue = ((ClassValue) value.internalValue);
                switch (functionId) {
                    case PrimitiveMethodName.GET_NAME: @import("PrimitiveMethods/class_get_name.pst"); break;
                    case PrimitiveMethodName.IS_A: @import("PrimitiveMethods/class_is_a.pst"); break;
                    default: output = null; break;
                }
                break;
        }

        if (!hasInterrupt) {
            if (output == null) {
                if (primitiveMethodToCoreLibraryFallback) {
                    type = FunctionInvocationType.NORMAL_FUNCTION;
                    bool1 = true;
                    // functionId has been set.
                } else {
                    hasInterrupt = EX_InvalidInvocation(ec, "primitive method not found.");
                }
            } else {
                if (returnValueUsed) {
                    @import("ValueStackCapacityCheck.pst");
                    valueStack[valueStackSize] = output;
                    valueStackSize += 1;
                }
                bool1 = false;
            }
        }
    }

    if (bool1 && !hasInterrupt) {
        Core.EmitComment("push a new frame to the stack");

        stack.pc = pc;
        bool1 = false; // bool1 now indicates whether the PC's in intArray1 indicate additional stack frames that need to be pushed.

        // Set the following variables...
        // pc --> since pc is now saved, put the new PC into the 'pc' variable.
        // classId --> for static constructors, set this to the class ID to mark as initialization-completed, 0 otherwise
        // value --> the value of 'this' in the next function
        switch (type) {
            case FunctionInvocationType.NORMAL_FUNCTION:
                Core.EmitComment("function");
                functionInfo = functionTable[functionId];
                pc = functionInfo.pc;
                value = null;
                classId = 0;
                break;
            case FunctionInvocationType.LAMBDA:
                Core.EmitComment("lambda");
                pc = functionId;
                functionInfo = metadata.lambdaTable[functionId];
                value = null;
                classId = 0;
                break;
            case FunctionInvocationType.STATIC_METHOD:
                Core.EmitComment("static method");
                functionInfo = functionTable[functionId];
                pc = functionInfo.pc;
                value = null;
                classId = 0;
                break;
            case FunctionInvocationType.LOCAL_METHOD:
                Core.EmitComment("non-static method");
                functionInfo = functionTable[functionId];
                pc = functionInfo.pc;
                classId = 0;
                // value already set
                break;
            case FunctionInvocationType.CONSTRUCTOR:
                Core.EmitComment("constructor");
                vm.instanceCounter += 1;
                classInfo = classTable[classId];
                valueArray1 = new Array<Value>(classInfo.memberCount);
                for (i = valueArray1.Size() - 1; i >= 0; i -= 1) {
                    // TODO: cut this out, since everything is just 0 now.
                    switch (classInfo.fieldInitializationCommand[i]) {
                        case 0:
                            valueArray1[i] = classInfo.fieldInitializationLiteral[i];
                            break;
                        case 1:
                            valueArray1[i] = new Value(Types.LIST, makeEmptyList(null, 1));
                            break;
                        case 2:
                            valueArray1[i] = new Value(Types.DICTIONARY, new DictImpl(
                                0,
                                Types.INTEGER,
                                null,
                                new Dictionary<int, int>(),
                                new Dictionary<string, int>(),
                                new List<Value>(),
                                new List<Value>()));
                            break;
                    }
                }
                objInstance1 = new ObjectInstance(
                    classId,
                    vm.instanceCounter,
                    valueArray1,
                    null,
                    null);
                value = new Value(Types.INSTANCE, objInstance1);
                functionId = classInfo.constructorFunctionId;
                functionInfo = functionTable[functionId];
                pc = functionInfo.pc;
                classId = 0;
                if (returnValueUsed) {
                    // if the return value is used, push the new constructed object to the stack NOW and then call the function
                    // as though the return value is not used.
                    returnValueUsed = false;
                    @import("ValueStackCapacityCheck.pst");
                    valueStack[valueStackSize] = value;
                    valueStackSize += 1;
                }
                break;
            case FunctionInvocationType.BASE_CONSTRUCTOR:
                Core.EmitComment("base constructor");
                value = stack.objectContext;
                classInfo = classTable[classId];
                functionId = classInfo.constructorFunctionId;
                functionInfo = functionTable[functionId];
                pc = functionInfo.pc;
                classId = 0;
                break;
        }

        if (argCount < functionInfo.minArgs || argCount > functionInfo.maxArgs) {
            pc = stack.pc;
            hasInterrupt = EX_InvalidArgument(ec, "Incorrect number of args were passed to this function.");
        } else {

            int1 = functionInfo.localsSize;

            // where the current locals stack ends (will be the new locals stack begin)
            int2 = stack.localsStackOffsetEnd;

            if (localsStackCapacity <= (int2 + int1)) {
                increaseLocalsStackCapacity(ec, int1);
                localsStack = ec.localsStack;
                localsStackSet = ec.localsStackSet;
                localsStackCapacity = localsStack.Size();
            }

            localsStackSetToken += 1;
            if (localsStackSetToken > 2000000000) {
                resetLocalsStackTokens(ec, stack);
                localsStackSetToken = 2;
            }

            localsStackOffset = int2;

            if (type != FunctionInvocationType.LAMBDA) {
                closure = null;
            }

            Core.EmitComment("invoke the function");
            stack = new StackFrame(
                pc,
                localsStackSetToken,
                localsStackOffset,
                localsStackOffset + int1, // locals stack end (exclusive) and also the next stack frame's localsStackOffset
                stack,
                returnValueUsed,
                value, // the value of the 'this' keyword
                valueStackSize,
                0, // for static constructor use only
                stack.depth + 1,
                PostFinallyBehavior.NOTHING,
                null, // temp return value
                closure); // closure lookup

            // now that we're in the new stack frame, flush out all the passed args to the local stack since their
            // ID's are allocated with args first.
            for (i = 0; i < argCount; i += 1) {
                int1 = localsStackOffset + i;
                localsStack[int1] = funcArgs[i];
                localsStackSet[int1] = localsStackSetToken;
            }
            if (argCount != functionInfo.minArgs) {
                // optional args are simply local variable assignments at the front of the function body.
                // Adjust the PC to skip these if those arguments were provided.
                int1 = argCount - functionInfo.minArgs; // number of optional args provided
                if (int1 > 0) {
                    // The amount to increment the PC by is conveniently stored in the function metadata in an
                    // array indexed by the number of optional args provided.
                    pc += functionInfo.pcOffsetsForOptionalArgs[int1];
                    stack.pc = pc;
                }
            }

            if (stack.depth > 1000) {
                hasInterrupt = EX_Fatal(ec, "Stack overflow.");
            }
        }
    }
}
