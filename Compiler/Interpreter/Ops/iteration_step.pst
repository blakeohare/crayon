/*
    row[0] -> jump offset when loop is complete
    row[1] -> local ID of the iterating variable
    row[2] -> local ID of the iterating index
    row[3] -> local ID of the collection

    the iterating index and collection are both synthetically generated local ID's and will never
    collide with user-defined local variables.
*/
int1 = localsStackOffset + row[2];
value3 = localsStack[int1]; // iterating index wrapped value
i = (int) value3.internalValue; // iterator index
value = localsStack[localsStackOffset + row[3]]; // list, string
if (value.type == Types.LIST) {
    list1 = (List<Value>) value.internalValue; // the actual list
    len = list1.Size();
    bool1 = true;
} else {
    string2 = (string) value.internalValue; // the actual string
    len = string2.Size();
    bool1 = false;
}

if (i < len) {
    if (bool1) {
        value = list1[i];
    } else {
        // Go easy on GC. Single-char strings are going to be common for users that use foreach loops on strings.
        value = buildCommonString(globals, Core.CharToString(string2[i]));
    }

    // set the iterating variable
    int3 = localsStackOffset + row[1];
    localsStackSet[int3] = localsStackSetToken;
    localsStack[int3] = value;
} else {
    pc += row[0];
}

// Update the current iteration index.
// The index can never be 0 so this is the inlined version of buildInteger, but with negative checks removed.
i += 1;
if (i < INTEGER_POSITIVE_CACHE_SIZE) {
    localsStack[int1] = INTEGER_POSITIVE_CACHE[i];
} else {
    localsStack[int1] = new Value(Types.INTEGER, i);
}
