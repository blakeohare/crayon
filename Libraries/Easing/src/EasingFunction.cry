import Math;

namespace Easing {

    class EasingFunction {

        static field LINEAR = new EasingFunction(t => t).setSamplingInterval(1);
        static field QUADRATIC = new EasingFunction(t => t ** 2);
        static field CUBIC = new EasingFunction(t => t ** 3);
        static field QUART = new EasingFunction(t => t ** 4);
        static field QUINT = new EasingFunction(t => t ** 5);
        static field CIRCLE = new EasingFunction(t => (1 - t ** 2) ** .5);
        static field SIN = new EasingFunction(t => 1.0 - Math.cos(t * (Math.PI / 2)));
        static field ELASTIC = new EasingFunction(t => {
            if (t < .1) t = (t * 6 + 4) * t;
            else t = t * .6 + .4;
            return Math.sin(t * (2 * Math.PI * 5.25)) * (t ** 6);
        }).setSamplingInterval(400);

        field _fp = null;
        field _intervals = 100;
        field _pts = null;

        constructor(fp) {
            this._fp = fp;
        }

        function setSamplingInterval(n) {
            this._pts = null;
            this._intervals = Math.floor(n);
            return this;
        }

        function _manifest() {
            this._pts = [];
            i = -1;
            m = this._intervals * 1.0;
            while (++i <= m) {
                this._pts.add(this._fp(i / m) * 1.0);
            }
            return this._pts;
        }

        function easeIn(start, end, current, duration, useInts = false) {
            return _ease(start, end, current, duration, useInts, -1, this._pts ?? this._manifest());
        }

        function easeOut(start, end, current, duration, useInts = false) {
            return _ease(start, end, current, duration, useInts, 1, this._pts ?? this._manifest());
        }

        function ease(start, end, current, duration, useInts = false) {
            return _ease(start, end, current, duration, useInts, 0, this._pts ?? this._manifest());
        }
    }

    const ERR_MSG_SUFFIX = ' must be a number.';

    function _ease(start, end, current, duration, useInts, type, pts) {
        if (!Core.isNumber(start)) _throw('start' + ERR_MSG_SUFFIX);
        if (!Core.isNumber(end)) _throw('end' + ERR_MSG_SUFFIX);
        if (!Core.isNumber(current)) _throw('current' + ERR_MSG_SUFFIX);
        if (!Core.isNumber(duration)) _throw('duration' + ERR_MSG_SUFFIX);

        $$$('argVerifyNums', "start", start, 1);
        $$$('argVerifyNums', "start", start, 1);
        progress = Math.ensureRange((0.0 + current) / duration, 0.0, 1.0);
        firstHalf = false;
        switch (type) {
            case 1:
                progress = 1 - progress;
                break;
            case 0:
                if (progress < .5) {
                    firstHalf = true;
                    progress *= 2;
                } else {
                    progress = 2 - 2 * progress;
                }
                break;
        }

        //print("Progress: " + progress + " type: " + type);
        indexFloat = (pts.length - 1) * progress;
        indexIntRounded = Math.floor(indexFloat + .5);
        //print("Raw index: " + indexFloat);
        if (Math.abs(indexFloat - indexIntRounded) < 0.0000001) {
            ratio = pts[indexIntRounded];
        } else {
            indexIntFloor = Math.floor(indexFloat);
            left = pts[indexIntFloor];
            right = pts[indexIntFloor + 1];
            diff = indexFloat - indexIntFloor;
            ratio = (right * diff) + (left * (1 - diff));
        }

        // print("ratio: " + ratio);

        if (type == 0) {
            if (firstHalf) {
                ratio /= 2.0;
            } else {
                ratio = 1 - ratio;
                ratio = ratio / 2 + .5;
            }
        } else if (type == 1) {
            ratio = 1 - ratio;
        }

        output = ratio * (end - start) + start;

        if (useInts) {
            output = Math.floor(output + .5);
        }

        return output;
    }

    function _throw(m) {
        throw new InvalidArgumentException(m);
    }
}
