using System;
using System.Collections.Generic;
using System.Linq;

namespace Interpreter.Vm
{
    public class LibraryRegistry
    {
        private Dictionary<string, System.Reflection.MethodInfo> manifestMethodsByLibraryName = new Dictionary<string, System.Reflection.MethodInfo>();
        private Dictionary<string, Library> librariesByName = new Dictionary<string, Library>();

        public LibraryRegistry()
        {
            foreach (Type type in typeof(LibraryRegistry).Assembly.GetTypes().Where(t => t.Name == "LibraryWrapper"))
            {
                string[] namespaceComponents = type.FullName.Split('.');
                if (namespaceComponents.Length > 2 && namespaceComponents[1] == "Libraries")
                {
                    string name = namespaceComponents[2];
                    System.Reflection.MethodInfo manifestMethod = type.GetMethod("v_lib_manifest_RegisterFunctions");
                    manifestMethodsByLibraryName[name] = manifestMethod;
                    librariesByName[name] = new Library(manifestMethod);
                    RegisterLibraryMethodResolver(type);
                }
            }
        }

        private static void RegisterLibraryMethodResolver(Type libraryType)
        {
            TranslationHelper.RegisterFunctionPointerResolver((string funcName) =>
            {
                string name = funcName.Split(',')[1];

                // TODO: figure out why GetMethod() is not working directly
                System.Reflection.MethodInfo methodInfo = libraryType.GetMethods().Where(m => m.Name == "v_" + name).FirstOrDefault();
                if (methodInfo == null) return null;
                Func<Interpreter.Structs.VmContext, Interpreter.Structs.Value[], Interpreter.Structs.Value> output = (Interpreter.Structs.VmContext vm, Interpreter.Structs.Value[] args) =>
                {
                    return (Interpreter.Structs.Value)methodInfo.Invoke(null, new object[] { vm, args });
                };
                return output;
            });
        }

        public Library GetLibrary(string name)
        {
            if (this.librariesByName.ContainsKey(name))
            {
                return this.librariesByName[name];
            }
            return null;
        }

        public int LoadLibrary(string name, string version)
        {
            // Because this is bundled, the version is always correct.
            if (this.manifestMethodsByLibraryName.ContainsKey(name)) // Embed-code-only libraries don't have a notion of being "loaded"
            {
                librariesByName[name] = new Library(this.manifestMethodsByLibraryName[name]);
            }
            return 0;
        }
    }
}
