namespace Nori {
    enum WindowProperties {
        TITLE,
        SIZE,
    }

    class Window {

        static field WINDOWS_OPEN = [];

        field _nativeInstance = null;

        field _properties = [null] * (WindowProperties.max() + 1);

        field _root = new ScrollPanel();
        field _isShown = false;
        field _hierarchyDirty = true;
        field _childrenHandlers = {};

        static constructor() {
            $$lib_nori_registerHandlerCallback(Window.invokeHandler, Window.HANDLER_ARGS);
        }

        constructor() {
            this._properties[WindowProperties.TITLE] = "Untitled Window";
            this._properties[WindowProperties.SIZE] = [400, 300];
            this._root._window = this;
            this._root._isWindowRoot = true;
        }

        static field HANDLER_ARGS = [];
        static function invokeHandler(id) {
            for (window : Window.WINDOWS_OPEN) {
                entry = window._childrenHandlers.get(id);
                if (entry != null) {
                    fp = entry[1];
                    fp(Window.HANDLER_ARGS);
                    Window.HANDLER_ARGS.clear();
                    return;
                }
            }
        }

        function show() {
            if (this._isShown) return;

            Window.WINDOWS_OPEN.add(this);

            if (this._nativeInstance == null) {
                this._nativeInstance = new Core.Object();
                $$lib_nori_instantiateWindow(this._nativeInstance, this._properties);
            }

            Panel.instantiateTree(this._root);
            this._isShown = true;
            this._updateLayout();
            $$lib_nori_showWindow(this._nativeInstance, this._properties, this._root._nativeInstance);
            return this;
        }

        function close() {
            if (!this._isShown) return;
            for (i = 0; i < Window.WINDOWS_OPEN.length; ++i) {
                if (Window.WINDOWS_OPEN[i] == this) {
                    Window.WINDOWS_OPEN.remove(i);
                    break;
                }
            }

            $$lib_nori_closeWindow(this._nativeInstance);
            this._isShown = false;
            return this;
        }

        function setTitle(title) {
            this._properties[WindowProperties.TITLE] = title + '';
            if (this._nativeInstance != null) this._invalidate(WindowProperties.TITLE);
            return this;
        }

        function _invalidate(property) {
            return $$lib_nori_invalidateWindowProperty(this._nativeInstance, property, this._properties[property]);
        }

        static field NON_VIRTUALS_REUSABLE = [];
        static field QUEUE_REUSABLE = [];
        function getNonVirtuals() {
            output = Window.NON_VIRTUALS_REUSABLE;
            queue = Window.QUEUE_REUSABLE;
            queue.add(this._root);
            for (item : queue) {
                if (item is Panel) {
                    queue.concat(item._children);
                }
                if (!item._isVirtual) {
                    output.add(item);
                }
            }
            queue.clear();
            return output;
        }

        function _updateLayout() {
            if (!this._isShown) return;
            if (this._hierarchyDirty) {
                this._updateHierarchy();
                this._hierarchyDirty = false;
            }
            this._root._updateAbsoluteRequiredSize();
            size = this._properties[WindowProperties.SIZE];
            width = size[0];
            height = size[1];

            this._root._allocateAvailableSpace(0, 0, width, height, width, height, HorizontalAlignment.STRETCH, VerticalAlignment.STRETCH);

            nonVirtuals = [];

            nativeElements = [];
            properties = [];
            types = [];
            nonVirtuals = this.getNonVirtuals();
            for (element : nonVirtuals) {
                nativeElements.add(element._nativeInstance);
                properties.add(element._properties);
                types.add(element._typeId);
            }
            nonVirtuals.clear();
            $$lib_nori_updateLayout(nativeElements, properties, types);
        }

        function _updateHierarchy() {
            recurse = [this._root]; // simulate recursion through an iteration queue, for speed
            viewRootMembers = [];
            renderedChildren = [];
            for (i = 0; i < recurse.length; ++i) {
                viewRoot = recurse[i];
                viewRootMembers.concat(viewRoot._children);
                for (child : viewRootMembers) {
                    if (child is ScrollPanel) {
                        renderedChildren.add(child._nativeInstance);
                        recurse.add(child);
                    } else if (child is Panel) {
                        viewRootMembers.concat(child._children);
                    } else {
                        renderedChildren.add(child._nativeInstance);
                    }
                }
                $$lib_nori_ensureParentLinkOrder(viewRoot._nativeInstance, renderedChildren);

                viewRootMembers.clear();
                renderedChildren.clear();
            }
        }

        function setSize(width, height) {
            this._properties[WindowProperties.SIZE][0] = width;
            this._properties[WindowProperties.SIZE][1] = height;
            if (this._nativeInstance != null) {
                this._invalidate(WindowProperties.SIZE);
            }
            this._updateLayout();
            return this;
        }

        function setWidth(width) {
            return this.setSize(width, this._properties[WindowProperties.SIZE][1]);
        }

        function setHeight(height) {
            return this.setSize(this._properties[WindowProperties.SIZE][0], height);
        }

        function setContent(element) {
            if (this._root._children.length > 0) {
                this._root.clearChildren();
            }
            this._root.addChild(element);
            return this;
        }
    }
}
