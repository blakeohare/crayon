/*
    args[0] -> (int) type ID
    args[1] -> (ObjectInstance) native element
    args[2] -> (List<various>) property values
*/
Value lib_nori_instantiateElement(VmContext vm, Array<Value> args) {
    int type = (int) args[0].internalValue;
    ObjectInstance o = (ObjectInstance) args[1].internalValue;
    o.nativeData = new Array<object>(1);
    ListImpl properties = (ListImpl) args[2].internalValue;
    int x = 0;
    int y = 0;
    int width = 0;
    int height = 0;

    if (getItemFromList(properties, 0).type == Types.INTEGER) {
        x = (int) getItemFromList(properties, 0).internalValue;
        y = (int) getItemFromList(properties, 1).internalValue;
        width = (int) getItemFromList(properties, 4).internalValue;
        height = (int) getItemFromList(properties, 5).internalValue;
    }

    // TODO: use a single reusable instance with an update mask
    // Also define property masks on a per-type basis
    ElementProperties unboxed = new ElementProperties(
        x,
        y,
        width,
        height,
        0, // red
        0, // green
        0, // blue
        255, // alpha
        "");

    if (getItemFromList(properties, 16).type == Types.LIST) {
        ListImpl bgColor = (ListImpl) getItemFromList(properties, 16).internalValue;
        unboxed.bg_red = (int) getItemFromList(bgColor, 0).internalValue;
        unboxed.bg_green = (int) getItemFromList(bgColor, 1).internalValue;
        unboxed.bg_blue = (int) getItemFromList(bgColor, 2).internalValue;
        unboxed.bg_alpha = (int) getItemFromList(bgColor, 3).internalValue;
    }

    if (getItemFromList(properties, 21).type == Types.STRING) {
        unboxed.misc_string_0 = (string) getItemFromList(properties, 21).internalValue;
    }

    o.nativeData[0] = Native._lib_nori_instantiateElement(type, unboxed);

    return vm.globalNull;
}
