
let getWindowSize;
let platformSpecificHandleEvent;

(() => {

window.addEventListener('load', () => {

	let ci = C$interop$getInteropObj();

	ci.msghubRegisterConsumer(hub => {
		const { listen, send } = hub;

		platformSpecificHandleEvent = (id, eventName, args) => {
			let msg = { type: 'E', id, eventName, arg: args };
			send('u3events', [msg]);
		};

		listen('u3data', (request, cb) => {
			flushUpdates(request.buffer);
			cb();
		});

		listen('u3init', (request, cb) => {
			document.body.style.margin = '0px';
			let u3hostOuter = document.getElementById('crayon_host');
			let sOuter = u3hostOuter.style;
			sOuter.width = '100%';
			sOuter.height = '100%';
			sOuter.overflow = 'hidden';

			let stretchToFill = !request.keepAspectRatio;

			let u3hostInner = document.createElement('div');
			u3hostOuter.append(u3hostInner);
			let sInner = u3hostInner.style;
			sInner.overflow = 'hidden';
			let requestedWidth = Math.max(1, request.width);
			let requestedHeight = Math.max(1, request.height);
			let requestedRatio = requestedWidth / requestedHeight;
			sOuter.position = 'absolute';
			sInner.position = 'absolute';

			let syncSize = () => {
				let actualWidth = window.innerWidth;
				let actualHeight = window.innerHeight;
				if (stretchToFill) {
					return {
						outer: [actualWidth, actualHeight],
						inner: [actualWidth, actualHeight],
					};
				}
				let actualRatio = actualWidth / actualHeight;
				let innerWidth, innerHeight;
				if (actualRatio >= requestedRatio) {
					// vertical black bars
					innerHeight = actualHeight;
					innerWidth = Math.floor(innerHeight * requestedRatio);
				} else {
					// horizontal black bars
					innerWidth = actualWidth;
					innerHeight = Math.floor(innerWidth / requestedRatio);
				}

				return {
					outer: [actualWidth, actualHeight],
					inner: [innerWidth, innerHeight],
				};
			};
			let setSize = () => {
				let sz = syncSize();
				sInner.left = (sz.outer[0] - sz.inner[0]) / 2 + 'px';
				sInner.top = (sz.outer[1] - sz.inner[1]) / 2 + 'px';
				sInner.width = sz.inner[0] + 'px';
				sInner.height = sz.inner[1] + 'px';
			};
			window.addEventListener('resize', setSize);
			setSize();

			getWindowSize = () => syncSize().inner;

			noriInit(
				u3hostInner, 
				request.initialData, 
				() => { cb(true); }, 
				data => { send('u3batch', data); });
		});

	});
	
});

})();
