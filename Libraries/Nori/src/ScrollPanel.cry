import Math;

namespace Nori {

    const ScrollPanel_XMode = 'scroll.x';
    const ScrollPanel_YMode = 'scroll.y';
    const ScrollPanel_ScrollToX = 'scroll.gox';
    const ScrollPanel_ScrollToY = 'scroll.goy';

    enum ScrollMode {
        NONE = 0,
        AUTO = 1,
        SCROLL = 2,
        CROP = 3,
    }

    class ScrollPanel : Panel {
        constructor() : base('ScrollPanel', true) {
            this.setXScrollMode(ScrollMode.NONE)
                .setYScrollMode(ScrollMode.AUTO);
        }

        function getXScrollMode() { return this._getIntProperty(ScrollPanel_XMode); }
        function setXScrollMode(value) { return this._setEnumProperty(ScrollPanel_XMode, value, 0, 3); }

        function getYScrollMode() { return this._getIntProperty(ScrollPanel_YMode); }
        function setYScrollMode(value) { return this._setEnumProperty(ScrollPanel_YMode, value, 0, 3); }

        function setAttributeWithString(name, strValue) {
            switch (name) {
                case 'xScroll':
                case 'yScroll':
                    // I keep making this error so may as well just make it work
                    strValue = strValue.lower();
                    if (strValue == 'true') strValue = 'scroll';
                    else if (strValue == 'false') strValue = 'crop';

                    return this._setEnumWithString(name == 'xScroll' ? ScrollPanel_XMode : ScrollPanel_YMode, strValue);
                default: return base.setAttributeWithString(name, strValue);
            }
        }

        function scrollX(percent) { return this._scrollTo(ScrollPanel_ScrollToX, percent); }
        function scrollY(percent) { return this._scrollTo(ScrollPanel_ScrollToY, percent); }

        field _scrollCounter = 1; // prevents old instructions from getting executed multiple times
        function _scrollTo(k, percent) {
            value = Math.floor(Math.ensureRange(percent, 0, 1) * 2000000000);
            return this._setStringProperty(k, '%,' + value + ',' + this._scrollCounter++);
        }

        function scrollIntoView(e) {
            walker = e.getParent();
            isParent = false;
            while (walker != null) {
                if (walker == this) {
                    isParent = true;
                    break;
                }
                walker = walker.getParent();
            }
            if (!isParent) throw new InvalidArgumentException("Cannot scroll element not inside the ScrollPanel.");

            return this._setStringProperty(ScrollPanel_ScrollToY, 'V,' + e._id + ',' + this._scrollCounter++);
        }

        function scrollToTop() { return this._scrollImpl('E', 'N', 0); }
        function scrollToBottom() { return this._scrollImpl('E', 'S', 0); }
        function scrollToLeft() { return this._scrollImpl('E', 'W', 0); }
        function scrollToRight() { return this._scrollImpl('E', 'E', 0); }

        function _scrollImpl(type, dir, amt) {
            if (this._frame != null) {
                this._frame._queuedCommandsWireData.add('SC', this._id, type, dir, amt);
            }
            return this;
        }
    }
}
