using System;
using System.Collections.Generic;
using System.Linq;

namespace Interpreter.Vm
{
    public class LibraryRegistry
    {
        public void LoadAssembly(string name, string version, string startupFunction)
        {
            // TODO: load a DLL once they are split out.

            TranslationHelper.runAssemblyStartupFunction(name, startupFunction);
        }

        public LibraryRegistry(Dictionary<string, string> libraryVersions)
        {
            foreach (string libraryName in libraryVersions.Keys.OrderBy(n => n))
            {
                string libraryVersion = libraryVersions[libraryName];
                string crayonHome = System.Environment.GetEnvironmentVariable("CRAYON_HOME");
                string dllFile = System.IO.Path.Combine(crayonHome, "vm", libraryName + ".dll");

                if (!System.IO.File.Exists(dllFile)) continue;

                System.Reflection.Assembly asm = System.Reflection.Assembly.LoadFrom(dllFile);

                // TODO: compare assembly reported version against required version.

                foreach (Type type in asm.GetTypes().Where(t => t.Name == "LibraryWrapper"))
                {
                    string[] namespaceComponents = type.FullName.Split('.');
                    if (namespaceComponents.Length > 2 && namespaceComponents[1] == "Libraries")
                    {
                        RegisterLibraryMethodResolver(type);
                    }
                }
            }
        }

        private static void RegisterLibraryMethodResolver(Type libraryType)
        {
            TranslationHelper.RegisterFunctionPointerResolver((string funcName) =>
            {
                string name = funcName.Split(',')[1];

                // TODO: figure out why GetMethod() is not working directly
                System.Reflection.MethodInfo methodInfo = libraryType.GetMethods().Where(m => m.Name == name).FirstOrDefault();
                if (methodInfo == null) return null;
                Func<Interpreter.Structs.VmContext, Interpreter.Structs.Value[], Interpreter.Structs.Value> output = (Interpreter.Structs.VmContext vm, Interpreter.Structs.Value[] args) =>
                {
                    return (Interpreter.Structs.Value)methodInfo.Invoke(null, new object[] { vm, args });
                };
                return output;
            });
        }
    }
}
