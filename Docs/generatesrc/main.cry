import FileIO;
import Xml;

function getAllXml(docsRoot) {
	output = {};
	getAllXmlImpl(docsRoot, 'libs', output);
	return output;
}

function getAllXmlImpl(root, relativePath, output) {
	currentPath = root + '/' + relativePath;
	for (file : FileIO.directoryList(currentPath)) {
		fullpath = currentPath + '/' + file;
		if (FileIO.directoryExists(fullpath)) {
			getAllXmlImpl(root, currentPath, output);
		} else if (file.endsWith('.xml')) {
			output[fullpath] = relativePath + '/' + file;
		}
	}
}

function normalizePath(path) {
	parts = path.replace('\\', '/').split('/');
	output = [];
	for (part : parts) {
		if (part == '..') {
			if (output.length > 0 && output[-1] != '..') {
				output.pop();
			} else {
				output.add('..');
			}
		} else if (part == '.') {
			// nothing
		} else {
			output.add(part);
		}
	}
	return output.join('/');
}

function main() {
	docsRoot = FileIO.currentDirectory();

	// mapping of full path to relative paths
	xmlFiles = getAllXml(docsRoot);
	fullpaths = xmlFiles.keys();
	fullpaths.sort();

	inputPaths = [];
	outputPaths = [];
	for (file : fullpaths) {
		inputPaths.add(file);
		outputPaths.add('htmlout/' + file[:-'.xml'.length] + '.html');
	}

	librariesDir = normalizePath(docsRoot + '/../Libraries');
	for (libname : FileIO.directoryList(librariesDir)) {
		docsFile = librariesDir + '/' + libname + '/docs.xml';
		if (FileIO.fileExists(docsFile)) {
			outputPaths.add('htmlout/libs/' + libname + '.html');
			inputPaths.add(docsFile);
		}
	}

	for (i = 0; i < inputPaths.length; ++i) {
		file = inputPaths[i];
		outputPath = outputPaths[i];
		xml = FileIO.fileReadText(file);
		doc = Xml.parse(xml);
		docTree = adaptXml(doc);
		
		html = generateDocumentationHtml(docTree);
		print("Generating " + outputPath + "...");
		FileIO.fileWriteText(outputPath, html);
	}
}
