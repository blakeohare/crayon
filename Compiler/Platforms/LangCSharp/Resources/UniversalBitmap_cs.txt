using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace Interpreter
{
    public class UniversalBitmap
    {
        private System.Drawing.Bitmap internalBitmap;

        private DrawingSession activeDrawingSession = null;
        private BitLockSession activeBitLockSession = null;

        public int GlTextureId { get; set; }

        public int Width { get; private set; }
        public int Height { get; private set; }
        public bool IsValid { get; private set; }

        public bool IsCairo
        {
            get
            {
                return false;
            }
        }

        private static readonly HashSet<UniversalBitmap> allBitmaps = new HashSet<UniversalBitmap>();

        private void RegisterThis()
        {
            allBitmaps.Add(this);
        }

        public static void EnsureAllFreed()
        {
            if (allBitmaps.Count > 0)
            {
                foreach (UniversalBitmap bmp in allBitmaps.ToArray())
                {
                    bmp.Free();
                }
            }
        }

        public void Free()
        {
            this.internalBitmap.Dispose();
            allBitmaps.Remove(this);
        }

        public UniversalBitmap(byte[] bytes)
        {
            RegisterThis();
            this.IsValid = true;

            try
            {
                this.internalBitmap = (System.Drawing.Bitmap)System.Drawing.Image.FromStream(new System.IO.MemoryStream(bytes));
            }
            catch (ArgumentException)
            {
                this.IsValid = false;
            }
            this.Width = this.internalBitmap.Width;
            this.Height = this.internalBitmap.Height;

            if (this.internalBitmap.PixelFormat != System.Drawing.Imaging.PixelFormat.Format32bppArgb)
            {
                System.Drawing.Bitmap newBmp = new System.Drawing.Bitmap(this.Width, this.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
                newBmp.SetResolution(this.internalBitmap.HorizontalResolution, this.internalBitmap.VerticalResolution);
                System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(newBmp);
                g.DrawImage(this.internalBitmap, new System.Drawing.PointF(0, 0));
                g.Flush();
                this.internalBitmap = newBmp;
            }
        }

        private static readonly UniversalBitmap DUMMY_BITMAP = new UniversalBitmap(1, 1);

        public UniversalBitmap(int width, int height)
        {
            RegisterThis();

            this.Width = width;
            this.Height = height;
            this.internalBitmap = new System.Drawing.Bitmap(width, height, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
        }

        public UniversalBitmap(UniversalFont font, char c)
        {
            RegisterThis();

            string text = "" + c;
            DrawingSession session = DUMMY_BITMAP.GetActiveDrawingSession();
            System.Drawing.Graphics graphics = (System.Drawing.Graphics)session.NativeSession;
            System.Drawing.SizeF size = graphics.MeasureString(text, font.NativeFont);
            session.Flush();
            this.Width = (int)System.Math.Ceiling(size.Width);
            this.Height = (int)System.Math.Ceiling(size.Height);
            this.internalBitmap = new System.Drawing.Bitmap(this.Width, this.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
            session = this.GetActiveDrawingSession();
            graphics = (System.Drawing.Graphics)session.NativeSession;
            graphics.DrawString(text, font.NativeFont, System.Drawing.Brushes.White, new System.Drawing.PointF(0, 0));
            session.Flush();

            this.TextAntiAliasingCorrection();
        }

        // Must be in range
        public void GetPixel(int x, int y, int[] colorOut)
        {
            System.Drawing.Color color = this.internalBitmap.GetPixel(x, y);
            colorOut[0] = color.R;
            colorOut[1] = color.G;
            colorOut[2] = color.B;
            colorOut[3] = color.A;
        }

        private void TextAntiAliasingCorrection()
        {
            // Drawing text leaves an anti-alias aura around the characters which is 100% opaque using a black background. This results in
            // an ugly black border around letters that are drawn against non-black backgrounds.
            // Because this is supposed to be RGB(255, 255, 255) with varying values of alpha, go through and set the alpha channel to the
            // value in the red channel, and set all non-alpha channels to 255.

            BitLockSession bitlock = this.GetActiveBitLockSession();
            byte[] pixels = bitlock.GetPixels();
            int length = pixels.Length;
            for (int i = 0; i < length; i += 4)
            {
                pixels[i | 3] = pixels[i | 1];
                pixels[i] = 255;
                pixels[i | 1] = 255;
                pixels[i | 2] = 255;
            }

            bitlock.WritePixels(pixels);
            bitlock.Free();
        }

        public DrawingSession GetActiveDrawingSession()
        {
            if (this.activeDrawingSession == null) this.activeDrawingSession = new DrawingSession(this);
            return this.activeDrawingSession;
        }

        public BitLockSession GetActiveBitLockSession()
        {
            if (this.activeBitLockSession == null) this.activeBitLockSession = new BitLockSession(this);
            return this.activeBitLockSession;
        }

        public static bool IconSupported
        {
            get
            {
                return true;
            }
        }

        public System.Drawing.Icon GenerateIcon()
        {
            return System.Drawing.Icon.FromHandle(this.internalBitmap.GetHicon());
        }

        public byte[] GetBytesAsPng()
        {
            return this.GetBytesImpl("png");
        }

        public byte[] GetBytesAsJpeg()
        {
            return this.GetBytesImpl("jpeg");
        }

        private byte[] GetBytesImpl(string formatStr)
        {
            System.Drawing.Imaging.ImageFormat format;
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            switch (formatStr)
            {
                case "png": format = System.Drawing.Imaging.ImageFormat.Png; break;
                case "jpeg": format = System.Drawing.Imaging.ImageFormat.Jpeg; break;
                default: throw new System.NotImplementedException();
            }
            this.internalBitmap.Save(ms, format);
            return ms.ToArray();
        }

        public static string ToBase64(string prefix, byte[] bytes)
        {
            int[] bitPairs = new int[bytes.Length * 4 + 3];
            int length = bytes.Length;
            char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".ToCharArray();
            System.Text.StringBuilder output = new System.Text.StringBuilder();
            output.Append(prefix);
            int j = 0;
            for (int i = 0; i < length; ++i)
            {
                bitPairs[j] = (bytes[i] >> 6) & 3;
                bitPairs[j | 1] = (bytes[i] >> 4) & 3;
                bitPairs[j | 2] = (bytes[i] >> 2) & 3;
                bitPairs[j | 3] = bytes[i] & 3;
                j += 4;
            }
            length = bitPairs.Length - 3;
            int t;
            for (int i = 0; i < length; i += 3)
            {
                t = (bitPairs[i] << 4) | (bitPairs[i + 1] << 2) | (bitPairs[i + 2]);
                output.Append(alphabet[t]);
            }
            return output.ToString();
        }

        public void SetPixel(int x, int y, int r, int g, int b, int a)
        {
            this.internalBitmap.SetPixel(x, y, System.Drawing.Color.FromArgb(a, r, g, b));
        }

        public class BitLockSession
        {
            private UniversalBitmap bmp;

            private System.Drawing.Imaging.BitmapData internalSession;

            public BitLockSession(UniversalBitmap bmp)
            {
                this.bmp = bmp;
                this.internalSession = bmp.internalBitmap.LockBits(
                    new System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height),
                    System.Drawing.Imaging.ImageLockMode.ReadOnly,
                    System.Drawing.Imaging.PixelFormat.Format32bppArgb);
            }

            public System.IntPtr GetPtr()
            {
                return this.internalSession.Scan0;
            }

            public byte[] GetPixels()
            {
                byte[] pixels = new byte[this.bmp.Width * this.bmp.Height * 4];
                System.Runtime.InteropServices.Marshal.Copy(this.GetPtr(), pixels, 0, pixels.Length);
                return pixels;
            }

            public void WritePixels(byte[] pixels)
            {
                System.Runtime.InteropServices.Marshal.Copy(pixels, 0, this.GetPtr(), this.bmp.Width * this.bmp.Height * 4);
            }

            public void Free()
            {
                this.bmp.internalBitmap.UnlockBits(this.internalSession);
            }
        }

        public class DrawingSession
        {
            private static int activeSessions = 0;

            public UniversalBitmap Bitmap { get; private set; }

            private System.Drawing.Graphics internalSession;

            public object NativeSession
            {
                get
                {
                    return this.internalSession;
                }
            }

            public DrawingSession(UniversalBitmap bmp)
            {
                this.Bitmap = bmp;
                this.ReInitializeHack();
            }

            public DrawingSession Draw(UniversalBitmap bmp, int targetX, int targetY, int sourceX, int sourceY, int width, int height)
            {
                this.internalSession.DrawImage(
                    bmp.internalBitmap,
                    new System.Drawing.Rectangle(targetX, targetY, width, height),
                    new System.Drawing.Rectangle(sourceX, sourceY, width, height),
                    System.Drawing.GraphicsUnit.Pixel);
                return this;
            }

            public void Flush()
            {
                activeSessions--;
                this.internalSession.Flush();
                this.internalSession.Dispose();
                this.Bitmap.activeDrawingSession = null;
            }

            public void ReInitializeHack()
            {
                activeSessions++;
                this.internalSession = System.Drawing.Graphics.FromImage(this.Bitmap.internalBitmap);
            }

            public static void VerifyCleaned()
            {
                if (activeSessions != 0)
                {
                    throw new System.Exception("");
                }
            }
        }
    }
}
