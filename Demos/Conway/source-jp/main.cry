参照 Game;
参照 Graphics2D;
参照 Math;
参照 Random;

定数 FPS = 60;
定数 WIDTH = 50;
定数 HEIGHT = 40;
定数 CELL_SIZE = 16;
定数 SCREEN_WIDTH = CELL_SIZE * WIDTH;
定数 SCREEN_HEIGHT = CELL_SIZE * HEIGHT;

列挙 LocalizationTest {
    FOO = 0,
    BAR = 1,
    ETC = 2,
}

関数 getRandomColor() {
    返す [
        Random.randomInt(170, 255),
        Random.randomInt(40),
        Random.randomInt(30, 70)
    ];
}

関数 開始起点() {
    window = 生成 GameWindow("Conway's Game of Life", FPS, SCREEN_WIDTH, SCREEN_HEIGHT);

    print("Length: " + LocalizationTest.長さ + " Max: " + LocalizationTest.最大 + " Values: " + LocalizationTest.値);

    totalCells = WIDTH * HEIGHT;

    trues = [真] * (totalCells / 3);
    falses = [偽] * (totalCells - trues.length);
    grid = trues + falses;
    grid.shuffle();
    cellPixelX = [];
    反復 (x = 0; x < WIDTH; ++x) {
        cellPixelX.add(x * CELL_SIZE);
    }
    cellPixelY = [];
    反復 (y = 0; y < HEIGHT; ++y) {
        cellPixelY.add(y * CELL_SIZE);
    }

    buffer = [偽] * totalCells;
    neighborsLookup = [];
    indices = [];
    blues = [];
    offsets = [-1, 0, 1];
    反復 (y = 0; y < HEIGHT; ++y) {
        反復 (x = 0; x < WIDTH; ++x) {
            indices.add(indices.length);
            blues.add(getRandomColor());
            neighbors = [];
            反復 (dx : offsets) {
                反復 (dy : offsets) {
                    neighborX = dx + x;
                    neighborY = dy + y;
                    もし (neighborX >= 0 &&
                        neighborY >= 0 &&
                        neighborX < WIDTH &&
                        neighborY < HEIGHT &&
                        (neighborX != x || neighborY != y)) {

                        neighbors.add(neighborX + neighborY * WIDTH);
                    }
                }
            }
            neighborsLookup.add(neighbors);
        }
    }

    lastPosition = -1;
    mousePressed = 偽;

    // Lookup table for what to do if a live cell has n neighbors
    liveTransformationLookup = [偽] * 9; // die unless...
    liveTransformationLookup[2] = 真; // has exactly 2 neighbors
    liveTransformationLookup[3] = 真; // has exactly 3 neighbors

    // Lookup table for what to do if a dead cell has n neighbors
    deadTransformationLookup = [偽] * 9; // stay dead unless...
    deadTransformationLookup[3] = 真; // has exactly 3 neighbors

    間 (真) {
        反復 (event : window.JPpumpEvents()) {
            分岐 (event.種類) {
                場合 EventType.QUIT:
                    返す;

                場合 EventType.MOUSE_MOVE:
                    lastCol = event.x / CELL_SIZE;
                    lastRow = event.y / CELL_SIZE;
                    もし (lastCol >= 0 && lastRow >= 0 && lastCol < WIDTH && lastRow < HEIGHT) {
                        lastPosition = lastCol + lastRow * WIDTH;
                    }
                    抜ける;

                場合 EventType.MOUSE_LEFT_DOWN:
                    mousePressed = 真;
                    抜ける;

                場合 EventType.MOUSE_LEFT_UP:
                    mousePressed = 偽;
                    抜ける;
            }
        }

        もし (lastPosition >= 0) {
            // bring half of the cells in the neighbors lookup for the cursor's position to life.
            neighbors = neighborsLookup[lastPosition];
            neighbors.shuffle();
            反復 (i = 0; i < neighbors.length / 2; ++i) {
                grid[neighbors[i]] = 真;
            }
        }

        // Perform an iteration on the entire grid...
        反復 (index : indices) {
            // Count neighbors
            neighbors = 0;
            反復 (neighborIndex : neighborsLookup[index]) {
                もし (grid[neighborIndex]) {
                    neighbors++;
                }
            }

            // Lookup new state
            buffer[index] = (grid[index]
                ? liveTransformationLookup
                : deadTransformationLookup)[neighbors];
        }

        // swap buffers
        t = buffer;
        buffer = grid;
        grid = t;

        // Draw the grid
        Draw.fill(0, 0, 0);
        index = 0;
        反復 (y : cellPixelY) {
            反復 (x : cellPixelX) {
                もし (grid[index]) {
                    rgb = blues[index];
                    Draw.rectangle(
                        x, y, CELL_SIZE, CELL_SIZE,
                        rgb[0], rgb[1], rgb[2]);
                } あるいは もし (index == lastPosition) {
                    Draw.rectangle(
                        x, y, CELL_SIZE, CELL_SIZE,
                        64, 64, 64);
                }

                ++index;
            }
        }

        window.JPclockTick();
    }
}
