/*
    args[0] -> (int) type
    args[1] -> (Value<ObjectInstance>) nativeInstance of the ui element, guaranteed to be instantiated
    args[2] -> (int<ElementProperty>) property key
    args[3] -> (object) value

*/
VM.Value lib_nori_invalidateElementProperty(VM.VmContext vm, Array<VM.Value> args) {
    // TODO: define struct
    VM.ObjectInstance o = (VM.ObjectInstance) args[1].internalValue;
    object nativeElement = o.nativeData[0];
    int type = (int) args[0].internalValue;
    int key = (int) args[2].internalValue;

    // TODO: make this less ugly.
    // this is weird because Java does weird stuff based on how Value.internalValue is being accessed.
    object value = null;
    VM.Value v = args[3];
    if (v.type == VM.Types.INTEGER) {
        int iValue = (int) v.internalValue;
        value = iValue;
    } else if (v.type == VM.Types.BOOLEAN) {
        bool bValue = (bool) v.internalValue;
        value = bValue;
    } else if (v.type == VM.Types.STRING) {
        string sValue = (string) v.internalValue;
        value = sValue;
    } else if (v.type == VM.Types.LIST) {
        List<VM.Value> lValue = (List<VM.Value>) v.internalValue;
        value = lValue;
    } else {
        value = v.internalValue;
    }

    Extension._lib_nori_invalidateElementProperty(type, nativeElement, key, value);
    return vm.globalNull;
}
