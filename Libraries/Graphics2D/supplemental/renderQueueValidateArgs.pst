Value lib_graphics2d_renderQueueValidateArgs(VmContext vm, Array<Value> args) {
    ObjectInstance o = (ObjectInstance) args[0].internalValue;
    Array<object> drawQueueRawData = o.nativeData;
    Array<int> drawEvents = (Array<int>) drawQueueRawData[0];
    int length = (int) drawQueueRawData[1];
    int r = 0;
    int g = 0;
    int b = 0;
    int a = 0;
    for (int i = 0; i < length; i += 16) {
        switch (drawEvents[i]) {
            case 1:
            case 2:
                r = drawEvents[i | 5];
                g = drawEvents[i | 6];
                b = drawEvents[i | 7];
                a = drawEvents[i | 8];
                if (r > 255) drawEvents[i | 5] = 255; else if (r < 0) drawEvents[i | 5] = 0;
                if (g > 255) drawEvents[i | 6] = 255; else if (g < 0) drawEvents[i | 6] = 0;
                if (b > 255) drawEvents[i | 7] = 255; else if (b < 0) drawEvents[i | 7] = 0;
                if (a > 255) drawEvents[i | 8] = 255; else if (a < 0) drawEvents[i | 8] = 0;
                break;
            case 3:
                r = drawEvents[i | 6];
                g = drawEvents[i | 7];
                b = drawEvents[i | 8];
                a = drawEvents[i | 9];
                if (r > 255) drawEvents[i | 6] = 255; else if (r < 0) drawEvents[i | 6] = 0;
                if (g > 255) drawEvents[i | 7] = 255; else if (g < 0) drawEvents[i | 7] = 0;
                if (b > 255) drawEvents[i | 8] = 255; else if (b < 0) drawEvents[i | 8] = 0;
                if (a > 255) drawEvents[i | 9] = 255; else if (a < 0) drawEvents[i | 9] = 0;
                break;
            case 4:
                r = drawEvents[i | 7];
                g = drawEvents[i | 8];
                b = drawEvents[i | 9];
                a = drawEvents[i | 10];
                if (r > 255) drawEvents[i | 7] = 255; else if (r < 0) drawEvents[i | 7] = 0;
                if (g > 255) drawEvents[i | 8] = 255; else if (g < 0) drawEvents[i | 8] = 0;
                if (b > 255) drawEvents[i | 9] = 255; else if (b < 0) drawEvents[i | 9] = 0;
                if (a > 255) drawEvents[i | 10] = 255; else if (a < 0) drawEvents[i | 10] = 0;
                break;
            case 5:
                r = drawEvents[i | 9];
                g = drawEvents[i | 10];
                b = drawEvents[i | 11];
                a = drawEvents[i | 12];
                if (r > 255) drawEvents[i | 9] = 255; else if (r < 0) drawEvents[i | 9] = 0;
                if (g > 255) drawEvents[i | 10] = 255; else if (g < 0) drawEvents[i | 10] = 0;
                if (b > 255) drawEvents[i | 11] = 255; else if (b < 0) drawEvents[i | 11] = 0;
                if (a > 255) drawEvents[i | 12] = 255; else if (a < 0) drawEvents[i | 12] = 0;
                break;

            // Since all image events are injected by trusted code, do not bother.
            // If the events are injected by some other means, then the user is asking for trouble anyway.
            // case 6: break;

            case 8:
                r = drawEvents[i | 10];
                g = drawEvents[i | 11];
                b = drawEvents[i | 12];
                a = drawEvents[i | 13];
                if (r > 255) drawEvents[i | 10] = 255; else if (r < 0) drawEvents[i | 10] = 0;
                if (g > 255) drawEvents[i | 11] = 255; else if (g < 0) drawEvents[i | 11] = 0;
                if (b > 255) drawEvents[i | 12] = 255; else if (b < 0) drawEvents[i | 12] = 0;
                if (a > 255) drawEvents[i | 13] = 255; else if (a < 0) drawEvents[i | 13] = 0;
                break;
        }
    }
    return vm.globalNull;
}
