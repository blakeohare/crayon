import MessageHub;
import ProcessUtil;
import Environment;

namespace U3Direct {

    enum WindowMode {
        GRAPHICS,
        UI,
    }

    class U3Window {
        field _hub;

        constructor(eventListener) {
            this._hub = new Hub();
            isDebug = $var['CRAYON_LIB_MESSAGE_HUB_DEBUG_MODE'] == true;
            if (isDebug) {
                this._hub.setDebugOverrideToken('u3debug');
            } else {
                this._hub.setDesktopInitializer(token => {
                    currentProcessId = 0; // TODO: include the current process ID as an arg
                    cryHome = Environment.getEnvironmentVariable('CRAYON_HOME');
                    if (cryHome == null) throw new Exception("CRAYON_HOME not set.");
                    u3Executable = cryHome + '\\u3\\u3window.exe'; // TODO: check platform first
                    args = [
                        '--u3:token', token,
                        '--u3:pid', currentProcessId + ''
                    ];
                    p = new Process()
                        .setExecutable(Environment.replaceEnvironmentVariables(u3Executable))
                        .setArgs(args);
                    p.launchAsync(_ => {});
                });
            }

            this._hub.listen('u3events', (msgs, cb) => {
                for (msg : msgs) {
                    eventType = msg['eventName'];
                    id = msg['id'];
                    arg = msg['arg'];
                    eventListener(eventType, id, arg);
                }
            });
        }

        function show(title, width, height, initialData, isBlocking) {

            setupComplete = false;
            this._hub.setOnReady(() => {
                this._hub.send('u3init', {
                    "title": title,
                    "width": width,
                    "height": height,
                    "initialData": initialData,
                }, (_) => {
                    setupComplete = true;
                });
            });

            if (isBlocking) {
                this._hub.startBlocking();
            } else {
                this._hub.start();
                while (!setupComplete && this._hub._isRunning) {
                    Core.sleep(0.005);
                }
            }
            return this;
        }

        function sendData(items) {
            this._hub.send('u3data', { "buffer": items });
            return this;
        }

        function sendCanvasData(id, items) {
            return this.sendData(['CV', id, items.length] + items);
        }

        function close() {
            this._hub.send('u3close', {});
            return this;
        }
    }
}
