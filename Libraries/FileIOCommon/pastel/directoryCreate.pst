/*
    Create a directory

    arg 1: disk host object
    arg 2: well-formed and sandboxed path
    arg 3: boolean
        true -> create all parent directories if they don't currently exist
        false -> fail if the parent directory does not exist
*/
VM.Value lib_fileiocommon_directoryCreate(VM.VmContext vm, Array<VM.Value> args) {
    bool bool1 = false;
    int i = 0;
    int int1 = 0;
    List<string> stringList1 = null;
    VM.Value hostObject = args[0];
    string path = (string) args[1].internalValue;
    if ((bool) args[2].internalValue) {
        int1 = 0;
        if (!Native._lib_fileiocommon_directoryExists(lib_fileiocommon_getDiskObject(hostObject), Native._lib_fileiocommon_getDirRoot(path))) {
            int1 = 4;
        } else {
            stringList1 = new List<string>();
            bool1 = true;
            while (bool1 && !Native._lib_fileiocommon_directoryExists(lib_fileiocommon_getDiskObject(hostObject), path)) {
                stringList1.Add(path);
                int1 = Native._lib_fileiocommon_getDirParent(path, Core.StringBuffer16);
                path = Core.StringBuffer16[0];
                if (int1 != 0) {
                    bool1 = false;
                }
            }
            if (bool1) {
                for (i = stringList1.Size() - 1; i >= 0; i -= 1) {
                    path = stringList1[i];
                    int1 = Native._lib_fileiocommon_directoryCreate(lib_fileiocommon_getDiskObject(hostObject), path);
                    if (int1 != 0) {
                        i = -1;
                    }
                }
            }
        }
    } else {
        int1 = Native._lib_fileiocommon_directoryCreate(lib_fileiocommon_getDiskObject(hostObject), path);
    }
    return VM.buildInteger(vm.globals, int1);
}
