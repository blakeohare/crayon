if (argCount != 1) {
    hasInterrupt = EX_InvalidArgument(ec, primitiveMethodWrongArgCountError("list map method", 1, argCount));
} else {
    value2 = funcArgs[0];
    if (value2.type != Types.FUNCTION) {
        hasInterrupt = EX_InvalidArgument(ec, "list map method requires a function pointer as its argument.");
    } else {
        // TODO: consider checking arg length?

        primitiveMethodToCoreLibraryFallback = true;
        functionId = p.primitiveMethodFunctionIdFallbackLookup[1]; // MAGIC NUMBER: 1 (see metadata initializer)
        funcArgs[1] = value; // funcArgs is allocated very big.
        argCount = 2;

        output = null; // This is required. Triggers function fallback.
    }
}
