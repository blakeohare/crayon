string valueToString(Value wrappedValue) {
    int type = wrappedValue.type;
    if (type == Types.NULL) {
        return "null";
    }
    if (type == Types.BOOLEAN) {
        if (((bool) wrappedValue.internalValue)) {
            return "true";
        }
        return "false";
    }
    if (type == Types.FLOAT) {
        string floatStr = Core.FloatToString(((double) wrappedValue.internalValue));
        if (!floatStr.Contains(".")) {
            Core.StringAppend(floatStr, ".0");
        }
        return floatStr;
    }
    if (type == Types.INTEGER) {
        return Core.IntToString(((int) wrappedValue.internalValue));
    }
    if (type == Types.STRING) {
        return ((string) wrappedValue.internalValue);
    }
    if (type == Types.LIST) {
        List<Value> internalList = ((List<Value>) wrappedValue.internalValue);
        string output = "[";
        for (int i = 0; i < internalList.Size(); i += 1) {
            if (i > 0) {
                Core.StringAppend(output, ", ");
            }
            Core.StringAppend(output, valueToString(internalList[i]));
        }
        Core.StringAppend(output, "]");
        return output;
    }
    if (type == Types.INSTANCE) {
        ObjectInstance objInstance = ((ObjectInstance) wrappedValue.internalValue);
        int classId = objInstance.classId;
        int ptr = objInstance.objectId;
        ProgramData pd = Core.GetProgramData();
        ClassInfo classInfo = pd.classTable[classId];
        int nameId = classInfo.nameId;
        string className = pd.identifiers[nameId];
        return Core.StringConcatAll("Instance<", className, "#", Core.IntToString(ptr), ">");
    }
    if (type == Types.DICTIONARY) {
        DictImpl internalDict = ((DictImpl) wrappedValue.internalValue);
        int size = internalDict.size;
        if (size == 0) {
            return "{}";
        }
        string output = "{";
        if (internalDict.keyType == Types.INTEGER) {
            Array<int> intKeys = internalDict.keyIntLookup.Keys();
            int intKey = 0;
            for (int i = 0; i < size; i += 1) {
                if (i > 0) {
                    Core.StringAppend(output, ", ");
                } else {
                    Core.StringAppend(output, " ");
                }
                intKey = intKeys[i];
                Core.StringAppend(output, Core.StringConcatAll(Core.IntToString(intKey), ": ", valueToString(internalDict.valueIntLookup[intKey])));
            }
        } else {
            Array<string> stringKeys = internalDict.keyStringLookup.Keys();
            string stringKey = "";
            for (int i = 0; i < size; i += 1) {
                if (i > 0) {
                    Core.StringAppend(output, ", ");
                } else {
                    Core.StringAppend(output, " ");
                }
                stringKey = stringKeys[i];
                Core.StringAppend(output, Core.StringConcatAll(stringKey, ": ", valueToString(internalDict.valueStringLookup[stringKey])));
            }
        }
        Core.StringAppend(output, " }");
        return output;
    }
    return Core.StringConcatAll("TODO: toString for ", getTypeFromId(type));
}

int initialize_constant_values() {
    int i = 0;
    for (i = 2; i < INTEGER_POSITIVE_CACHE_SIZE; i += 1) {
        INTEGER_POSITIVE_CACHE[i] = new Value(Types.INTEGER, i);
    }
    for (i = 2; i < INTEGER_NEGATIVE_CACHE_SIZE; i += 1) {
        INTEGER_NEGATIVE_CACHE[i] = new Value(Types.INTEGER, -i);
    }
    INTEGER_POSITIVE_CACHE[0] = VALUE_INT_ZERO;
    INTEGER_POSITIVE_CACHE[1] = VALUE_INT_ONE;
    INTEGER_NEGATIVE_CACHE[0] = VALUE_INT_ZERO;
    INTEGER_NEGATIVE_CACHE[1] = VALUE_INT_NEG_ONE;
    return 0;
}

Value buildInteger(int num) {
    if (num < 0) {
        if (num > -INTEGER_NEGATIVE_CACHE_SIZE) {
            return INTEGER_NEGATIVE_CACHE[-num];
        }
    } else {
        if (num < INTEGER_POSITIVE_CACHE_SIZE) {
            return INTEGER_POSITIVE_CACHE[num];
        }
    }
    return new Value(Types.INTEGER, num);
}

Value buildString(string s) {
    if (s.Size() == 0) {
        return VALUE_EMPTY_STRING;
    }
    return new Value(Types.STRING, s);
}

Value buildBoolean(bool value) {
    if (value) {
        return VALUE_TRUE;
    }
    return VALUE_FALSE;
}

Value buildFloat(double value) {
    if (value == 0.0) {
        return VALUE_FLOAT_ZERO;
    }
    if (value == 1.0) {
        return VALUE_FLOAT_ONE;
    }
    return new Value(Types.FLOAT, value);
}

int doEqualityComparisonAndReturnCode(Value a, Value b) {
    int leftType = a.type;
    int rightType = b.type;
    if (leftType == rightType) {
        if (@ext_boolean("IS_PYTHON")) {
            if (leftType < Types.LIST) {
                if (a.internalValue == b.internalValue) {
                    return 1;
                }
                return 0;
            }
        }
        int output = 0;
        switch (leftType) {
            case Types.NULL:
                output = 1;
                break;
            case Types.INTEGER:
                if (((int) a.internalValue) == ((int) b.internalValue)) {
                    output = 1;
                }
                break;
            case Types.FLOAT:
                if (((double) a.internalValue) == ((double) b.internalValue)) {
                    output = 1;
                }
                break;
            case Types.BOOLEAN:
                if (((bool) a.internalValue) == ((bool) b.internalValue)) {
                    output = 1;
                }
                break;
            case Types.STRING:
                if (@ext_boolean("IS_JAVA")) {
                    if (Core.StringEquals(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else {
                    if (((string) a.internalValue) == ((string) b.internalValue)) {
                        output = 1;
                    }
                }
                break;
            case Types.LIST:
                if (@ext_boolean("IS_PYTHON") || @ext_boolean("IS_RUBY")) {
                    if (Core.StrongReferenceEquality(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else {
                    if (a.internalValue == b.internalValue) {
                        output = 1;
                    }
                }
                break;
            case Types.DICTIONARY:
                if (@ext_boolean("IS_PYTHON") || @ext_boolean("IS_RUBY")) {
                    if (Core.StrongReferenceEquality(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else {
                    if (a.internalValue == b.internalValue) {
                        output = 1;
                    }
                }
                break;
            case Types.INSTANCE:
                if (@ext_boolean("IS_PYTHON") || @ext_boolean("IS_RUBY")) {
                    if (Core.StrongReferenceEquality(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else {
                    if (a.internalValue == b.internalValue) {
                        output = 1;
                    }
                }
                break;
            case Types.FUNCTION:
                FunctionPointer f1 = ((FunctionPointer) a.internalValue);
                FunctionPointer f2 = ((FunctionPointer) b.internalValue);
                if (f1.functionId == f2.functionId) {
                    if ((f1.type == FunctionPointerType.METHOD) || (f1.type == FunctionPointerType.PRIMITIVE_METHOD)) {
                        if (doEqualityComparisonAndReturnCode(f1.context, f2.context) == 1) {
                            output = 1;
                        }
                    } else {
                        output = 1;
                    }
                }
                break;
            case Types.CLASS:
                ClassValue c1 = ((ClassValue) a.internalValue);
                ClassValue c2 = ((ClassValue) b.internalValue);
                if (c1.classId == c2.classId) {
                    output = 1;
                }
                break;
            default:
                output = 2;
                break;
        }
        return output;
    }
    if (rightType == Types.NULL) {
        return 0;
    }
    if ((leftType == Types.INTEGER) && (rightType == Types.FLOAT)) {
        if (((int) a.internalValue) == ((double) b.internalValue)) {
            return 1;
        }
    } else {
        if ((leftType == Types.FLOAT) && (rightType == Types.INTEGER)) {
            if (((double) a.internalValue) == ((int) b.internalValue)) {
                return 1;
            }
        }
    }
    return 0;
}

Value buildList(List<Value> valueList) {
    return new Value(Types.LIST, valueList);
}

Value buildDictionary(Array<string> keys, Array<Value> values) {
    Dictionary<string, Value> keyLookup = new Dictionary<string, Value>();
    Dictionary<string, Value> valueLookup = new Dictionary<string, Value>();
    int i = keys.Size() - 1;
    string key = null;
    Value keyValue = null;
    while (i >= 0) {
        key = keys[i];
        keyValue = new Value(Types.STRING, key);
        keyLookup[key] = keyValue;
        valueLookup[key] = values[i];
        i -= 1;
    }
    return new Value(Types.DICTIONARY, new DictImpl(new Dictionary<int, Value>(), new Dictionary<int, Value>(), keyLookup, valueLookup, keyLookup.Size(), Types.STRING));
}

PlatformRelayObject buildRelayObj(int type, int iarg1, int iarg2, int iarg3, double farg1, string sarg1) {
    return new PlatformRelayObject(type, iarg1, iarg2, iarg3, farg1, sarg1);
}

Value buildCommonString(string s) {
    if (!COMMON_STRINGS.Contains(s)) {
        Value value = buildString(s);
        COMMON_STRINGS[s] = value;
    }
    return COMMON_STRINGS[s];
}

Value multiplyString(Value strValue, string str, int n) {
    if (n <= 2) {
        if (n == 1) {
            return strValue;
        }
        if (n == 2) {
            return buildString(Core.StringConcatAll(str, str));
        }
        return VALUE_EMPTY_STRING;
    }
    List<string> builder = new List<string>();
    while (n > 0) {
        n -= 1;
        builder.Add(str);
    }
    str = builder.Join("");
    return buildString(str);
}

string stringDecode(string encoded) {
    if (!encoded.Contains("%")) {
        int length = encoded.Size();
        char per = "%"[0];
        List<string> builder = new List<string>();
        for (int i = 0; i < length; i += 1) {
            char c = encoded[i];
            if ((c == per) && ((i + 2) < length)) {
                builder.Add(stringFromHex(Core.StringConcatAll("", Core.CharToString(encoded[(i + 1)]), Core.CharToString(encoded[(i + 2)]))));
            } else {
                builder.Add(Core.StringConcatAll("", Core.CharToString(c)));
            }
        }
        return builder.Join("");
    }
    return encoded;
}

string stringFromHex(string encoded) {
    encoded = encoded.ToUpper();
    string hex = "0123456789ABCDEF";
    List<string> output = new List<string>();
    int length = encoded.Size();
    int a = 0;
    int b = 0;
    string c = null;
    for (int i = 0; (i + 1) < length; i += 2) {
        c = Core.StringConcatAll("", Core.CharToString(encoded[i]));
        a = hex.IndexOf(c);
        if (a == -1) {
            return null;
        }
        c = Core.StringConcatAll("", Core.CharToString(encoded[(i + 1)]));
        b = hex.IndexOf(c);
        if (b == -1) {
            return null;
        }
        a = (a * 16) + b;
        output.Add(Core.CharToString(Core.Chr(a)));
    }
    return output.Join("");
}

DictImpl cloneDictionary(DictImpl original, DictImpl clone) {
    Dictionary<int, Value> keyIntLookup_clone = null;
    Dictionary<int, Value> valueIntLookup_clone = null;
    Dictionary<string, Value> keyStringLookup_clone = null;
    Dictionary<string, Value> valueStringLookup_clone = null;
    if (clone == null) {
        keyIntLookup_clone = new Dictionary<int, Value>();
        valueIntLookup_clone = new Dictionary<int, Value>();
        keyStringLookup_clone = new Dictionary<string, Value>();
        valueStringLookup_clone = new Dictionary<string, Value>();
        clone = new DictImpl(keyIntLookup_clone, valueIntLookup_clone, keyStringLookup_clone, valueStringLookup_clone, 0, original.keyType);
    } else {
        keyIntLookup_clone = clone.keyIntLookup;
        valueIntLookup_clone = clone.valueIntLookup;
        keyStringLookup_clone = clone.keyStringLookup;
        valueStringLookup_clone = clone.valueStringLookup;
    }
    int i = 0;
    int iKey = 0;
    string sKey = null;
    Array<int> intKeys = original.keyIntLookup.Keys();
    Array<string> stringKeys = original.keyStringLookup.Keys();
    for (i = intKeys.Size() - 1; i >= 0; i -= 1) {
        iKey = intKeys[i];
        keyIntLookup_clone[iKey] = original.keyIntLookup[iKey];
        valueIntLookup_clone[iKey] = original.valueIntLookup[iKey];
    }
    for (i = stringKeys.Size() - 1; i >= 0; i -= 1) {
        sKey = stringKeys[i];
        keyStringLookup_clone[sKey] = original.keyStringLookup[sKey];
        valueStringLookup_clone[sKey] = original.valueStringLookup[sKey];
    }
    clone.size = keyStringLookup_clone.Size() + keyIntLookup_clone.Size();
    return clone;
}

int sortLists(List<Value> keyList, List<Value> parallelList, Array<int> intOutParam) {
    Core.IntBuffer16[0] = 0;
    int length = keyList.Size();
    if (length < 2) {
        return 0;
    }
    int i = 0;
    Value item = keyList[0];
    bool isString = item.type == Types.STRING;
    Array<string> stringKeys = null;
    Array<double> numKeys = null;
    if (isString) {
        stringKeys = new Array<string>(length);
    } else {
        numKeys = new Array<double>(length);
    }
    for (i = keyList.Size() - 1; i >= 0; i -= 1) {
        item = keyList[i];
        switch (item.type) {
            case Types.INTEGER:
                if (isString) {
                    Core.IntBuffer16[0] = 1;
                    return 0;
                }
                numKeys[i] = ((double) ((int) item.internalValue));
                break;
            case Types.FLOAT:
                if (isString) {
                    Core.IntBuffer16[0] = 1;
                    return 0;
                }
                numKeys[i] = ((double) item.internalValue);
                break;
            case Types.STRING:
                if (!isString) {
                    Core.IntBuffer16[0] = 1;
                    return 0;
                }
                stringKeys[i] = ((string) item.internalValue);
                break;
            default:
                Core.IntBuffer16[0] = 1;
                return 0;
        }
    }
    qsortHelper(stringKeys, numKeys, parallelList, isString, 0, length - 1);
    return 0;
}

int qsortHelper(Array<string> keyStringList, Array<double> keyNumList, List<Value> parallelList, bool isString, int startIndex, int endIndex) {
    if ((endIndex - startIndex) <= 0) {
        return 0;
    }
    if ((endIndex - startIndex) == 1) {
        if (sortHelperIsRevOrder(keyStringList, keyNumList, isString, startIndex, endIndex)) {
            sortHelperSwap(keyStringList, keyNumList, parallelList, isString, startIndex, endIndex);
        }
        return 0;
    }
    int mid = (endIndex + startIndex) >> 1;
    sortHelperSwap(keyStringList, keyNumList, parallelList, isString, mid, startIndex);
    int upperPointer = endIndex + 1;
    int lowerPointer = startIndex + 1;
    while (upperPointer > lowerPointer) {
        if (sortHelperIsRevOrder(keyStringList, keyNumList, isString, startIndex, lowerPointer)) {
            lowerPointer += 1;
        } else {
            upperPointer -= 1;
            sortHelperSwap(keyStringList, keyNumList, parallelList, isString, lowerPointer, upperPointer);
        }
    }
    int midIndex = lowerPointer - 1;
    sortHelperSwap(keyStringList, keyNumList, parallelList, isString, midIndex, startIndex);
    qsortHelper(keyStringList, keyNumList, parallelList, isString, startIndex, midIndex - 1);
    qsortHelper(keyStringList, keyNumList, parallelList, isString, midIndex + 1, endIndex);
    return 0;
}

bool sortHelperIsRevOrder(Array<string> keyStringList, Array<double> keyNumList, bool isString, int indexLeft, int indexRight) {
    if (isString) {
        return Core.StringCompareIsReverse(keyStringList[indexLeft], keyStringList[indexRight]);
    }
    return keyNumList[indexLeft] > keyNumList[indexRight];
}

int sortHelperSwap(Array<string> keyStringList, Array<double> keyNumList, List<Value> values, bool isString, int index1, int index2) {
    if (index1 == index2) {
        return 0;
    }
    if (values != null) {
        Value t = values[index1];
        values[index1] = values[index2];
        values[index2] = t;
    }
    if (isString) {
        string s = keyStringList[index1];
        keyStringList[index1] = keyStringList[index2];
        keyStringList[index2] = s;
    } else {
        double n = keyNumList[index1];
        keyNumList[index1] = keyNumList[index2];
        keyNumList[index2] = n;
    }
    return 0;
}

double fixFuzzyFloatPrecision(double x) {
    if ((x % 1) != 0) {
        double u = x % 1;
        if (u < 0) {
            u += 1.0;
        }
        bool roundDown = false;
        if (u > 0.9999999999) {
            roundDown = true;
            x += 0.1;
        } else {
            if (u < 0.000000000015) {
                roundDown = true;
            }
        }
        if (roundDown) {
            if (@ext_boolean("INT_IS_FLOOR") || (x > 0)) {
                x = Core.Int(x) + 0.0;
            } else {
                x = Core.Int(x) - 1.0;
            }
        }
    }
    return x;
}

double canonicalizeAngle(double a) {
    double twopi = 2 * 3.14159265358979;
    a = a % twopi;
    if (a < 0) {
        a += twopi;
    }
    return a;
}

double getFloat(Value num) {
    if (num.type == Types.FLOAT) {
        return ((double) num.internalValue);
    }
    return ((int) num.internalValue) + 0.0;
}

object getNativeDataItem(Value objValue, int index) {
    ObjectInstance obj = ((ObjectInstance) objValue.internalValue);
    return obj.nativeData[index];
}

int nextPowerOf2(int value) {
    if (((value - 1) & value) == 0) {
        return value;
    }
    int output = 1;
    while (output < value) {
        output *= 2;
    }
    return output;
}
