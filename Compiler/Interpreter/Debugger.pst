string encodeBreakpointData(VmContext vm, BreakpointInfo breakpoint, int pc) {
    if (@ext_boolean("HAS_DEBUGGER")) {
        initFileNameSymbolData(vm);
        List<Token> tokens = vm.symbolData.tokenData[pc];
        if (tokens != null && tokens.Size() > 0) {
            Token token = tokens[0];
            int fileId = token.fileId;
            string filename = "";
            if (vm.symbolData != null) {
                filename = vm.symbolData.fileNameById[fileId];
                if (filename == null) {
                    filename = "";
                }
            }
            return Core.StringConcatAll(
                Core.IntToString(breakpoint.breakpointId),
                ",",
                Core.IntToString(pc),
                ",",
                Core.IntToString(Core.ForceParens(token.lineIndex + 1)),
                ",",
                Core.IntToString(Core.ForceParens(token.colIndex + 1)),
                ",",
                filename); // filename goes last as it may contain commas.
        }
    }
    return null;
}

int debuggerSetBreakpoint(VmContext vm, string path, int line) {
    int pc = debuggerFindPcForLine(vm, path, line);
    if (pc == -1) return -1;
    VmDebugData debugData = vm.byteCode.debugData;
    BreakpointInfo breakpoint = debugData.breakpointInfo[pc];
    if (breakpoint == null) {
        int breakpointId = debugData.nextBreakpointId;
        breakpoint = new BreakpointInfo(breakpointId, false, vm.symbolData.tokenData[pc][0]);
        debugData.nextBreakpointId = breakpointId + 1;
        debugData.breakpointInfo[pc] = breakpoint;
        debugData.hasBreakpoint[pc] = true;
        debugData.breakpointIdToPc[breakpointId] = pc;
    }
    return breakpoint.breakpointId;
}

int debuggerFindPcForLine(VmContext vm, string path, int line) {
    if (@ext_boolean("HAS_DEBUGGER")) {
        if (vm.symbolData == null) return -1;
        initFileNameSymbolData(vm);
        int fileId = -1;
        Dictionary<string, int> fileIdLookup = vm.symbolData.fileIdByName;
        fileId = fileIdLookup.TryGet(path, -1);
        if (fileId == -1) return -1;

        int opCount = vm.symbolData.tokenData.Length();
        int lineIndex = line - 1;
        List<Token> tokens = null;
        Token token = null;
        for (int pc = 0; pc < opCount; pc += 1) {
            tokens = vm.symbolData.tokenData[pc];
            if (tokens != null && tokens.Size() > 0) {
                token = tokens[0];
                if (token.fileId == fileId) {
                    if (token.lineIndex == lineIndex) {
                        return pc;
                    }
                }
            }
        }
    }
    return -1;
}

/*
    Input is an array of strings that work as a stream that descends into a value.
    keyword items:
        - this --> queries the current object context
        - class -> queries the current static class and the next value is a static field name
        - local -> queries the local context. the next value is the variable name
        - index -> queries a list item. The next value is an integer
        - key-int -> queries a dictionary. The next value is an integer key
        - key-obj -> queries a dictionary. The next value is an object ID
        - key-str -> queries a dictionary. The next value is a string key
        - . -> queries a field off an object. The next value is a field name

    Returns null if any of these steps fail.

*/
Value queryValue(
    VmContext vm,
    int execId,
    int stackFrameOffset, // how many stack frames down to query from?
    Array<string> steps) { // see above description

    if (execId == -1) execId = vm.lastExecutionContextId;
    ExecutionContext ec = vm.executionContexts[execId];
    StackFrame stackFrame = ec.stackTop;

    while (stackFrameOffset > 0) {
        stackFrameOffset -= 1;
        stackFrame = stackFrame.previous;
    }

    Value current = null;
    int i = 0;
    int j = 0;
    int len = steps.Length();
    for (i = 0; i < steps.Length(); i += 1) {
        if (current == null && i > 0) return null;
        string step = steps[i];
        if (isStringEqual(".", step)) {
            return null; // not implemented yet
        } else if (isStringEqual("this", step)) {
            current = stackFrame.objectContext;
        } else if (isStringEqual("class", step)) {
            return null; // not implemented yet
        } else if (isStringEqual("local", step)) {
            i += 1;
            step = steps[i];
            Dictionary<int, List<string>> localNamesByFuncPc = vm.symbolData.localVarNamesById;
            List<string> localNames = null;
            if (localNamesByFuncPc == null || localNamesByFuncPc.Size() == 0) return null;
            for (j = stackFrame.pc; j >= 0; j -= 1) {
                // simply walk backwards until you find a PC that is represented in the lookup.
                // walking the entire bytecode is not catastrophically slow and also not something that will generally happen.
                if (localNamesByFuncPc.Contains(j)) {
                    localNames = localNamesByFuncPc[j];
                    j = -1; // break
                }
            }
            if (localNames == null) return null;
            int localId = -1;
            if (localNames != null) {
                for (j = 0; j < localNames.Size(); j += 1) {
                    if (isStringEqual(localNames[j], step)) {
                        localId = j;
                        j = localNames.Size(); // break
                    }
                }
            }

            if (localId == -1) return null;
            int localOffset = localId + stackFrame.localsStackOffset;
            if (ec.localsStackSet[localOffset] != stackFrame.localsStackSetToken) return null;
            current = ec.localsStack[localOffset];
        } else if (isStringEqual("index", step)) {
            return null; // not implemented yet
        } else if (isStringEqual("key-int", step)) {
            return null; // not implemented yet
        } else if (isStringEqual("key-str", step)) {
            return null; // not implemented yet
        } else if (isStringEqual("key-obj", step)) {
            return null; // not implemented yet
        } else {
            return null; // unknown command
        }
    }

    return current;
}

/*
    DEBUG_SYMBOLS
        args[0] -> type of symbol

        if args[0] == 1 --> local name
        args[1] -> local ID
        string arg -> name of the local
        This applies to the last function that was defined

        if args[0] == 2 --> closure variable
        args[1] -> closure variable ID
        string arg -> name of the variable
        This applies to the last function that was defined
*/
int applyDebugSymbolData(VmContext vm, Array<int> opArgs, string stringData, FunctionInfo recentlyDefinedFunction) {
    if (@ext_boolean("HAS_DEBUGGER")) {
        int pc = recentlyDefinedFunction.pc;
        int type = opArgs[0];
        List<string> varList = null;
        if (type == 1) {
            // local ID -> name
            varList = vm.symbolData.localVarNamesById[pc];
            int localId = opArgs[1];
            while (varList.Size() <= localId) {
                varList.Add(null);
            }
            varList[localId] = stringData;
        }
    }
    return 0;
}

int debuggerClearBreakpoint(VmContext vm, int id) {
    if (@ext_boolean("HAS_DEBUGGER")) {
        VmDebugData dd = vm.byteCode.debugData;
        Array<int> pcs = dd.breakpointIdToPc.Values();
        if (id == -1) {
            dd.breakpointIdToPc = new Dictionary<int, int>();
            for (int i = 0; i < pcs.Length(); i += 1) {
                int pc = pcs[i];
                dd.breakpointInfo[pc] = null;
                dd.hasBreakpoint[pc] = false;
            }
        } else {
            Dictionary<int, int> lookup = dd.breakpointIdToPc;
            int pc = -1;
            pc = lookup.TryGet(id, -1);
            if (pc != -1) {
                dd.breakpointInfo[pc] = null;
                dd.hasBreakpoint[pc] = false;
                lookup.Remove(id);
            }
        }
    }
    return 0;
}

bool debugSetStepOverBreakpoint(VmContext vm) {
    if (@ext_boolean("HAS_DEBUGGER")) {
        ExecutionContext ec = vm.executionContexts[vm.lastExecutionContextId];
        StackFrame stackFrame = ec.stackTop;
        int stepId = vm.byteCode.debugData.nextStepId;
        vm.byteCode.debugData.nextStepId = stepId + 1;
        List<Token> tokenData = vm.symbolData.tokenData[stackFrame.pc];
        if (tokenData == null || tokenData.Size() == 0) {
            return false;
        }
        Token token = tokenData[0];
        stackFrame.debugStepTracker = new DebugStepTracker(stepId, token.fileId, token.lineIndex);
        return true;
    } else {
        return false;
    }
}
