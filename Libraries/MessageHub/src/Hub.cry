import Environment;
import Random;
import Json;

namespace MessageHub {

    class Hub {

        field _appName;
        field _token;
        field _impl;
        field _onReadyHandler = null;
        field _onCloseHandler = null;
        field _desktopInitHandler = null;
        field _isRunning = false;
        field _isReady = false;
        field _sendQueue = [];

        static field _idAlloc = 0;
        field _callbacks = {};
        field _listeners = {};

        constructor(appName = null) {
            this._appName = '' + (appName ?? Core.getProjectId());
            token = [];
            for (i = 0; i < 30; ++i) {
                token.add(Core.chr(Core.ord('a') + Random.randomInt(26)));
            }
            this._token = token.join('');

            env = Environment.getEnvironment();

            if (env['implLang'] == 'javascript') {
                this._impl = new WebHub(this._token, this._recvRaw, this._onReady, this._onClose);
            } else if (env['platform'] == 'windows') {
                this._impl = new WindowsHub(this._token, this._recvRaw, this._onReady, this._onClose, this._desktopInit);
            } else {
                throw new NotImplementedException();
            }
        }

        function setDebugOverrideToken(token) {
            if ($var['CRAYON_LIB_MESSAGE_HUB_DEBUG_MODE'] == null) {
                throw new Exception();
            }

            this._token = token;
            this._impl.token = token;
            return this;
        }

        function start() {
            this._isRunning = true;
            this._impl.start();
            return this;
        }

        function startBlocking() {
            this.start();
            while (this._isRunning) {
                Core.sleep(.005);
            }
        }

        function disconnect() {
            if (this._isRunning) {
                this._isRunning = false;
            }
        }

        function send(type, payload, cb = null) {
            if (!this._isRunning) return;
            id = ++Hub._idAlloc;
            msg = {
                "a": this._appName,
                "t": this._token,
                "y": type,
                "i": id,
                "p": payload,
                "c": cb == null ? 0 : 1,
            };
            if (cb != null) {
                this._callbacks[id] = cb;
            }

            this._sendQueue.add(Json.serialize(msg));
            if (this._isReady) {
                this._flushSendQueue();
            }
            return this;
        }

        function _flushSendQueue() {
            if (this._isReady) {
                for (i = 0; i < this._sendQueue.length; ++i) {
                    item = this._sendQueue[i];
                    this._impl.sendString(item);
                }
                this._sendQueue.clear();
            }
            return this;
        }

        function listen(type, handler) {
            this._listeners[type + ''] = handler;
            return this;
        }

        function setOnReady(fn) {
            this._onReadyHandler = fn;
            return this;
        }

        function setOnClose(fn) {
            this._onCloseHandler = fn;
            return this;
        }

        function setDesktopInitializer(fn) {
            this._desktopInitHandler = fn;
            return this;
        }

        function _desktopInit() {
            if (this._desktopInitHandler != null) this._desktopInitHandler(this._token);
        }

        function _recvRaw(rawString) {
            data = Json.parseJson(rawString);
            isResponse = data.get('r') == 1;
            payload = data['p'];
            id = data['i'];
            if (isResponse) {
                cb = this._callbacks.get(id);
                if (cb != null) {
                    this._callbacks.remove(id);
                    cb(payload);
                    return;
                }
            } else {
                type = data.get('y');
                callbackWanted = data.get('c') == 1;
                listener = this._listeners.get(type);
                callback = null;
                if (callbackWanted) {
                    callback = result => {
                        this._sendResponse(id, result);
                    };
                } else {
                    callback = result => {};
                }
                listener(payload, callback);

            }
        }

        function _sendResponse(id, result) {
            if (!this._isRunning) return;
            msg = {
                "a": this._appName,
                "t": this._token,
                "r": 1,
                "i": id,
                "p": result,
            };
            this._impl.sendString(Json.serialize(msg));
        }

        function _onReady() {
            this._isReady = true;
            this._flushSendQueue();
            if (this._onReadyHandler != null) this._onReadyHandler();
        }

        function _onClose() {
            this._isRunning = false;
            if (this._onCloseHandler != null) this._onCloseHandler();
        }
    }
}
