import Base64;
import CrayonExporter;
import FileIOTemp;
import Json;
import Resources;
import TextEncoding;

class JavaScriptExporter {

    field buildData;
    field resDb;
    field properties;
    field cbxBundle;
    field templates;
    field outputDir;
    field args;

    constructor(buildData, useTempDir, args) {
        this.buildData = buildData;
        this.cbxBundle = this.buildData.getCbxBundle();
        this.resDb = this.cbxBundle.getResourceDatabase();
        this.properties = this.buildData.getExportProperties();
        this.templates = new TemplateLoader();
        this.outputDir = useTempDir
            ? FileIOTemp.TempFiles.createDirectory(5 * 60) // temp dir exists for 5 minutes
            : this.properties.getOutputDirectory();
        this.args = args;
    }

    function export() {
        files = {};
        this.doExport(files);
        FileData.writeToDisk(this.outputDir, files);
    }

    function getU3Files() {
        sbFirst = [];
        sbSecond = [];

        u3Files = Resources.directoryList('templates/u3');
        for (file : u3Files) {
            if (file.endsWith('.js')) {
                txt = Resources.readText('templates/u3/' + file); // no substitution, so read directly from resources.
                buffer = (file == 'shim.js' || file == 'u3service.js') ? sbFirst : sbSecond;
                buffer.add('\n// ' + file + '\n' + txt + '\n\n');
            }
        }
        code = (sbFirst + sbSecond).join('\n').trim() + '\n';
        return code;
    }

    function getJsFileWithSwaps(path) {
        template = Resources.readText('templates/' + path);
        lines = template.split('\n');
        newLines = [];
        for (line : lines) {
            if (line.contains('@INCLUDE@:')) {
                instruction = line.split('@INCLUDE@:').pop().trim();
                switch (instruction) {
                    case 'USE-U3-OVERRIDE':
                        if (this.buildData.usesU3()) {
                            newLines.add('    useU3 = true;');
                        }
                        break;
                    case 'USE-BUILD-OVERRIDE':
                        break;
                    case 'ARGS-OVERRIDE':
                        break;
                    default:
                        if (!instruction.endsWith('.js')) {
                            throw new Exception("Unknown @INCLUDE@ instruction: " + instruction);
                        }

                        newLines.add('// ' + instruction);
                        newLines.add(Resources.readText('templates/' + instruction));
                        break;
                }
            } else {
                newLines.add(line);
            }
        }

        return newLines.join('\n').trim() + '\n';
    }

    function doExport(filesOut) {

        projectId = this.buildData.getProjectId();

        this.templates.addReplacement('INIT_ARGS', "['" + projectId + ".cbx']");
        this.templates.addReplacement('PROJECT_ID', projectId);
        this.templates.addReplacement('TITLE', projectId);
        this.templates.addReplacement('PROJECT_TITLE', this.args.get('title') ?? projectId);
        this.templates.addReplacement('FAVICON', this.properties.hasIcons()
            ? ('<link rel="shortcut icon" href="' + this.args.get('filePrefix', '') + 'favicon.ico">')
            : '');
        this.templates.addReplacement('CSS_EXTRA', this.args.get('fullPage') == true
            ? [
                '#crayon_host { background-color:#000; text-align:left; width: 100%; height: 100%; }',
                'body { overflow:hidden; }'
            ].join('\n')
            : '');
        this.templates.addReplacement('JS_EXTRA_HEAD', [
            this.buildData.usesU3() == true ? '<script src="u3.js"></script>' : '',
        ].join('\n'));

        filesOut['test_server.py'] = FileData.createTextFile(this.templates.getText('test_server.py'));
        filesOut['index.html'] = FileData.createTextFile(this.templates.getText('index.html'));
        filesOut['common.js'] = FileData.createTextFile(this.templates.getText('common.js'));
        filesOut['cbx.js'] = FileData.createTextFile(this.templates.getText('cbx.js'));
        filesOut['u3.js'] = FileData.createTextFile(this.getU3Files());

        filesOut['main.js'] = FileData.createTextFile(this.getJsFileWithSwaps('main.js'));
        filesOut['RuntimeService.js'] = FileData.createTextFile(this.getJsFileWithSwaps('RuntimeService.js'));

        resLookup = {};
        fileNames = this.resDb.getFileNames();
        files = this.resDb.getFiles();
        for (i = 0; i < files.length; i++) {
            resLookup[fileNames[i]] = files[i];
        }
        resources = [];
        manifest = this.resDb.getManifestText();
        for (line : manifest.split('\n')) {
            parts = line.split(',');
            if (parts.length >= 3) {
                type = parts[0];
                name = parts[-1];
                switch (type) {
                    case 'TXT':
                        /*
                        res = resLookup['res/' + name];
                        txt = res.getTextContent();
                        if (txt == null) {
                            txtBase64 = res.getBytesB64();
                            txtBytes = base64ToBytes(txtBase64);
                            txt = TextEncoding.convertBytesToText(txtBytes, TextFormat.UTF8);
                        }
                        resources.add('C$common$addTextRes(', Json.serializeJson(name), ', ', Json.serializeJson(txt), ');\n');
                        //*/
                        break;
                    case 'IMG':
                        //filesOut['resources/' + name] = FileData.createBinaryFileFromBytes([1, 2, 3]);
                        break;
                    case 'SND':
                        //filesOut['resources/' + name] = FileData.createBinaryFileFromBytes([1, 2, 3]);
                        break;
                    case 'BIN':
                        // TODO: consider placing a limit on this and instead relying on reading files via XHR
                        bytesB64 = resLookup['res/' + name].getBytesB64();
                        resources.add('C$common$addBinaryRes(', Json.serializeJson(name), ', ', '"', bytesB64, '");\n');
                        break;
                }
            }
        }

        filesOut[projectId + '_cbx.js'] = FileData.createTextFile(this.createCbxJs());

        fileNames = this.resDb.getFileNames() ?? [];
        fileData = this.resDb.getFiles() ?? [];
        for (i = 0; i < fileData.length; i++) {
            file = fileData[i];
            name = fileNames[i]['res/'.length:]; // trim "res/"
            if (file.getType() == 'text') {
                emitFile = FileData.createTextFile(file.getTextContent());
            } else {
                // TODO: consider placing a limit on this and instead relying on reading files via XHR
                emitFile = FileData.createBinaryFileFromB64(file.getBytesB64());
            }
            filesOut['resources/' + name] = emitFile;
        }
    }

    function createCbxJs() {
        projectId = this.buildData.getProjectId();
        lines = [
            '(() => {',
            "  CBX.addBundle('" + projectId + ".cbx', CBX.createCbxBundleBuilder()"];

        lines.add("    .setMetadata('bytecode', " + Json.serializeJson(this.cbxBundle.getByteCode()) + ")");
        lines.add("    .setMetadata('resManifest', " + Json.serializeJson(this.resDb.getManifestText() ?? '') + ")");
        lines.add("    .setMetadata('imgManifest', " + Json.serializeJson(this.resDb.getImageManifestText() ?? '') + ")");
        lines.add("    .setMetadata('jsPrefix', '/')");

        // TODO: loop through images and resources and stuff


        fileNames = this.resDb.getFileNames() ?? [];
        fileData = this.resDb.getFiles() ?? [];
        for (i = 0; i < fileData.length; i++) {
            file = fileData[i];
            name = fileNames[i]['res/'.length:]; // trim "res/"
            if (file.getType() == 'text') {
                lines.add("    .setTextResourceLiteral(" + Json.serializeJson(name) + ", " + Json.serializeJson(file.getTextContent()) + ")");
            } else {
                // TODO: consider placing a limit on this and instead relying on reading files via XHR. That would be okay since resource reader is now asynchronous.
                lines.add("    .setBinaryResourceLiteral(" + Json.serializeJson(name) + ", '" + file.getBytesB64() + "')");
            }
        }

        lines.add(
            '    .finalize());',
            '})();'
        );
        return lines.join('\n').trim() + '\n';
    }
}
