namespace Nori {

    class Panel : Element {

        field _children = [];
        field _childrenIds = [];

        field _canFlushIncrementally = true;
        field _childrenIdsAdded = [];
        field _childRemovalCount = 0;
        field _singleChild;

        constructor(type, singleChildPanel) : base(type) {
            this._isPanel = true;
            this._singleChild = singleChildPanel;
        }

        function addChild(e) {
            if (e._parent != null) {
                throw new Exception("Element already added to a parent.");
            }

            if (this._singleChild && this._children.length == 1) {
                throw new Exception("This panel can only support one child element.");
            }

            e._parent = this;
            this._children.add(e);
            this._childrenIds.add(e._id);

            if (this._canFlushIncrementally) {
                this._childrenIdsAdded.add(e._id);
            }

            if (this._frame != null) {
                Panel._applyFrameToElementAndChildren(e, this._frame);
            }

            return this;
        }

        static function _applyFrameToElementAndChildren(e, frame) {
            queue = [e];
            i = 0;
            while (i < queue.length) {
                current = queue[i++];
                current._frame = frame;
                id = current._id;
                frame._fullFlushElements[id] = current;
                frame._elementById[id] = current;
                current._isClean = false;
                if (current._isPanel) {
                    frame._dirtyPanels[id] = true;
                    queue.concat(current._children);
                }
            }
        }
    }
}
