// There are 13 args. But not all are used. So don't pop them all.

/*

	Converts some numbers indicating a line and some width into quadrilateral corner coordinates.
	The line is never perfectly horizontal or vertical so inverting the slope is always safe.
	
	arg 1: object instance with the drawing queue
	
	Before:
		queue[n + 1] -> start X
		queue[n + 2] -> start Y
		queue[n + 3] -> end X
		queue[n + 4] -> end Y
		queue[n + 5] -> stroke width
		queue[n + 6] -> 0
		queue[n + 7] -> 0
		queue[n + 8] -> 0
	
	After:
		Quadrilateral ABCD
		queue[n + 1] -> AX
		queue[n + 2] -> AY
		queue[n + 3] -> BX
		queue[n + 4] -> BY
		queue[n + 5] -> CX
		queue[n + 6] -> CY
		queue[n + 7] -> DX
		queue[n + 8] -> DY
	
*/
import inline "FrameworkFunctions/1_arg.cry";

value = $_array_get(valueStack, valueStackSize);
objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
objArray1 = ObjectInstance$objInstance1.nativeData;
intArray1 = $_cast('Array<int>', $_array_get(objArray1, 0)); // event queue
len = $_cast('int', $_array_get(objArray1, 1)) - 16;

int1 = $_array_get(intArray1, len + 1); // start X
int2 = $_array_get(intArray1, len + 2); // start Y
int3 = $_array_get(intArray1, len + 3); // end X
int4 = $_array_get(intArray1, len + 4); // end Y
int5 = $_array_get(intArray1, len + 5); // stroke width
float1 = 0.0 + int4 - int2; // rise
float2 = 0.0 + int3 - int1; // run
float3 = $_unsafe_float_division(float1, float2); // slope

float1 = $_unsafe_float_division(int5, 2.0); // half of the width
if (float1 < .5) float1 = 1; // just above sqrt(2) / 2

// yOffset = (stroke radius) / sqrt(slope ** 2 + 1)
float2 = $_unsafe_float_division(
	float1,
	$_force_parens($_math_pow(float3 * float3 + 1, .5)));

// xOffset = -yOffset * slope
float1 = -float2 * float3;

// Ax and Bx
// If same, move Bx down
i = $_int(int1 + float1 + .5);
j = $_int(int1 - float1 + .5);
if (i == j) j += 1;
$_array_set(intArray1, len + 1, i);
$_array_set(intArray1, len + 3, j);

// Ay and By
// If same, move By right
i = $_int(int2 + float2 + .5);
j = $_int(int2 - float2 + .5);
if (i == j) j += 1;
$_array_set(intArray1, len + 2, i);
$_array_set(intArray1, len + 4, j);

// Cx and Dx
// If same, move Cx down
i = $_int(int3 - float1 + .5);
j = $_int(int3 + float1 + .5);
if (i == j) i += 1;
$_array_set(intArray1, len + 5, i);
$_array_set(intArray1, len + 7, j);

// Cy and Dy
// If same, move Cy right
i = $_int(int4 - float2 + .5);
j = $_int(int4 + float2 + .5);
if (i == j) i += 1;
$_array_set(intArray1, len + 6, i);
$_array_set(intArray1, len + 8, j);

output = VALUE_NULL;