// TODO: move the local scope ID into the op args rather than putting it on the stack.

value3 = valueStack[valueStackSize - 3]; // iterating index wrapped value
value2 = valueStack[valueStackSize - 2]; // local scope ID of iterating variable
value = valueStack[valueStackSize - 1]; // list, string (or possibly a new Types.STACK_FRAME in the future if yield is introduced)
int1 = (int) value3.internalValue; // iterator index
int2 = (int) value2.internalValue; // iterating variable local scope ID
if (value.type == Types.LIST) {
    list1 = (List<Value>) value.internalValue; // the actual list
    len = list1.Size();
    bool1 = true;
} else {
    string2 = (string) value.internalValue; // the actual string
    len = string2.Size();
    bool1 = false;
}

if (int1 < len) {
    if (bool1) {
        value = list1[int1];
    } else {
        // Go easy on GC. Single-char strings are going to be common for users that use foreach loops on strings.
        value = buildCommonString(Core.CharToString(string2[int1]));
    }

    // TODO: these two operations can actually be done in the verify_type_is_iterable op, I think.
    int3 = localsStackOffset + int2;
    localsStackSet[int3] = localsStackSetToken;

    localsStack[int3] = value;
} else {
    pc += row[0];
}

// Update the current iteration index.
// The index can never be 0 so this is the inlined version of buildInteger, but with negative checks removed.
int1 += 1;
if (int1 < INTEGER_POSITIVE_CACHE_SIZE) {
    value = INTEGER_POSITIVE_CACHE[int1];
} else {
    value = new Value(Types.INTEGER, int1);
}
valueStack[valueStackSize - 3] = value;
