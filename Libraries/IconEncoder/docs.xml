<library name="IconEncoder">
	<description>Library for building icon files.</description>
	<namespace name="IconBuilder">

		<class name="IconBuilder">
			<description>
				Encodes a Bitmap instance or a series of Bitmaps into a list of bytes using the ICO format.
			</description>

			<function name="(constructor)">
				<description>
					Creates a new Icon encoder. 
					By default the icon encoder contains no images. As it supports multiple images at different resolutions, each must be added using addImage. 
				</description>
			</function>

			<function name="addImage">
				<arg name="imageResource" type="Images.Bitmap" description="Bitmap to add to the icon's images."/>
				<description>
					Adds an image to the icon file.
					The image will be padded and/or resized to fit the most appropriate resolution for .ico formats.
					Icon files support the following sizes: 16x16, 32x32, 64x64, 128x128, and 256x256.
					When an image is added that does not adhere to one of those sizes, it is converted to the largest size that it can fit into by adding invisible padding (it will be centered).
					If it is larger than 256x256, it will centered and cropped.
					Only one image is supported per size bucket.
					Images added that apply to an identical size buckets that a previous image was added to will be overwritten in the final output.
				</description>
			</function>

			<function name="toBytes">
				<description>
					Emits the ICO file as a byte array.
					Throws a Core.InvalidState exception if the IconEncoder instance contains no images.
				</description>
				<returns type="list-of-int" description="List of bytes representing an icon file"/>
			</function>
		</class>
	</namespace>
</library>