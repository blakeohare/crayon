/*
    arg1: request object
    arg2: boolean: true if is asynchronous request
    arg3: string: method
    arg4: string: URL
    arg5: list of strings: alternating header names and values.
    arg6: one of the following...
        object with nativeData[0] of a byte array
        a simple string
        null
    arg7: an integer
        0 -> response should be text
        1 -> response should be a byte array
*/

Value lib_http_function_sendRequest(Array<Value> args) {
    Value body = args[5];
    ObjectInstance objInstance1 = ((ObjectInstance) args[0].internalValue);
    Array<object> objArray1 = new Array<object>(3);
    objInstance1.nativeData = objArray1;
    objArray1[2] = false;
    string method = ((string) args[2].internalValue);
    string url = ((string) args[3].internalValue);
    List<string> headers = new List<string>(); // alternating names and values
    List<Value> list1 = ((List<Value>) args[4].internalValue);
    for (int i = 0; i < list1.Size(); i += 1) {
        headers.Add(((string) list1[i].internalValue));
    }
    object bodyRawObject = body.internalValue;
    int bodyState = 0; // body is not defined
    if (body.type == Types.STRING) {
        bodyState = 1; // body is a string
    } else if (body.type == Types.INSTANCE) {
        objInstance1 = (ObjectInstance) bodyRawObject;
        bodyRawObject = objInstance1.nativeData[0];
        bodyState = 2; // body is an array of bytes
    } else {
        bodyRawObject = null;
    }

    bool getResponseAsText = ((int) args[6].internalValue) == 1; // alternative: bytes

    if (((bool) args[1].internalValue)) { // is synchronous?
        // asynchronous request
        Native._lib_http_sendRequestAsynchronous(
            objArray1,
            method,
            url,
            headers,
            bodyState,
            bodyRawObject,
            getResponseAsText);
    } else {
        // synchronous request
        if (Native._lib_http_sendRequestSynchronous(
            objArray1, method, url, headers, bodyState, bodyRawObject, getResponseAsText, vm_getCurrentExecutionContextId())) {

            vm_suspend();
        }
    }

    return VALUE_NULL;
}
