import Base64;
import Environment;
import IconEncoder;
import MessageHub;
import ProcessUtil;
import Images;

namespace U3Direct {

    enum WindowMode {
        GRAPHICS,
        UI,
    }

    class U3Window {
        field _hub;
        field _inputBuffer = [];
        field _overrideClose = null;

        constructor(eventListener, onClose = null) {
            this._hub = new Hub();
            isDebug = $var['CRAYON_LIB_MESSAGE_HUB_DEBUG_MODE'] == true;
            if (isDebug) {
                this._hub.setDebugOverrideToken('u3debug');
            } else {
                this._hub.setDesktopInitializer(token => {
                    cryHome = Environment.getEnvironmentVariable('CRAYON_HOME');
                    if (cryHome == null) throw new Exception("CRAYON_HOME not set.");
                    u3Executable = cryHome + '\\u3\\u3window.exe'; // TODO: check platform first
                    args = [
                        '--u3:token', token,
                        '--u3:pid', Process.getCurrentProcessId() + ''
                    ];
                    p = new Process()
                        .setExecutable(Environment.replaceEnvironmentVariables(u3Executable))
                        .setArgs(args);
                    p.run();
                });
            }

            this._hub.listen('u3events', (msgs, cb) => {
                for (msg : msgs) {
                    eventType = msg['eventName'];
                    id = msg['id'];
                    arg = msg['arg'];
                    eventListener(eventType, id, arg);
                }
            });

            this._hub.listen('u3batch', (data, cb) => {
                i = 0;
                while (i < data.length) {
                    len = data[i++];
                    item = {
                        "name": data[i],
                        "args": data[i + 1 : i + len],
                    };
                    i += len;
                    this._inputBuffer.add(item);
                }
                cb(null);
            });

            this._hub.listen('u3close', (data, cb) => {
                if (this._overrideClose != null) {
                    this._overrideClose(data + '');
                } else {
                    this.close();
                }
                cb(null);
            });

            this._hub.setOnClose(() => {
                if (onClose != null) onClose();
            });
        }

        function overrideCloseBehavior(cb) {
            this._overrideClose = cb;
        }

        function show(title, width, height, initialData, isBlocking, keepAspectRatio) {

            setupComplete = false;
            this._hub.setOnReady(() => {

                if (!Environment.isJavaScript()) {
                    /*
                    easyIcon = new Bitmap(64, 64);
                    blue = new Bitmap(32, 32);
                    blue.edit().fill(0, 0, 255).finish();
                    easyIcon.edit().drawImage(blue, 16, 16).finish();
                    icon = bytesToBase64(new IconBuilder().addImage(easyIcon).toBytes());
                    //*/
                    icon = 'AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAMMOAADDDgAAAAAAAAAAAAAAAAAAAAAAAAAAAABgQwAAVDoAHIZgCOOfcQf/mWsA/5tsAP94VAD/LiAA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYUMAAFE4AByTZwLjsXwC/6d1AP+odQD/kGUA/zwqAOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQ7AAA/LAAcmGoA48KIAP+yfAD/wYcA/8mNAP9eQQDjAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUDgAADwsADSEXAHoxIgDmRTAA/2NFAP+2fwD/XkIA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdFEAAJdqAAIsHwAVDwoAcT4rAPZKNAD/Vz0A/1E4AOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE81AABLMwAZWT0AynFOAOV3UwD7XkEA/2VGAP9ROADjAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNS0cAMjEvTn95bfSOdTz/mG4M/4mAaf+Fbz3/UDcA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXl5fADg5OXelp6v/hXxn/25UF/+mqKz/gHlo/0MtAOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEE0GAAuJhQncVgd56d5Dv+4gQL/h2Ya/5twDv9cQADjAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgQgAASzMAHKVzAOPNjwD/vYQA/7+FAP+2fgD/UTkA4wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYEMAAFM5AByLYwfjpXUG/55uAP+fbwD/gVoA/zUlAOMAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBDAABKMwALe1cFsbiEDv+2gAL/tX4A/4hfAP8gFwCxAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi2QIAHZUBU7TmxX08qwK/+KdAP+qdwD0MiMATlQ6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFo+AAApGQALpHcOse6tFP/PkQH/jGIAsTspAAtcQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiWIIAHRSBU3SmRX0wIkK9GpKAE17VgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFo+AAA3JAANnnIMu59yDLs6JwANXEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA+B8AAPgfAAD8PwAA/D8AAA==';
                }

                initMsg = {
                    "title": title,
                    "width": width,
                    "height": height,
                    "initialData": initialData,
                    "keepAspectRatio": keepAspectRatio,

                    // This is a duplicate with command line args, but debug mode doesn't send
                    // command line args, so they're being sent again later here.
                    "pid": Process.getCurrentProcessId(),
                    "icon": icon,
                };

                this._hub.send('u3init', initMsg, (_) => {
                    setupComplete = true;
                });
            });

            if (isBlocking) {
                this._hub.startBlocking();
            } else {
                this._hub.start();
                while (!setupComplete && this._hub._isRunning) {
                    Core.sleep(0.005);
                }
            }
            return this;
        }

        function sendData(items) {
            this._hub.send('u3data', { "buffer": items });
            return this;
        }

        field _isGame = false;
        function sendGameData(canvasId, items) {
            data = ['CV', canvasId, items.length] + items;
            if (!this._isGame) {
                this._isGame = true;
                data = ['GS', canvasId] + data;
            }
            data.add('FE', -1);
            return this.sendData(data);
        }

        function sendCanvasData(id, items) {
            return this.sendData(['CV', id, items.length] + items);
        }

        function close() {
            this._hub.send('u3close', {});
            return this;
        }

        function flushInputData() {
            b = this._inputBuffer;
            this._inputBuffer = [];
            return b;
        }
    }
}
