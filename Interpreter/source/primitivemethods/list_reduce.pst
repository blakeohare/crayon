// incoming args: array.reduce(fp, acc[optional])
// outgoing args: [fp, acc[or random value if unset], array, accNotUsed]

if (argCount == 0 || argCount > 2) {
    hasInterrupt = EX_InvalidArgument(ec, primitiveMethodWrongArgCountError("list map method", 1, argCount));
} else if (funcArgs[0].type != Types.FUNCTION) {
    hasInterrupt = EX_InvalidArgument(ec, "list reduce method requires a function pointer as its argument.");
} else {
    funcArgs[2] = value;
    funcArgs[3] = VALUE_FALSE;
    if (argCount == 1) {
        funcArgs[3] = VALUE_TRUE;
        funcArgs[1] = VALUE_NULL;
    }
    argCount = 4;

    primitiveMethodToCoreLibraryFallback = true;
    functionId = metadata.primitiveMethodFunctionIdFallbackLookup[4]; // MAGIC NUMBER: 1 (see metadata initializer)

    output = null; // This is required. Triggers function fallback.
}
