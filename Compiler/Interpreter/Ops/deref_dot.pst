// row[0] -> global name ID
// row[1] -> locale scoped name ID

value = valueStack[valueStackSize - 1];
nameId = row[0];
int2 = row[1]; // locale scoped name ID
switch (value.type) {
    case Types.INSTANCE:
        objInstance1 = (ObjectInstance) value.internalValue;
        classInfo = classTable[objInstance1.classId];
        intIntDict1 = classInfo.localeScopedNameIdToMemberId;

        // TODO: a better way to do this without double-lookup.
        if (intIntDict1.Contains(int2)) {
            int1 = intIntDict1[int2];
            functionId = classInfo.functionIds[int1];
            if (functionId == -1) {
                output = objInstance1.members[int1];
            } else {
                output = new Value(Types.FUNCTION, new FunctionPointer(
                    FunctionPointerType.METHOD,
                    value, // object instance
                    objInstance1.classId,
                    functionId,
                    null));
            }
        } else {
            output = null;
        }
        break;

    case Types.STRING:
        if (metadata.lengthId == nameId) {
            int2 = Core.ForceParens(((string) value.internalValue)).Size();
            output = buildInteger(int2);
        } else {
            output = null;
        }
        break;

    case Types.LIST:
        if (metadata.lengthId == nameId) {
            if (@ext_boolean("IS_PHP")) {
                // The harmless force_parens confuses PHP because YOU CAN'T DEREFERENCE A LIST IF IT'S IN PARENTHESIS IN PHP.
                int2 = ((List<Value>) value.internalValue).Size();
            } else {
                int2 = Core.ForceParens(((List<Value>) value.internalValue)).Size();
            }
            output = buildInteger(int2);
        } else {
            output = null;
        }
        break;

    case Types.DICTIONARY:
        if (metadata.lengthId == nameId) {
            dictImpl = ((DictImpl) value.internalValue);
            output = buildInteger(dictImpl.size);
        } else {
            output = null;
        }
        break;

    default:
        if (value.type == Types.NULL) {
            hasInterrupt = EX_NullReference(ec, "Derferenced a field from null.");
            output = VALUE_NULL;
        } else {
            output = null;
        }
        break;
}

if (output == null) {
    output = generatePrimitiveMethodReference(globalNameIdToPrimitiveMethodName, nameId, value);
    if (output == null) {
        // TODO: put this all in a helper function.
        if (value.type == Types.NULL) {
            hasInterrupt = EX_NullReference(ec, "Tried to dereference a field on null.");
        } else {

            if (value.type == Types.INSTANCE) {
                objInstance1 = ((ObjectInstance) value.internalValue);
                classId = objInstance1.classId;
                classInfo = classTable[classId];
                string1 = Core.StringConcatAll(classInfo.fullyQualifiedName, " instance");
            } else {
                string1 = getTypeFromId(value.type);
            }

            hasInterrupt = EX_UnknownField(ec, Core.StringConcatAll(string1, " does not have that field."));
        }
    }
}

valueStack[valueStackSize - 1] = output;
