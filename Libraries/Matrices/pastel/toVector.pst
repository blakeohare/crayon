/*
    args[0] -> matrix
    args[1] -> output

*/
Value lib_matrices_toVector(VmContext vm, Array<Value> args) {

    ObjectInstance obj = (ObjectInstance) args[0].internalValue;
    Array<object> nd = obj.nativeData;
    Array<double> data = (Array<double>) nd[0];
    int width = (int) nd[1];
    int height = (int) nd[2];
    int length = width * height;
    if (args[1].type != Types.LIST) {
        nd[5] = "Output argument must be a list";
        return vm.globalNull;
    }
    List<Value> output = (List<Value>) args[1].internalValue;
    while (output.Size() < length) {
        output.Add(vm.globalNull);
    }
    double value = 0.0;
    for (int i = 0; i < length; i += 1) {
        value = data[i];
        if (value == 0) output[i] = vm.globals.floatZero;
        else if (value == 1) output[i] = vm.globals.floatOne;
        else output[i] = new Value(Types.FLOAT, data[i]);
    }

    return args[1];
}
