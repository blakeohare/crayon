Array<int> primitiveMethodsInitializeLookup(Dictionary<string, int> nameLookups) {
    int length = nameLookups.Size();
    Array<int> lookup = new Array<int>(length);

    for (int i = 0; i < length; i += 1) {
        lookup[i] = -1;
    }

    if (nameLookups.Contains("add")) lookup[nameLookups["add"]] = PrimitiveMethodName.ADD;
    if (nameLookups.Contains("argCountMax")) lookup[nameLookups["argCountMax"]] = PrimitiveMethodName.ARG_COUNT_MAX;
    if (nameLookups.Contains("argCountMin")) lookup[nameLookups["argCountMin"]] = PrimitiveMethodName.ARG_COUNT_MIN;
    if (nameLookups.Contains("choice")) lookup[nameLookups["choice"]] = PrimitiveMethodName.CHOICE;
    if (nameLookups.Contains("clear")) lookup[nameLookups["clear"]] = PrimitiveMethodName.CLEAR;
    if (nameLookups.Contains("clone")) lookup[nameLookups["clone"]] = PrimitiveMethodName.CLONE;
    if (nameLookups.Contains("concat")) lookup[nameLookups["concat"]] = PrimitiveMethodName.CONCAT;
    if (nameLookups.Contains("contains")) lookup[nameLookups["contains"]] = PrimitiveMethodName.CONTAINS;
    if (nameLookups.Contains("createInstance")) lookup[nameLookups["createInstance"]] = PrimitiveMethodName.CREATE_INSTANCE;
    if (nameLookups.Contains("endsWith")) lookup[nameLookups["endsWith"]] = PrimitiveMethodName.ENDS_WITH;
    if (nameLookups.Contains("filter")) lookup[nameLookups["filter"]] = PrimitiveMethodName.FILTER;
    if (nameLookups.Contains("get")) lookup[nameLookups["get"]] = PrimitiveMethodName.GET;
    if (nameLookups.Contains("getName")) lookup[nameLookups["getName"]] = PrimitiveMethodName.GET_NAME;
    if (nameLookups.Contains("indexOf")) lookup[nameLookups["indexOf"]] = PrimitiveMethodName.INDEX_OF;
    if (nameLookups.Contains("insert")) lookup[nameLookups["insert"]] = PrimitiveMethodName.INSERT;
    if (nameLookups.Contains("invoke")) lookup[nameLookups["invoke"]] = PrimitiveMethodName.INVOKE;
    if (nameLookups.Contains("isA")) lookup[nameLookups["isA"]] = PrimitiveMethodName.IS_A;
    if (nameLookups.Contains("join")) lookup[nameLookups["join"]] = PrimitiveMethodName.JOIN;
    if (nameLookups.Contains("keys")) lookup[nameLookups["keys"]] = PrimitiveMethodName.KEYS;
    if (nameLookups.Contains("lower")) lookup[nameLookups["lower"]] = PrimitiveMethodName.LOWER;
    if (nameLookups.Contains("ltrim")) lookup[nameLookups["ltrim"]] = PrimitiveMethodName.LTRIM;
    if (nameLookups.Contains("map")) lookup[nameLookups["map"]] = PrimitiveMethodName.MAP;
    if (nameLookups.Contains("merge")) lookup[nameLookups["merge"]] = PrimitiveMethodName.MERGE;
    if (nameLookups.Contains("pop")) lookup[nameLookups["pop"]] = PrimitiveMethodName.POP;
    if (nameLookups.Contains("remove")) lookup[nameLookups["remove"]] = PrimitiveMethodName.REMOVE;
    if (nameLookups.Contains("replace")) lookup[nameLookups["replace"]] = PrimitiveMethodName.REPLACE;
    if (nameLookups.Contains("reverse")) lookup[nameLookups["reverse"]] = PrimitiveMethodName.REVERSE;
    if (nameLookups.Contains("rtrim")) lookup[nameLookups["rtrim"]] = PrimitiveMethodName.RTRIM;
    if (nameLookups.Contains("shuffle")) lookup[nameLookups["shuffle"]] = PrimitiveMethodName.SHUFFLE;
    if (nameLookups.Contains("sort")) lookup[nameLookups["sort"]] = PrimitiveMethodName.SORT;
    if (nameLookups.Contains("split")) lookup[nameLookups["split"]] = PrimitiveMethodName.SPLIT;
    if (nameLookups.Contains("startsWith")) lookup[nameLookups["startsWith"]] = PrimitiveMethodName.STARTS_WITH;
    if (nameLookups.Contains("trim")) lookup[nameLookups["trim"]] = PrimitiveMethodName.TRIM;
    if (nameLookups.Contains("upper")) lookup[nameLookups["upper"]] = PrimitiveMethodName.UPPER;
    if (nameLookups.Contains("values")) lookup[nameLookups["values"]] = PrimitiveMethodName.VALUES;

    return lookup;
}

Value generatePrimitiveMethodReference(Array<int> lookup, int globalNameId, Value context) {
    int functionId = resolvePrimitiveMethodName2(lookup, context.type, globalNameId);
    if (functionId < 0) {
        return null;
    }
    return new Value(Types.FUNCTION,
        new FunctionPointer(
            FunctionPointerType.PRIMITIVE_METHOD,
            context,
            0, // class ID is N/A
            functionId));
}

// returns an integer value in the enum PrimitiveMethodName
int resolvePrimitiveMethodName2(Array<int> lookup, int type, int globalNameId) {
    int output = lookup[globalNameId];
    if (output != -1) {
        switch ((type + (MAX_TYPE * output))) {
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.CONTAINS):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.ENDS_WITH):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.INDEX_OF):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.LOWER):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.LTRIM):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.REPLACE):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.REVERSE):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.RTRIM):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.SPLIT):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.STARTS_WITH):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.TRIM):
            case Types.STRING + (MAX_TYPE * PrimitiveMethodName.UPPER):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.ADD):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.CHOICE):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.CLEAR):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.CLONE):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.CONCAT):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.CONTAINS):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.FILTER):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.INSERT):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.JOIN):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.MAP):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.POP):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.REMOVE):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.REVERSE):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.SHUFFLE):
            case Types.LIST + (MAX_TYPE * PrimitiveMethodName.SORT):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.CLEAR):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.CLONE):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.CONTAINS):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.GET):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.KEYS):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.MERGE):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.REMOVE):
            case Types.DICTIONARY + (MAX_TYPE * PrimitiveMethodName.VALUES):
            case Types.FUNCTION + (MAX_TYPE * PrimitiveMethodName.ARG_COUNT_MAX):
            case Types.FUNCTION + (MAX_TYPE * PrimitiveMethodName.ARG_COUNT_MIN):
            case Types.FUNCTION + (MAX_TYPE * PrimitiveMethodName.GET_NAME):
            case Types.FUNCTION + (MAX_TYPE * PrimitiveMethodName.INVOKE):
            case Types.CLASS + (MAX_TYPE * PrimitiveMethodName.CREATE_INSTANCE):
            case Types.CLASS + (MAX_TYPE * PrimitiveMethodName.GET_NAME):
            case Types.CLASS + (MAX_TYPE * PrimitiveMethodName.IS_A):
                return output;
            default:
                return -1;
        }
    }
    return -1;
}

string primitiveMethodWrongArgCountError(string name, int expected, int actual) {

    string output = "";
    if (expected == 0) output = Core.StringConcatAll(name, " does not accept any arguments.");
    else if (expected == 1) output = Core.StringConcatAll(name, " accepts exactly 1 argument.");
    else output = Core.StringConcatAll(name, " requires ", Core.IntToString(expected), " arguments.");

    return Core.StringConcatAll(output, " Found: ", Core.IntToString(actual));
}
