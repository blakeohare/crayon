namespace Backend {

	statusCodeToName(sc) {
		switch (sc) {
			case 100: return 'Continue';
			case 101: return 'Switching Protocol';
			case 103: return 'Early Hints';
			case 200: return 'OK';
			case 201: return 'Created';
			case 202: return 'Accepted';
			case 203: return 'Non-Authoritative Information';
			case 204: return 'No Content';
			case 205: return 'Reset Content';
			case 206: return 'Partial Content';
			case 301: return 'Moved Permanently';
			case 302: return 'Found';
			case 307: return 'Temporary Redirect';
			case 400: return 'Bad Request';
			case 401: return 'Unauthorized';
			case 403: return 'Forbidden';
			case 404: return 'Not Found';
			case 405: return 'Method Not Allowed';
			case 406: return 'Not Acceptable';
			case 407: return 'Proxy Authentication Required';
			case 408: return 'Request Timeout';
			case 409: return 'Conflict';
			case 410: return 'Gone';
			case 411: return 'Length Required';
			case 412: return 'Precondition Failed';
			case 413: return 'Payload Too Large';
			case 414: return 'URI Too Long';
			case 415: return 'Unsupported Media Type';
			case 416: return 'Requested Range Not Satisifiable';
			case 417: return 'Expectation Failed';
			case 418: return "I'm a teapot";
			case 425: return 'Too Early';
			case 426: return 'Upgrade Required';
			case 428: return 'Precondition Required';
			case 429: return 'Too Many Requests';
			case 431: return 'Request Header Fields Too Large';
			case 451: return 'Unavailable For Legal Reasons';
			case 500: return 'Internal Server Error';
			case 501: return 'Not Implemented';
			case 502: return 'Bad Gateway';
			case 503: return 'Serevice Unavailable';
			case 504: return 'Gateway Timeout';
			case 505: return 'HTTP Version Not Supported';
			case 511: return 'Network Authentication Required';
			
			default: return "Error";
		}
	}

	class AbstractServerException : Exception {
		field sc = 500;
		field status;
		
		constructor(msg, sc = 500, status = null) 
			: base(msg ?? "A server error has occurred.") {
			this.sc = sc;
			this.status = status ?? statusCodeToName(sc);
		}
	}
	
	class RedirectException : AbstractServerException {
		
		field newUrl;
		
		constructor(newUrl, isPermanent = false, keepMethod = false)
			: base("Resource moved", isPermanent ? 301 : (keepMethod ? 307 : 302)) {
			
			this.newUrl = newUrl;
		}
	}
	
	class NotFoundException : AbstractServerException {
		constructor(msg = null) : base(msg ?? "A resource could not be found.", 404) { }
	}
	
	class UnauthroizedException : AbstractServerException {
		constructor(msg = null) : base(msg ?? "Access to this page is not authorized.", 401) { }
	}
	
	class ForbiddenException : AbstractServerException {
		constructor(msg = null) : base(msg ?? "Acess to this page is forbidden.", 403) { }
	}
	
	class InternalServerException : AbstractServerException {
		constructor(msg = null) : base(msg ?? "An error has occurred on the server.", 500) { }
	}
	
	class NotImplementedServerException : AbstractServerException {
		constructor(msg = null) : base(msg ?? "Not implemented", 501) { }
	}
	
	class UnavailableException : AbstractServerException {
		constructor(msg = null) : base(msg ?? "The resource is temporarily unavailable.", 503) { }
	}
}
