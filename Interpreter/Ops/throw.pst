// This code runs for the 'throw' statement.
// It will pop 1 value off the stack

valueStackSize -= 1;
value = valueStack[valueStackSize];
bool2 = value.type == Types.INSTANCE;
if (bool2) {
    objInstance1 = ((ObjectInstance) value.internalValue);
    if (!isClassASubclassOf(objInstance1.classId, magicNumbers.coreExceptionClassId)) {
        bool2 = false;
    }
}

if (!bool2) {
    return generateException(stack, pc, valueStackSize, ec, CoreExceptionTypes.INVALID_ARGUMENT, "Thrown value is not an exception.");
}

objArray1 = objInstance1.nativeData;
intList1 = new List<int>();
objArray1[1] = intList1;

// Do not push token if this is from _LIB_CORE_generateException
if (!isPcFromCore(pc)) {
    // This is purely based on TokenData. If there is no token data, then it doesn't matter anyway as this is notably used
    // for printing the human-readable stack trace.
    intList1.Add(pc);
}

ec.activeException = value;

@import("BubbleException.pst");
