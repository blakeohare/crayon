valueStackSize -= 2;
rightValue = valueStack[valueStackSize + 1];
leftValue = valueStack[valueStackSize];

if (leftValue.type == rightValue.type) {
    // doEqualityComparison does these, but since these are so common, go ahead and inline them here and
    // save the overhead of a function call.
    switch (leftValue.type) {
        case Types.NULL:
            bool1 = true;
            break;
        case Types.BOOLEAN:
            bool1 = (bool) leftValue.internalValue == (bool) rightValue.internalValue;
            break;
        case Types.INTEGER:
            bool1 = (int) leftValue.internalValue == (int) rightValue.internalValue;
            break;
        case Types.STRING:
            if (@ext_boolean("IS_JAVA")) {
                bool1 = Core.StringEquals(leftValue.internalValue, rightValue.internalValue);
            } else {
                bool1 = (string) leftValue.internalValue == (string) rightValue.internalValue;
            }
            break;
        default:
            bool1 = doEqualityComparisonAndReturnCode(leftValue, rightValue) == 1;
            break;
    }
} else {
    int1 = doEqualityComparisonAndReturnCode(leftValue, rightValue);
    if (int1 == 0) {
        bool1 = false;
    } else if (int1 == 1) {
        bool1 = true;
    } else {
        hasInterrupt = EX_UnsupportedOperation(ec, "== and != not defined here.");
    }
}

// This is relatively harmless even if there is an interrupt
@import("inline/ValueStackCapacityCheck.pst");
if (bool1 != Core.ForceParens(row[0] == 1)) {
    valueStack[valueStackSize] = VALUE_TRUE;
} else {
    valueStack[valueStackSize] = VALUE_FALSE;
}

valueStackSize += 1;
