import Math;
import Game;

class LoadingScene : AbstractScene {

    field postCompletionCounter = 0;
    field counter = 0;
    field progress = 0;

    field loader = new GameImageLoader()
        .easeLoadingAnimationAcrossMinimumDuration(1)
        .addImageModifier((path, img) => {
            if (path.endsWith('/kelp.png')) {
                output = {};
                flipped = img.clone();
                flipped.edit().flip(false, true).finish();
                output[path.replace('kelp.png', 'kelp-flipped.png')] = flipped;
                return output;
            }
        });

    function update(isTap) {
        this.loader.update();
        if (this.loader.isDone() && this.postCompletionCounter == 0) {
            this.switchSceneWithFade(new TitleScene());
            this.postCompletionCounter++;
            ImageLibrary.populateLibrary(this.loader.getImagesByPath());
        } else if (this.postCompletionCounter > 0) {
            this.postCompletionCounter++;
        }

        this.progress = this.loader.getProgress();

        this.counter++;
    }

    function render(draw) {
        this.loader.setRenderContext(draw);
        draw.fill(0, 0, 0);

        dotCount = 100;
        mainRadius = 100 + this.postCompletionCounter * 8.0;
        dotRadius = 8;
        lightBlue = [100, 200, 255];
        darkBlue = [0, 0, 80];
        for (i = 0; i < dotCount; ++i) {
            theta = Math.PI * 2 * (0.1 * this.counter / FPS + 1.0 * i / dotCount);
            x = Math.floor(Math.cos(theta) * mainRadius + WIDTH / 2);
            y = Math.floor(Math.sin(theta) * mainRadius + HEIGHT / 2);
            color = 1.0 * i / dotCount <= this.progress ? lightBlue : darkBlue;
            draw.ellipse(
                x - dotRadius, y - dotRadius, dotRadius * 2, dotRadius * 2,
                color[0], color[1], color[2]);
        }
    }
}
