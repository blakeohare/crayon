using System;
using System.Linq;
using System.Collections.Generic;
using Interpreter.Structs;

namespace Interpreter.Vm
{
    public static class TranslationHelper
    {
        public static readonly Random Random = new Random();

        public static VmContext ProgramData { get; set; }
        public static VmGlobals Globals { get { return ProgramData.globals; } }
        public static string[] CommandLineArgs { get; set; }
        public static string ResourceManifest { get; set; }
        public static string ImageSheetManifest { get; set; }
        public static string ByteCode { get; set; }

        public static readonly bool IsWindows =
            Environment.OSVersion.Platform == PlatformID.Win32NT ||
            Environment.OSVersion.Platform == PlatformID.Win32S ||
            Environment.OSVersion.Platform == PlatformID.Win32Windows ||
            Environment.OSVersion.Platform == PlatformID.WinCE;

        public static InterpreterResult StartInterpreter()
        {
            return HandleInterpreterStatus(CrayonWrapper.v_startVm(ProgramData));
        }

        public static InterpreterResult RunInterpreter(int executionContextId)
        {
            return HandleInterpreterStatus(CrayonWrapper.v_runInterpreter(ProgramData, executionContextId));
        }

        public static InterpreterResult RunInterpreter(Value functionPointer, params Value[] args)
        {
            return HandleInterpreterStatus(CrayonWrapper.v_runInterpreterWithFunctionPointer(ProgramData, functionPointer, args));
        }

        private static InterpreterResult HandleInterpreterStatus(InterpreterResult result)
        {
            while (result.status == 5 || result.status == 6) // REINVOKE || LOAD_ASSEMBLY
            {
                if (result.status == 6) // LOAD_ASSEMBLY
                {
                    string[] parts = result.loadAssemblyInformation.Split(',');
                    string name = parts[0];
                    string version = parts[1];
                    TranslationHelper.LibraryRegistry.LoadAssembly(name, version);
                }
                else
                {
                    double sleepForSeconds = result.reinvokeDelay;
                    System.Threading.Thread.Sleep((int)(1000 * sleepForSeconds));
                }
                result = CrayonWrapper.v_runInterpreter(ProgramData, result.executionContextId);
            }
            if (result.status == 1) // FINISHED
            {
                if (result.isRootContext) Environment.Exit(0);
                return result;
            }
            if (result.status == 2) return result; // SUSPEND
            if (result.status == 3) // FATAL
            {
                if (result.isRootContext) Environment.Exit(1);
                return result;
            }
            throw new Exception(); // invalid status
        }

        public static void ShuffleInPlace<T>(List<T> list)
        {
            if (list.Count < 2) return;
            int length = list.Count;
            int tIndex;
            T tValue;
            for (int i = length - 1; i >= 0; --i)
            {
                tIndex = Random.Next(length);
                tValue = list[tIndex];
                list[tIndex] = list[i];
                list[i] = tValue;
            }
        }

        public static bool AlwaysTrue() { return true; }
        public static bool AlwaysFalse() { return false; }

        public static LibraryRegistry LibraryRegistry { get; set; }

        private static List<Func<string, object>> functionPointerResolvers = new List<Func<string, object>>();

        public static object GetFunctionPointer(string name)
        {
            foreach (Func<string, object> fpResolvers in functionPointerResolvers)
            {
                object output = fpResolvers(name);
                if (output != null)
                {
                    return output;
                }
            }
            return null;
        }

        public static void RegisterFunctionPointerResolver(Func<string, object> resolver)
        {
            functionPointerResolvers.Add(resolver);
        }
    }
}
