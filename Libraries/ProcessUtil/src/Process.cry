import Environment;
import Math;

namespace ProcessUtil {

    class Process {

        field _executable = null;
        field _args = null;
        field _onStdOut = null;
        field _onStdErr = null;
        field _onFinish = null;
        field _timeouts = [];
        field _isRunning = false;
        field _isFinished = false;
        field _pid = null;
        field _cwd = null;

        constructor() {
            if (!Process.isSupported()) throw new Exception("Launching processes are not supported on this platform.");
        }

        static function isSupported() {
            env = Environment.getEnvironment();
            return env['type'] == 'desktop';
        }

        function getId() {
            return this._pid;
        }

        function setExecutable(e) {
            this._executable = e + '';
            return this;
        }

        function setArgs(args) {
            if (typeof(args) != Type.LIST) args = [args];
            for (arg : args) {
                if (typeof(arg) != Type.STRING) {
                    throw new InvalidArgumentException("Invalid argument for process arg: " + (arg ?? 'null'));
                }
            }
            this._args = args.clone();
            return this;
        }

        function setWorkingDirectory(cwd) {
            this._cwd = cwd;
            return this;
        }

        function onStdOut(cb) {
            this._onStdOut = cb;
            return this;
        }

        function onStdErr(cb) {
            this._onStdErr = cb;
            return this;
        }

        function onFinish(cb) {
            this._onFinish = cb;
            return this;
        }

        function onTimeout(seconds, cb) {
            this._timeouts.add([Math.floor(1000 * seconds), cb]);
            return this;
        }

        function isRunning() { return this._isRunning; }

        function run() {
            if (this._isRunning) throw new Exception("Process is already running.");
            if (this._isFinished) throw new Exception("Process has already been run.");

            onFinish = (status) => {
                this._isRunning = false;
                if (this._onFinish != null) this._onFinish(parseInt(status));
            };
            onData = (lines) => {
                for (i = 0; i < lines.length; i += 2) {
                    type = lines[i];
                    str = lines[i + 1];
                    handler = type == 'E' ? this._onStdErr : type == 'S' ? this._onStdOut : onFinish;
                    if (handler != null) handler(str);
                }
            };
            this._pid = $$$('processRun', this, this._executable, this._args ?? [], onData, (this._cwd ?? '') + '');
            // TODO: return status codes as negative numbers.
            if (this._pid == -1) throw new Exception("An error occurred while launching the process.");
            return this._pid;
        }

        function awaitRun() {
            status = null;
            this._onFinish = s => {
                status = s;
                if (this._onFinish != null) this._onFinish(s);
            };
            this.run();
            while (status == null) {
                Core.sleep(0.01);
            }
            return status;
        }

        function kill() {
            killProcess(this._pid);
        }

        static function getCurrentProcessId() {
            if (!Process.isSupported()) throw new Exception("This feature is not supported on this platform.");
            return $$$('processCurrentId');
        }
    }
}
