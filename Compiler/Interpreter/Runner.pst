/*
    Simply call this to kick off program execution.
    This function is always safe to call as it will block or not block appropriately and register
    appropriate callbacks in the latter case.
    e.g.
        <body onload="v_main()">...</body>
        public static void main(String[] args) { CrayonWrapper.v_main(); }
        <?php v_main(); ?>

    return value is meaningless.
*/
int main() {

    initialize_constant_values();
    ResourceDB resources = resource_manager_initialize();

    Code byteCode = loadByteCode();
    Array<int> ops = byteCode.ops;
    int opsLength = ops.Size();
    Array<Array<int>> opArgs = byteCode.args;
    Array<string> stringArgs = byteCode.stringArgs;

    int i = 0;

    Array<Value> localsStack = new Array<Value>(10);
    Array<int> localsStackSet = new Array<int>(10);
    for (i = localsStack.Size() - 1; i >= 0; i -= 1) {
        localsStack[i] = null;
        localsStackSet[i] = 0;
    }

    StackFrame stack = new StackFrame(
        0, // pc
        1, // localsStackSetToken
        0, // localsStackOffset
        0, // localsStackOffsetEnd
        null, // previous
        false, // returnValueUsed
        null, // object context
        0, // valueStackSize
        0, // static initialization class ID marker upon completion (not applicable here)
        1, // stack depth
        PostFinallyBehavior.NOTHING,
        null, // temp return value
        null); // closure lookup

    ExecutionContext executionContext = new ExecutionContext(
        0, // execution context ID. 0 is always the root process and execution will end entirely if this context ends.
        stack,

        // The value stack:
        0, // size
        100, // capacity
        new Array<Value>(100), // array

        localsStack,
        localsStackSet,
        1, // localsStackSetToken

        0, // executionCounter

        false, // exception handled
        null, // active exception

        false, // execution state changed
        0, // execution state change command

        null); // active interrupt

    Dictionary<int, ExecutionContext> executionContexts = new Dictionary<int, ExecutionContext>();
    executionContexts[0] = executionContext;

    VmContext vm = new VmContext(
        executionContexts,
        executionContext.id, // last execution context ID
        ops,
        opArgs,
        stringArgs,
        null, // identifiers
        new List<string>(), // identifiers builder
        new Dictionary<string, int>(), // invIdentifiers
        null, // literal table
        new List<Value>(), // literal table builder
        new Array<List<Token>>(ops.Size()), // token data
        0, // user code start
        null, // original source code data
        new List<string>(), // original source code data builder
        null, // integer switch lookups
        new List<Dictionary<int, int>>(), // integer switch lookups builder
        null, // string switch lookups
        new List<Dictionary<string, int>>(), // string switch lookups builder
        0, // instance counter

        false, // initialization complete

        // OO stuff
        new Array<ClassInfo>(100),
        new Array<FunctionInfo>(100),
        new Dictionary<int, FunctionInfo>(),
        new List<int>(), // class static initialization stack
        null, // globalNameIdToPrimitiveMethodName (set in FINALIZE_INITIALIZATION)
        null, // funcArgs (set in FINALIZE_INITIALIZATION)
        new Dictionary<int, Func<Value, Array<Value>>>(), // CNI function pointers by ID

        -1, // the global name ID for "length"
        new Array<int>(10), // primitive method to function ID fallback lookup
        resources, // resource database
        null, // project ID (set during finalize initialization)
        null, // ESF data (generated by the ESF_LOOKUP op)
        new MagicNumbers(0, 0, 0),
        null, // Value stack depth by PC

        new Dictionary<string, int>(), // inverse function name literal lookup
        -1, // active library reference ID

        new List<Value>(), // shutdown handlers
        new Dictionary<int, Dictionary<int, int>>() // classMemberLocalizerBuilder
        );
    Core.SetProgramData(vm);

    runInterpreter(vm, executionContext.id);
    return 0;
}

/*
    Returns a boolean. If false, end the program entirely.

    It is conceivable that the initial invocation to this will block and create successive invocations
    during the lifetime of the initial invocation. (for example, a blocking window is opened)
    This is why the output of the initial invocation is meaningless.
*/
int runInterpreter(VmContext vm, int executionContextId) {
    InterpreterResult result = interpret(vm, executionContextId);
    int status = result.status;
    bool shutdown = false;
    if (status == InterpreterResultStatus.FINISHED) {
        if (vm.executionContexts.Contains(executionContextId)) {
            vm.executionContexts.Remove(executionContextId);
        }
        runShutdownHandlers(vm);
        shutdown = true;
    } else if (status == InterpreterResultStatus.FATAL_ERROR) {
        // TODO: don't generate the error in the interpreter. Instead just return the message and
        // the stack trace will be determined from the stack here. Also later add logic to
        // conditionally find symbol information here.
        Core.PrintStdOut(result.errorMessage);
        runShutdownHandlers(vm);
        shutdown = true;
    }
    if (shutdown && executionContextId == 0) {
        Core.VmEndProcess();
    }
    return status;
}

int runShutdownHandlers(VmContext vm) {
    // This will recursively invoke the shutdown handlers upon completion,
    // so be sure to pop off the handler as it's used.
    while (vm.shutdownHandlers.Size() > 0) {
        // Pop from the front. An iterating index will not be accurate if state is modified recursively.
        Value handler = vm.shutdownHandlers[0];
        vm.shutdownHandlers.RemoveAt(0);
        runInterpreterWithFunctionPointer(vm, handler, new Array<Value>(0));
    }
    return 0;
}

int runInterpreterWithFunctionPointer(VmContext vm, Value fpValue, Array<Value> args) {
    int newId = vm.lastExecutionContextId + 1;
    vm.lastExecutionContextId = newId;
    List<Value> argList = new List<Value>();
    for (int i = 0; i < args.Size(); i += 1) {
        argList.Add(args[i]);
    }
    Array<Value> locals = new Array<Value>(0);
    Array<int> localsSet = new Array<int>(0);
    Array<Value> valueStack = new Array<Value>(100);
    valueStack[0] = fpValue;
    valueStack[1] = new Value(Types.LIST, argList);
    StackFrame stack = new StackFrame(
        vm.ops.Size() - 2, // pc
        1, // localsStackSetToken
        0, // localsStackOffset
        0, // localsStackOffsetEnd
        null, // previous
        false, // returnValueUsed
        null, // object context
        0, // valueStackSize
        0, // static initialization class ID marker upon completion (not applicable here)
        1, // stack depth
        PostFinallyBehavior.NOTHING,
        null, // temp return value
        null // closure lookup
        );

    ExecutionContext executionContext = new ExecutionContext(
        newId, // execution context ID. 0 is always the root process and execution will end entirely if this context ends.
        stack,

        // The value stack:
        2, // size
        100, // capacity
        valueStack, // array

        locals,
        localsSet,
        1, // localsStackSetToken

        0, // executionContext

        false, // exception handled
        null, // active exception

        false, // execution state changed
        0, // execution state change command

        null); // active interrupt

    vm.executionContexts[newId] = executionContext;
    return runInterpreter(vm, newId);
}

// TODO: remove this (usages may still exist in some libraries as artifacts of .cry->.pst conversion)
int noop() {
    return 0;
}
