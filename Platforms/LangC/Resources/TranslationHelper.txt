int* INT_BUFFER_16 = (int*)malloc(sizeof(int) * 16);
int** STR_BUFFER_16 = (int**)malloc(sizeof(int*) * 16);
double* FLOAT_BUFFER_16 = (double*)malloc(sizeof(double) * 16);

int** STRING_TABLE = NULL;

ProgramData* PROGRAM_DATA;

void print_with_conversion(int** str)
{
	if (str[-1] == 0)
	{
		printf("\n");
	}
	else
	{
		char* c_string = String_to_cstring(str);
		printf("%s\n", c_string);
		free(c_string);
	}
}

int parse_int(int** safe_str)
{
	int output = 0;
	int is_positive = 1;
	int size = safe_str[-1];
	int index = 0;
	if (safe_str[0] == (int) '-')
	{
		index++;
		is_positive = 0;
	}

	while (index < size)
	{
		output = output * 10 + (int) (safe_str[index] - '0');
	}

	return is_positive ? output : -output;
}

List* multiply_list(List* original, int n, int item_size)
{
	List* output = List_new(item_size);
	if (n == 0) return output;

	while (output->capacity < n)
	{
		List_increase_capacity(output, item_size);
	}
	int period = item_size * n;
	char* copy_ptr = output->char_items;
	char* from_ptr = original->char_ptr;
	while (period-- > 0)
	{
		memcpy(from_ptr, copy_ptr, period);
		copy_ptr += period;
	}
	return output;
}

int* TranslationHelper_char_to_string(int c) {
	int* str = malloc(sizeof(int) * 4);
	str[0] = c < 128 ? 1 : 2; // WRONG. TODO: use the correct conversion
	str[1] = 0;
	str[2] = 1;
	str[3] = c;
	return str + 3;
}

int* TranslationHelper_int_to_string(int value) {
	if (value == 0) return TranslationHelper_char_to_string('0');

	int characters[] = int[15];
	int size = 0;
	int sign = 1;
	if (value < 0)
	{
		sign = -1;
		value = -value;
	}

	while (value > 0)
	{
		characters[size++] = (value % 10) + '0';
		value = value / 10;
	}

	if (sign == -1)
	{
		characters[size++] = '-';
	}

	int* str = malloc(sizeof(int) * (size + 3));
	str[0] = size;
	str[1] = 0;
	str[2] = size;
	str += 3;
	for (int i = 0; i < size; ++i)
	{
		str[i] = characters[size - i - 1];
	}
	return str;
}

int* TranslationHelper_double_to_string(double value) {
	char buffer[50];
	snprintf(buffer, 50, "%f", value);
	return String_from_utf8(buffer);
}

int* TranslationHelper_list_join_strings(List* strings_list, int* sep)
{
	int strings_length = strings_list->size;
	int total_length = (strings_length - 1) * sep[-1];
	int total_bytes = sep[-3] * (strings_length - 1);
	int** strings = (int**)strings_list->ptr_items;
	for (int i = 0; i < strings_length; ++i)
	{
		total_length += strings[i][-1];
		total_bytes += strings[i][-3];
	}

	int* output = malloc(sizeof(int) * (total_length + 3));
	output[0] = total_bytes;
	output[1] = 0;
	output[2] = total_length;
	output += 3;
	int j;
	int k;
	int current_length;
	int sep_length = sep[-1];
	int* current_string;
	int index = 0;
	for (int i = 0; i < strings_length; ++i)
	{
		if (i > 0)
		{
			for (j = 0; j < sep_length; ++j)
			{
				output[index++] = sep[j];
			}
		}
		current_string = strings[i];
		current_length = current_string[-1];
		for (j = 0; j < current_length; ++j)
		{
			output[index++] = current_string[j];
		}
	}
	return output;
}
