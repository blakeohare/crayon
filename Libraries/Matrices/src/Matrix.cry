namespace Matrices {

    class Matrix {
        field width;
        field height;
        field _data;

        constructor(height, width) {
            this.width = width;
            this.height = height;
            this._data = (width * height) * [0.0];
        }

        static function newIdentityMatrix(size) {
            matrix = new Matrices.Matrix(size, size);
            index = 0;
            d = matrix._data;
            for (i = 0; i < size; ++i) {
                d[index] = 1.0;
                index += size + 1;
            }
            return matrix;
        }

        function getValue(row, col) {
            return this._data[row * this.width + col];
        }

        function setValue(row, col, value) {
            this._data[row * this.width + col] = value;
            return this;
        }

        function multiplyByScalar(value, output = null) {
            len = this.width * this.height;
            output = output ?? this;
            d1 = this._data;
            d2 = output._data;
            for (i = 0; i < len; ++i) {
                output[i] = d1[i] * value;
            }
            return output;
        }

        function addMatrix(other, output = null) {
            output = output ?? new Matrix(this.height, this.width);
            if (this.width != other.width ||
                this.height != other.height ||
                this.width != output.width ||
                this.height != output.height) {
                throw new InvalidArgumentException("Matrices must be the same size.");
            }

            d1 = this._data;
            d2 = other._data;
            d3 = output._data;
            len = d1.length;
            for (i = 0; i < len; ++i) {
                d3[i] = d1[i] + d2[i];
            }
            return output;
        }

        function multiplyByMatrix(other, output = null) {
            if (this.width != other.height) throw new InvalidArgumentException("First matrix's width must be equal to the second matrix's height.");

            if (output != null) {
                if (this.height != output.height) throw new InvalidArgumentException("output matrix's height must match the first matrix's height.");
                if (other.width != output.width) throw new InvalidArgumentException("output matrix's width must match the second matrix's width.");
                d3 = [0.0] * output._data.length;
            } else {
                output = new Matrix(this.height, other.width);
                d3 = output._data;
            }

            // TODO: move this to a core function
            d1 = this._data;
            d2 = other._data;
            d3 = output._data;
            i3 = 0;
            for (y = 0; y < output.height; ++y) {
                for (x = 0; x < output.width; ++x) {
                    i1 = y * this.width;
                    i2 = x;
                    value = 0.0;
                    for (i = 0; i < this.width; ++i) {
                        value += d1[i1] * d2[i2];
                        i1 += 1;
                        i2 += other.width;
                    }
                    d3[i3++] = value;
                }
            }

            output._data = d3;
            return output;
        }

        function toVector(output) {
            return this._data.clone();
        }

        function copyFrom(other) {
            this._data = other._data.clone();
            this.width = other.width;
            this.height = other.height;
            return this;
        }
    }
}
