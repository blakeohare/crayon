/*
    args[0] -> string value
    args[1] -> format
        1: ASCII
        2: ISO-8859-1
        3: UTF-8
        4: UTF-16 Little Endian
        5: UTF-16 Big Endian
        6: UTF-32 Little Endian
        7: UTF-32 Big Endian
    args[2] -> include BOM (bool)
    args[3] -> output list.
        Create a new list and add that list to the output list.
        This will result in a NESTED list where this output list that is passed in will have only 1 item in it.
*/
VM.Value lib_textencoding_convertTextToBytes(VM.VmContext vm, Array<VM.Value> args) {
    string value = (string) args[0].internalValue;
    int format = (int) args[1].internalValue;
    bool includeBom = (bool) args[2].internalValue;
    VM.ListImpl output = (VM.ListImpl) args[3].internalValue;
    List<VM.Value> byteList = new List<VM.Value>();
    Array<int> intOut = Core.IntBuffer16;
    int sc = Extension._lib_textencoding_convertTextToBytes(
        value,
        includeBom,
        format,
        byteList,
        vm.globals.positiveIntegers,
        intOut);

    // Swap the endian-ness.
    int swapWordSize = intOut[0];
    if (swapWordSize != 0) {
        int i = 0;
        int j = 0;
        int length = byteList.Size();
        VM.Value swap = null;
        int half = swapWordSize >> 1;
        int k = 0;
        while (i < length) {
            k = i + swapWordSize - 1;
            for (j = 0; j < half; j += 1) {
                swap = byteList[i + j];
                byteList[i + j] = byteList[k - j];
                byteList[k - j] = swap;
            }
            i += swapWordSize;
        }
    }
    if (sc == 0) VM.addToList(output, VM.buildList(byteList));
    return VM.buildInteger(vm.globals, sc);
}
