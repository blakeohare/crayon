if (argCount != 1) {
    if (argCount == 0) {
        value2 = globals.stringEmpty;
    } else {
        hasInterrupt = EX_InvalidArgument(ec, primitiveMethodWrongArgCountError("list join method", 1, argCount));
    }
} else {
    value2 = funcArgs[0];
    if (value2.type != Types.STRING) {
        hasInterrupt = EX_InvalidArgument(ec, "Argument of list.join needs to be a string.");
    }
}

if (!hasInterrupt) {
    stringList1 = new List<string>();
    string1 = (string) value2.internalValue; // separator
    _len = list1.size;
    for (i = 0; i < _len; i += 1) {
        if (@ext_boolean("ARRAY_IS_LIST")) {
            value = list1.list[i];
        } else {
            value = list1.array[i];
        }
        if (value.type != Types.STRING) {
            string2 = valueToString(vm, value);
        } else {
            string2 = (string) value.internalValue;
        }
        stringList1.Add(string2);
    }
    output = buildString(globals, stringList1.Join(string1));
}
