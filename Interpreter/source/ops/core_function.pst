switch (row[0]) {

    case 1: Core.EmitComment("parseInt"); @import("corefuncs/parseInt.pst"); break;
    case 2: Core.EmitComment("parseFloat"); @import("corefuncs/parseFloat.pst"); break;
    case 3: Core.EmitComment("print"); @import("corefuncs/print.pst"); break;
    case 4: Core.EmitComment("typeof"); @import("corefuncs/typeof.pst"); break;
    case 5: Core.EmitComment("typeis"); @import("corefuncs/typeis.pst"); break;
    case 6: Core.EmitComment("execId"); @import("corefuncs/execId.pst"); break;
    case 7: Core.EmitComment("assert"); @import("corefuncs/assert.pst"); break;
    case 8: Core.EmitComment("chr"); @import("corefuncs/chr.pst"); break;
    case 9: Core.EmitComment("ord"); @import("corefuncs/ord.pst"); break;
    case 10: Core.EmitComment("currentTime"); @import("corefuncs/currentTime.pst"); break;
    case 11: Core.EmitComment("sortList"); @import("corefuncs/sortList.pst"); break;
    case 12: Core.EmitComment("abs"); @import("corefuncs/abs.pst"); break;
    case 13: Core.EmitComment("arcCos"); @import("corefuncs/arcCos.pst"); break;
    case 14: Core.EmitComment("arcSin"); @import("corefuncs/arcSin.pst"); break;
    case 15: Core.EmitComment("arcTan"); @import("corefuncs/arcTan.pst"); break;
    case 16: Core.EmitComment("cos"); @import("corefuncs/cos.pst"); break;
    case 17: Core.EmitComment("ensureRange"); @import("corefuncs/ensureRange.pst"); break;
    case 18: Core.EmitComment("floor"); @import("corefuncs/floor.pst"); break;
    case 19: Core.EmitComment("max"); @import("corefuncs/max.pst"); break;
    case 20: Core.EmitComment("min"); @import("corefuncs/min.pst"); break;
    case 21: Core.EmitComment("nativeInt"); @import("corefuncs/nativeInt.pst"); break;
    case 22: Core.EmitComment("nativeString"); @import("corefuncs/nativeString.pst"); break;
    case 23: Core.EmitComment("sign"); @import("corefuncs/sign.pst"); break;
    case 24: Core.EmitComment("sin"); @import("corefuncs/sin.pst"); break;
    case 25: Core.EmitComment("tan"); @import("corefuncs/tan.pst"); break;
    case 26: Core.EmitComment("log"); @import("corefuncs/log.pst"); break;
    case 27: Core.EmitComment("intQueueClear"); @import("corefuncs/intQueueClear.pst"); break;
    case 28: Core.EmitComment("intQueueWrite16"); @import("corefuncs/intQueueWrite16.pst"); break;
    case 29: Core.EmitComment("execCounter"); @import("corefuncs/execCounter.pst"); break;
    case 30: Core.EmitComment("sleep"); @import("corefuncs/sleep.pst"); break;
    case 31: Core.EmitComment("projectId"); @import("corefuncs/projectId.pst"); break;
    case 32: Core.EmitComment("isJavaScript"); @import("corefuncs/isJavaScript.pst"); break;
    case 33: Core.EmitComment("isAndroid"); @import("corefuncs/isAndroid.pst"); break;
    case 34: Core.EmitComment("allocNativeData"); @import("corefuncs/allocNativeData.pst"); break;
    case 35: Core.EmitComment("setNativeData"); @import("corefuncs/setNativeData.pst"); break;
    case 36: Core.EmitComment("getExceptionTrace"); @import("corefuncs/getExceptionTrace.pst"); break;
    case 37: Core.EmitComment("reflectAllClasses"); @import("corefuncs/reflectAllClasses.pst"); break;
    case 38: Core.EmitComment("reflectGetMethods"); @import("corefuncs/reflectGetMethods.pst"); break;
    case 39: Core.EmitComment("reflectGetClass"); @import("corefuncs/reflectGetClass.pst"); break;
    case 40: Core.EmitComment("convertFloatArgsToInts"); @import("corefuncs/convertFloatArgsToInts.pst"); break;
    case 41: Core.EmitComment("addShutdownHandler"); @import("corefuncs/addShutdownHandler.pst"); break;
    case 42: Core.EmitComment("nativeTunnelSend"); @import("corefuncs/nativeTunnelSend.pst"); break;
    case 43: Core.EmitComment("nativeTunnelRecv"); @import("corefuncs/nativeTunnelRecv.pst"); break;
    case 45: Core.EmitComment("ipcNamedPipeCreate"); @import("corefuncs/ipcNamedPipeCreate.pst"); break;
    case 46: Core.EmitComment("ipcNamedPipeSend"); @import("corefuncs/ipcNamedPipeSend.pst"); break;
    case 47: Core.EmitComment("ipcNamedPipeFlush"); @import("corefuncs/ipcNamedPipeFlush.pst"); break;
    case 48: Core.EmitComment("randomFloat"); @import("corefuncs/randomFloat.pst"); break;
    case 49: Core.EmitComment("randomInt"); @import("corefuncs/randomInt.pst"); break;
    case 50: Core.EmitComment("resourceGetManifest"); @import("corefuncs/resourceGetManifest.pst"); break;
    case 51: Core.EmitComment("resourceGetText"); @import("corefuncs/resourceGetText.pst"); break;
    case 52: Core.EmitComment("environmentGetVariable"); @import("corefuncs/environmentGetVariable.pst"); break;
    case 53: Core.EmitComment("srandomPopulateQueue"); @import("corefuncs/srandomPopulateQueue.pst"); break;
    case 54: Core.EmitComment("dateTimeGetUtcOffsetAt"); @import("corefuncs/dateTimeGetUtcOffsetAt.pst"); break;
    case 55: Core.EmitComment("dateTimeInitTimeZone"); @import("corefuncs/dateTimeInitTimeZone.pst"); break;
    case 56: Core.EmitComment("dateTimeInitTimeZoneList"); @import("corefuncs/dateTimeInitTimeZoneList.pst"); break;
    case 57: Core.EmitComment("dateTimeIsDstOccurringAt"); @import("corefuncs/dateTimeIsDstOccurringAt.pst"); break;
    case 58: Core.EmitComment("dateTimeParseDate"); @import("corefuncs/dateTimeParseDate.pst"); break;
    case 59: Core.EmitComment("dateTimeUnixToStructured"); @import("corefuncs/dateTimeUnixToStructured.pst"); break;
    case 60: Core.EmitComment("ipcNamedPipeServerCreate"); @import("corefuncs/ipcNamedPipeServerCreate.pst"); break;
    case 61: Core.EmitComment("ipcNamedPipeServerClose"); @import("corefuncs/ipcNamedPipeServerClose.pst"); break;
    case 63: Core.EmitComment("jsInteropInvoke"); @import("corefuncs/jsInteropInvoke.pst"); break;
    case 64: Core.EmitComment("jsInteropRegisterCallback"); @import("corefuncs/jsInteropRegisterCallback.pst"); break;
    case 65: Core.EmitComment("jsInteropCallbackReturn"); @import("corefuncs/jsInteropCallbackReturn.pst"); break;
    case 66: Core.EmitComment("imageCreate"); @import("corefuncs/imageCreate.pst"); break;
    case 67: Core.EmitComment("imageGetPixel"); @import("corefuncs/imageGetPixel.pst"); break;
    case 68: Core.EmitComment("imageSetPixel"); @import("corefuncs/imageSetPixel.pst"); break;
    case 69: Core.EmitComment("imageScale"); @import("corefuncs/imageScale.pst"); break;
    case 70: Core.EmitComment("imageSessionStart"); @import("corefuncs/imageSessionStart.pst"); break;
    case 71: Core.EmitComment("imageSessionFinish"); @import("corefuncs/imageSessionFinish.pst"); break;
    case 72: Core.EmitComment("imageBlit"); @import("corefuncs/imageBlit.pst"); break;
    case 73: Core.EmitComment("imageAtlasManifest"); @import("corefuncs/imageAtlasManifest.pst"); break;
    case 74: Core.EmitComment("imageLoadChunk"); @import("corefuncs/imageLoadChunk.pst"); break;
    case 75: Core.EmitComment("imageGetChunkSync"); @import("corefuncs/imageGetChunkSync.pst"); break;
    case 76: Core.EmitComment("makeByteList"); @import("corefuncs/makeByteList.pst"); break;
    case 77: Core.EmitComment("bytesObjToList"); @import("corefuncs/bytesObjToList.pst"); break;
    case 78: Core.EmitComment("httpSend"); @import("corefuncs/httpSend.pst"); break;
    case 79: Core.EmitComment("imageFromBytes"); @import("corefuncs/imageFromBytes.pst"); break;
    case 80: Core.EmitComment("imageB64BytesPreferred"); @import("corefuncs/imageB64BytesPreferred.pst"); break;
    case 81: Core.EmitComment("imageEncode"); @import("corefuncs/imageEncode.pst"); break;
    case 82: Core.EmitComment("argVerifyIntRange"); @import("corefuncs/argVerifyIntRange.pst"); break;
    case 83: Core.EmitComment("argVerifyNums"); @import("corefuncs/argVerifyNums.pst"); break;
    case 84: Core.EmitComment("xmlParse"); @import("corefuncs/xmlParse.pst"); break;
    case 85: Core.EmitComment("launchBrowser"); @import("corefuncs/launchBrowser.pst"); break;
    case 86: Core.EmitComment("cryptoDigest"); @import("corefuncs/cryptoDigest.pst"); break;
    case 87: Core.EmitComment("bytesToText"); @import("corefuncs/bytesToText.pst"); break;
    case 88: Core.EmitComment("textToBytes"); @import("corefuncs/textToBytes.pst"); break;
    case 89: Core.EmitComment("jsonSerialize"); @import("corefuncs/jsonSerialize.pst"); break;
    case 90: Core.EmitComment("environmentDescriptor"); @import("corefuncs/environmentDescriptor.pst"); break;
    case 91: Core.EmitComment("jsonParse"); @import("corefuncs/jsonParse.pst"); break;
}

if (row[1] == 1) { // output used?
    @import("inline/ValueStackCapacityCheck.pst");
    valueStack[valueStackSize] = output;
    valueStackSize += 1;
}
