
Value buildNull(VmGlobals globals) {
    return globals.valueNull;
}

// These are prone to infinite recursion.
// The problem is that not all platforms have a way to check for reference equality for things
// like dictionaries or lists.
string valueToString(VmContext vm, Value wrappedValue) {

    int type = wrappedValue.type;

    if (type == Types.NULL) return "null";

    if (type == Types.BOOLEAN) {
        if (((bool) wrappedValue.internalValue)) {
            return "true";
        }
        return "false";
    }

    if (type == Types.FLOAT) {
        string floatStr = Core.FloatToString(((double) wrappedValue.internalValue));
        if (!floatStr.Contains(".")) {
            Core.StringAppend(floatStr, ".0");
        }
        return floatStr;
    }

    if (type == Types.INTEGER) return Core.IntToString(((int) wrappedValue.internalValue));

    if (type == Types.STRING) return ((string) wrappedValue.internalValue);

    if (type == Types.LIST) {
        List<Value> internalList = ((List<Value>) wrappedValue.internalValue);
        string output = "[";
        for (int i = 0; i < internalList.Size(); i += 1) {
            if (i > 0) {
                Core.StringAppend(output, ", ");
            }
            Core.StringAppend(output, valueToString(vm, internalList[i]));
        }
        Core.StringAppend(output, "]");
        return output;
    }

    if (type == Types.INSTANCE) {
        ObjectInstance objInstance = ((ObjectInstance) wrappedValue.internalValue);
        int classId = objInstance.classId;
        int ptr = objInstance.objectId;
        ClassInfo classInfo = vm.metadata.classTable[classId];
        int nameId = classInfo.nameId;
        string className = vm.metadata.identifiers[nameId];
        return Core.StringConcatAll("Instance<", className, "#", Core.IntToString(ptr), ">");
    }

    if (type == Types.DICTIONARY) {
        // This is nasty because not all platforms have a way to check for instance equality for lists and dictionaries.
        // Therefore this is also prone to infinite recursion.
        DictImpl dict = (DictImpl) wrappedValue.internalValue;
        if (dict.size == 0) {
            return "{}";
        }

        // TODO: STRING BUILDER! OMG, WHY DID YOU DO THIS
        string output = "{";
        List<Value> keyList = dict.keys;
        List<Value> valueList = dict.values;
        for (int i = 0; i < dict.size; i += 1) {
            if (i > 0) Core.StringAppend(output, ", ");
            Core.StringAppend(output, Core.StringConcatAll(
                valueToString(vm, dict.keys[i]),
                ": ",
                valueToString(vm, dict.values[i])));
        }
        Core.StringAppend(output, " }");
        return output;
    }

    // This should not happen.
    return "<unknown>";
}

VmGlobals initializeConstantValues() {
    Array<Value> pos = new Array<Value>(INTEGER_POSITIVE_CACHE_SIZE);
    Array<Value> neg = new Array<Value>(INTEGER_NEGATIVE_CACHE_SIZE);
    for (int i = 0; i < INTEGER_POSITIVE_CACHE_SIZE; i += 1) {
        pos[i] = new Value(Types.INTEGER, i);
    }
    for (i = 1; i < INTEGER_NEGATIVE_CACHE_SIZE; i += 1) {
        neg[i] = new Value(Types.INTEGER, -i);
    }
    neg[0] = pos[0];

    VmGlobals globals = new VmGlobals(
        new Value(Types.NULL, null),
        new Value(Types.BOOLEAN, true),
        new Value(Types.BOOLEAN, false),
        pos[0],
        pos[1],
        neg[1],
        new Value(Types.FLOAT, 0.0),
        new Value(Types.FLOAT, 1.0),
        new Value(Types.STRING, ""),
        pos,
        neg,
        new Dictionary<string, Value>());
    globals.commonStrings[""] = globals.stringEmpty;
    return globals;
}

Value buildInteger(VmGlobals g, int num) {
    if (num < 0) {
        if (num > -INTEGER_NEGATIVE_CACHE_SIZE) {
            return g.negativeIntegers[-num];
        }
    } else {
        if (num < INTEGER_POSITIVE_CACHE_SIZE) {
            return g.positiveIntegers[num];
        }
    }
    return new Value(Types.INTEGER, num);
}

Value buildString(VmGlobals g, string s) {
    if (s.Size() == 0) return g.stringEmpty;
    return new Value(Types.STRING, s);
}

Value buildBoolean(VmGlobals g, bool value) {
    if (value) return g.boolTrue;
    return g.boolFalse;
}

Value buildFloat(VmGlobals g, double value) {
    // 0 and 1 are safe float comparisons, but in failure, it'll just fall back to default behavior
    if (value == 0.0) return g.floatZero;
    if (value == 1.0) return g.floatOne;
    return new Value(Types.FLOAT, value);
}

// This returns a numerical code rather than a boolean
//  0 = false
//  1 = true
//  2 = The "==" operation is not defined
int doEqualityComparisonAndReturnCode(Value a, Value b) {
    int leftType = a.type;
    int rightType = b.type;

    if (leftType == rightType) {

        if (@ext_boolean("IS_PYTHON")) {
            if (leftType < Types.LIST) {
                if (a.internalValue == b.internalValue) {
                    return 1;
                }
                return 0;
            }
        }

        int output = 0;
        switch (leftType) {
            case Types.NULL:
                output = 1;
                break;

            case Types.INTEGER:
                if ((int) a.internalValue == (int) b.internalValue) {
                    output = 1;
                }
                break;

            case Types.FLOAT:
                if ((double) a.internalValue == (double) b.internalValue) {
                    output = 1;
                }
                break;

            case Types.BOOLEAN:
                if ((bool) a.internalValue == (bool) b.internalValue) {
                    output = 1;
                }
                break;

            case Types.STRING:
                if (@ext_boolean("IS_JAVA")) {
                    if (Core.StringEquals(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else {
                    if ((string) a.internalValue == (string) b.internalValue) {
                        output = 1;
                    }
                }
                break;

            // These 3 types will always have identical references if they are truly equal.
            case Types.LIST:
            case Types.DICTIONARY:
            case Types.INSTANCE:
                if (@ext_boolean("IS_PYTHON") || @ext_boolean("IS_RUBY")) {
                    if (Core.StrongReferenceEquality(a.internalValue, b.internalValue)) {
                        output = 1;
                    }
                } else if (@ext_boolean("IS_C")) {
                    // TODO: is this okay to do? Do Value structs ever get "re-wrapped"?
                    // If this is okay, can the above case be simplified into this?
                    if (Core.StrongReferenceEquality(a, b)) {
                        output = 1;
                    }
                } else {
                    if ((object)a.internalValue == (object)b.internalValue) {
                        output = 1;
                    }
                }
                break;

            // Functions can have multiple references that are equal
            case Types.FUNCTION:
                FunctionPointer f1 = ((FunctionPointer) a.internalValue);
                FunctionPointer f2 = ((FunctionPointer) b.internalValue);
                if (f1.functionId == f2.functionId) {
                    // checking if they are pointing to the same function is not enough. Must also
                    // compare that the object they are attached to is also the same (but only true
                    // for non-static functions)
                    if ((f1.type == FunctionPointerType.METHOD) || (f1.type == FunctionPointerType.PRIMITIVE_METHOD)) {
                        if (doEqualityComparisonAndReturnCode(f1.context, f2.context) == 1) {
                            output = 1;
                        }
                    } else {
                        output = 1;
                    }
                    // TODO: currently lambdas that are from the same code location are considered equal.
                    // This should probably be instead based on reference equality instead.
                }
                break;

            // Classes can have multiple references that are equal
            case Types.CLASS:
                ClassValue c1 = (ClassValue) a.internalValue;
                ClassValue c2 = (ClassValue) b.internalValue;
                if (c1.classId == c2.classId) {
                    output = 1;
                }
                break;

            default:
                output = 2;
                break;
        }

        return output;
    }

    // if (thing == null) is ultra-common so add a short circuit for it.
    if (rightType == Types.NULL) return 0;

    // The ONLY time values of different types should be equal is with numbers.
    // Do a strict == comparison even though these are floats.
    if ((leftType == Types.INTEGER) && (rightType == Types.FLOAT)) {
        if (((int) a.internalValue) == ((double) b.internalValue)) {
            return 1;
        }
    } else if ((leftType == Types.FLOAT) && (rightType == Types.INTEGER)) {
        if (((double) a.internalValue) == ((int) b.internalValue)) {
            return 1;
        }
    }

    return 0;
}

Value buildList(List<Value> valueList) {
    return new Value(Types.LIST, valueList);
}

PlatformRelayObject buildRelayObj(
        int type,
        int iarg1,
        int iarg2,
        int iarg3,
        double farg1,
        string sarg1) {

    return new PlatformRelayObject(type, iarg1, iarg2, iarg3, farg1, sarg1);
}

Value buildCommonString(VmGlobals g, string s) {
    Dictionary<string, Value> lookup = g.commonStrings;
    if (!lookup.Contains(s)) {
        Value value = buildString(g, s);
        lookup[s] = value;
    }
    return lookup[s];
}

Value buildListCopy(Array<Value> valueList) {
    List<Value> output = new List<Value>();
    int size = valueList.Length();
    for (int i = 0; i < size; i += 1) {
        output.Add(valueList[i]);
    }
    return buildList(output);
}

Value multiplyString(VmGlobals globals, Value strValue, string str, int n) {
    if (n <= 2) {
        if (n == 1) return strValue;
        if (n == 2) return buildString(globals, Core.StringConcatAll(str, str));
        return globals.stringEmpty;
    }

    List<string> builder = new List<string>();
    while (n > 0) {
        n -= 1;
        builder.Add(str);
    }

    str = builder.Join("");
    return buildString(globals, str);
}

string stringDecode(string encoded) {
    if (!encoded.Contains("%")) {
        int length = encoded.Size();
        char per = "%"[0];
        List<string> builder = new List<string>();
        for (int i = 0; i < length; i += 1) {
            char c = encoded[i];
            if ((c == per) && ((i + 2) < length)) {
                builder.Add(stringFromHex(
                    Core.StringConcatAll("",
                    Core.CharToString(encoded[(i + 1)]),
                    Core.CharToString(encoded[(i + 2)]))));
            } else {
                builder.Add(Core.StringConcatAll("", Core.CharToString(c)));
            }
        }

        return builder.Join("");
    }

    return encoded;
}

string stringFromHex(string encoded) {
    encoded = encoded.ToUpper();
    string hex = "0123456789ABCDEF";
    List<string> output = new List<string>();
    int length = encoded.Size();
    int a = 0;
    int b = 0;
    string c = null;
    for (int i = 0; (i + 1) < length; i += 2) {
        c = Core.StringConcatAll("", Core.CharToString(encoded[i]));
        a = hex.IndexOf(c);
        if (a == -1) return null;
        c = Core.StringConcatAll("", Core.CharToString(encoded[(i + 1)]));
        b = hex.IndexOf(c);
        if (b == -1) return null;
        a = (a * 16) + b;
        output.Add(Core.CharToString(Core.Chr(a)));
    }
    return output.Join("");
}

Value buildStringDictionary(VmGlobals globals, Array<string> stringKeys, Array<Value> values) {
    int size = stringKeys.Length();
    DictImpl d = new DictImpl(size, Types.STRING, new Dictionary<int, int>(), new Dictionary<string, int>(), new List<Value>(), new List<Value>());
    string k = null;
    for (int i = 0; i < size; i += 1) {
        k = stringKeys[i];
        if (d.stringToIndex.Contains(k)) {
            d.values[d.stringToIndex[k]] = values[i];
        } else {
            d.stringToIndex[k] = d.values.Size();
            d.values.Add(values[i]);
            d.keys.Add(buildString(globals, k));
        }
    }
    d.size = d.values.Size(); // in the event of collisions, the final size won't be the size of the input.
    return new Value(Types.DICTIONARY, d);
}

// Copy the contents of the original into the clone.
// If the clone is null, create a new one.
// Return the clone.
DictImpl cloneDictionary(DictImpl original, DictImpl clone) {

    int type = original.keyType;
    int i = 0;
    int size = original.size;
    int kInt = 0;
    string kString = null;
    if (clone == null) {
        clone = new DictImpl(0, type, new Dictionary<int, int>(), new Dictionary<string, int>(), new List<Value>(), new List<Value>());
        if (type == Types.STRING) {
            while (i < size) {
                clone.stringToIndex[(string)original.keys[i].internalValue] = i;
                i += 1;
            }
        } else {
            while (i < size) {
                if (type == Types.INSTANCE) {
                    kInt = Core.ForceParens((ObjectInstance)original.keys[i].internalValue).objectId;
                } else {
                    kInt = (int)original.keys[i].internalValue;
                }
                clone.intToIndex[kInt] = i;
                i += 1;
            }
        }
        i = 0;
        while (i < size) {
            clone.keys.Add(original.keys[i]);
            clone.values.Add(original.values[i]);
            i += 1;
        }
    } else {
        for (i = 0; i < size; i += 1) {
            if (type == Types.STRING) {
                kString = (string)original.keys[i].internalValue;
                if (clone.stringToIndex.Contains(kString)) {
                    clone.values[clone.stringToIndex[kString]] = original.values[i];
                } else {
                    clone.stringToIndex[kString] = clone.values.Size();
                    clone.values.Add(original.values[i]);
                    clone.keys.Add(original.keys[i]);
                }
            } else {
                if (type == Types.INTEGER) {
                    kInt = (int)original.keys[i].internalValue;
                } else {
                    kInt = Core.ForceParens((ObjectInstance)original.keys[i].internalValue).objectId;
                }
                if (clone.intToIndex.Contains(kInt)) {
                    clone.values[clone.intToIndex[kInt]] = original.values[i];
                } else {
                    clone.intToIndex[kInt] = clone.values.Size();
                    clone.values.Add(original.values[i]);
                    clone.keys.Add(original.keys[i]);
                }
            }
        }
    }

    clone.size = clone.intToIndex.Size() + clone.stringToIndex.Size();

    return clone;
}

/*
    Sorts a list of primitives. (keyList)
    If the parallel list is not null, apply all swaps in the key list to the parallel list as well.

    intOutParam[0] -> error code:
        0 -> no error
        1 -> invalid sort keys

*/
int sortLists(List<Value> keyList, List<Value> parallelList, Array<int> intOutParam) {
    Core.IntBuffer16[0] = 0;
    int length = keyList.Size();
    if (length < 2) return 0;

    int i = 0;
    Value item = keyList[0];
    bool isString = item.type == Types.STRING;
    Array<string> stringKeys = null;
    Array<double> numKeys = null;
    if (isString) {
        stringKeys = new Array<string>(length);
    } else {
        numKeys = new Array<double>(length);
    }

    for (i = keyList.Size() - 1; i >= 0; i -= 1) {
        item = keyList[i];
        switch (item.type) {
            case Types.INTEGER:
                if (isString) {
                    Core.IntBuffer16[0] = 1;
                    return 0;
                }
                numKeys[i] = (double) ((int) item.internalValue);
                break;

            case Types.FLOAT:
                if (isString) {
                    Core.IntBuffer16[0] = 1;
                    return 0;
                }
                numKeys[i] = (double) item.internalValue;
                break;

            case Types.STRING:
                if (!isString) {
                    Core.IntBuffer16[0] = 1;
                    return 0;
                }
                stringKeys[i] = (string) item.internalValue;
                break;

            default:
                Core.IntBuffer16[0] = 1;
                return 0;
        }
    }

    qsortHelper(stringKeys, numKeys, parallelList, isString, 0, length - 1);

    return 0;
}

int qsortHelper(
        Array<string> keyStringList,
        Array<double> keyNumList,
        List<Value> parallelList,
        bool isString,
        int startIndex,
        int endIndex) {

    if ((endIndex - startIndex) <= 0) return 0;
    if ((endIndex - startIndex) == 1) {
        if (sortHelperIsRevOrder(keyStringList, keyNumList, isString, startIndex, endIndex)) {
            sortHelperSwap(keyStringList, keyNumList, parallelList, isString, startIndex, endIndex);
        }
        return 0;
    }

    int mid = (endIndex + startIndex) >> 1;
    sortHelperSwap(keyStringList, keyNumList, parallelList, isString, mid, startIndex);

    int upperPointer = endIndex + 1;
    int lowerPointer = startIndex + 1;

    while (upperPointer > lowerPointer) {
        if (sortHelperIsRevOrder(keyStringList, keyNumList, isString, startIndex, lowerPointer)) {
            lowerPointer += 1;
        } else {
            upperPointer -= 1;
            sortHelperSwap(keyStringList, keyNumList, parallelList, isString, lowerPointer, upperPointer);
        }
    }

    int midIndex = lowerPointer - 1;

    sortHelperSwap(keyStringList, keyNumList, parallelList, isString, midIndex, startIndex);
    qsortHelper(keyStringList, keyNumList, parallelList, isString, startIndex, midIndex - 1);
    qsortHelper(keyStringList, keyNumList, parallelList, isString, midIndex + 1, endIndex);

    return 0;
}

bool sortHelperIsRevOrder(
        Array<string> keyStringList,
        Array<double> keyNumList,
        bool isString,
        int indexLeft,
        int indexRight) {

    if (isString) {
        return Core.StringCompareIsReverse(keyStringList[indexLeft], keyStringList[indexRight]);
    }

    return keyNumList[indexLeft] > keyNumList[indexRight];
}

int sortHelperSwap(
        Array<string> keyStringList,
        Array<double> keyNumList,
        List<Value> values,
        bool isString,
        int index1,
        int index2) {

    if (index1 == index2) return 0;

    if (values != null) {
        Value t = values[index1];
        values[index1] = values[index2];
        values[index2] = t;
    }

    if (isString) {
        string s = keyStringList[index1];
        keyStringList[index1] = keyStringList[index2];
        keyStringList[index2] = s;
    } else {
        double n = keyNumList[index1];
        keyNumList[index1] = keyNumList[index2];
        keyNumList[index2] = n;
    }

    return 0;
}

// Used by logarithm operations that should return whole numbers
double fixFuzzyFloatPrecision(double x) {
    if ((x % 1) != 0) {
        double u = x % 1;
        if (u < 0) {
            u += 1.0;
        }
        bool roundDown = false;
        if (u > 0.9999999999) {
            roundDown = true;
            x += 0.1;
        } else {
            if (u < 0.000000000015) {
                roundDown = true;
            }
        }
        if (roundDown) {
            if (@ext_boolean("INT_IS_FLOOR") || (x > 0)) {
                x = Core.Int(x) + 0.0;
            } else {
                x = Core.Int(x) - 1.0;
            }
        }
    }
    return x;
}

double canonicalizeAngle(double a) {
    double twopi = 2 * 3.14159265358979;
    a = a % twopi;
    if (a < 0) a += twopi;
    return a;
}

double getFloat(Value num) {
    if (num.type == Types.FLOAT) return (double) num.internalValue;
    return ((int) num.internalValue) + 0.0;
}

object getNativeDataItem(Value objValue, int index) {
    ObjectInstance obj = (ObjectInstance) objValue.internalValue;
    return obj.nativeData[index];
}

int nextPowerOf2(int value) {
    if (((value - 1) & value) == 0) return value;
    int output = 1;
    while (output < value) {
        output *= 2;
    }
    return output;
}

Array<int> reallocIntArray(Array<int> original, int requiredCapacity) {
    int oldSize = original.Size();
    int size = oldSize;
    while (size < requiredCapacity) {
        size *= 2;
    }
    Array<int> output = new Array<int>(size);
    for (int i = 0; i < oldSize; i += 1) {
        output[i] = original[i];
    }
    return output;
}

Value performListSlice(VmGlobals globals, ExecutionContext ec, Array<int> row) {

    // TODO: go through and rename these appropriately. This was pulled from the main interpreter variable scope.

    Value arg1 = null;
    Value arg2 = null;
    Value arg3 = null;
    Value value = null;
    int int1 = 0;
    int int2 = 0;
    int int3 = 0;
    int int4 = 0;
    int int5 = 0;
    int i = 0;
    bool bool1 = false;
    bool bool2 = false;
    string string1 = "";
    List<Value> list1 = null;
    List<Value> list2 = null;
    List<string> stringList1 = null;

    Array<Value> valueStack = ec.valueStack;
    int valueStackSize = ec.currentValueStackSize;

    // int1 --> begin
    // int2 --> end
    // int3 --> step
    // int4 --> length of the list or string
    // int5 --> status: 0 -> OK, 1 -> the result is empty, 2 -> ERROR:step is 0, 3 -> ERROR: bad types
    // bool1 --> slice is forwards (step is positive)
    // bool2 --> slice is a string

    int5 = 0;
    if (row[2] == 1) {
        valueStackSize -= 1;
        arg3 = valueStack[valueStackSize];
        if (arg3.type == Types.INTEGER) {
            int3 = (int) arg3.internalValue;
            if (int3 == 0) {
                int5 = 2;
            }
        } else {
            int5 = 3;
            int3 = 1;
        }
    } else {
        int3 = 1;
    }
    bool1 = int3 > 0;
    if (row[1] == 1) {
        valueStackSize -= 1;
        arg2 = valueStack[valueStackSize];
        if (arg2.type == Types.INTEGER) {
            int2 = (int) arg2.internalValue;
        } else {
            int5 = 3;
        }
    } else {
        arg2 = null;
    }
    if (row[0] == 1) {
        valueStackSize -= 1;
        arg1 = valueStack[valueStackSize];
        if (arg1.type == Types.INTEGER) {
            int1 = (int) arg1.internalValue;
        } else {
            int5 = 3;
        }
    } else {
        arg1 = null;
    }
    value = valueStack[(valueStackSize - 1)];
    if (value.type == Types.STRING) {
        bool2 = true;
        string1 = (string) value.internalValue;
        int4 = string1.Size();
    } else {
        if (value.type == Types.LIST) {
            bool2 = false;
            list1 = (List<Value>) value.internalValue;
            int4 = list1.Size();
        } else {
            EX_InvalidArgument(ec, Core.StringConcatAll("Cannot apply slicing to ", getTypeFromId(value.type), ". Must be string or list."));
            return globals.valueNull;
        }
    }

    // Something is wrong. But we want to display an error of the first item that is wrong (stack is backwards) so go through
    // each argument in order and find it.

    if (int5 >= 2) {
        if (bool2) {
            string1 = "String";
        } else {
            string1 = "List";
        }
        if (int5 == 3) {
            Core.StringAppend(string1, "slice indexes must be integers. Found ");
            if ((arg1 != null) && (arg1.type != Types.INTEGER)) { EX_InvalidArgument(ec, Core.StringConcatAll(string1, getTypeFromId(arg1.type), " for begin index.")); return globals.valueNull; }
            if ((arg2 != null) && (arg2.type != Types.INTEGER)) { EX_InvalidArgument(ec, Core.StringConcatAll(string1, getTypeFromId(arg2.type), " for end index.")); return globals.valueNull; }
            if ((arg3 != null) && (arg3.type != Types.INTEGER)) { EX_InvalidArgument(ec, Core.StringConcatAll(string1, getTypeFromId(arg3.type), " for step amount.")); return globals.valueNull; }
            EX_InvalidArgument(ec, "Invalid slice arguments.");
            return globals.valueNull;
        } else { // int5 == 2
            EX_InvalidArgument(ec, Core.StringConcatAll(string1, " slice step cannot be 0."));
            return globals.valueNull;
        }
    }

    // returns a status code.
    int5 = canonicalizeListSliceArgs(Core.IntBuffer16, arg1, arg2, int1, int2, int3, int4, bool1);
    if (int5 == 1) {
        int1 = Core.IntBuffer16[0];
        int2 = Core.IntBuffer16[1];
        if (bool2) {
            // String slice
            stringList1 = new List<string>();
            if (bool1) {
                // forward
                // TODO: if step is 1, then use a simple substring call
                while (int1 < int2) {
                    stringList1.Add(Core.CharToString(string1[int1]));
                    int1 += int3;
                }
            } else {
                // backward
                while (int1 > int2) {
                    stringList1.Add(Core.CharToString(string1[int1]));
                    int1 += int3;
                }
            }
            value = buildString(globals, stringList1.Join(""));
        } else {
            // List slice
            list2 = new List<Value>();
            if (bool1) {
                // forward
                while (int1 < int2) {
                    list2.Add(list1[int1]);
                    int1 += int3;
                }
            } else {
                // backward
                while (int1 > int2) {
                    list2.Add(list1[int1]);
                    int1 += int3;
                }
            }
            value = new Value(Types.LIST, list2);
        }
    } else if (int5 == 0) {
        if (bool2) {
            value = globals.stringEmpty;
        } else {
            value = new Value(Types.LIST, new List<Value>());
        }
    } else if (int5 == 2) {
        // list is a simple clone
        // for strings, just leave it as-is since the root value is already stored in the return value variable.
        if (!bool2) {
            list2 = new List<Value>();
            for (i = 0; i < int4; i += 1) {
                list2.Add(list1[i]);
            }
            value = new Value(Types.LIST, list2);
        }
    } else {
        if (bool2) {
            string1 = "String";
        } else {
            string1 = "List";
        }
        if (int5 == 3) {
            Core.StringAppend(string1, " slice begin index is out of range.");
        } else { // int5 == 4
            if (bool1) {
                Core.StringAppend(string1, " slice begin index must occur before the end index when step is positive.");
            } else {
                Core.StringAppend(string1, " slice begin index must occur after the end index when the step is negative.");
            }
        }
        EX_IndexOutOfRange(ec, string1);
        return globals.valueNull;
    }

    ec.currentValueStackSize = valueStackSize;
    return value;
}
