/*
    args[0] -> Channel instance
    args[1] -> SoundResource instance
    args[2] -> Resource ID
    args[3] -> current state (1 -> playing, 2 -> paused, 3 -> stopped)
    args[4] -> true if the sound should be stopped completely and freed from the channel.
*/
VM.Value lib_audio_sfx_stop(VM.VmContext vm, Array<VM.Value> args) {
    VM.ObjectInstance channel = (VM.ObjectInstance) args[0].internalValue;
    object nativeChannel = channel.nativeData[0];
    VM.ObjectInstance resource = (VM.ObjectInstance) args[1].internalValue;
    object nativeResource = resource.nativeData[0];
    int resourceId = (int) args[2].internalValue;
    int currentState = (int) args[3].internalValue;
    bool completeStopAndFreeChannel = (bool) args[4].internalValue;
    bool isAlreadyPaused = currentState == 2 && !completeStopAndFreeChannel;

    if (currentState != 3 && !isAlreadyPaused) {
        lib_audio_sfx_stopImpl(
            nativeChannel,
            nativeResource,
            resourceId,
            currentState == 1,
            completeStopAndFreeChannel);
    }

    return vm.globals.valueNull;
}

int lib_audio_sfx_stopImpl(object channel, object resource, int resourceId, bool isActivelyPlaying, bool hardStop) {
    Extension._lib_audio_sfxStop(channel, resource, resourceId, isActivelyPlaying, hardStop);
    return 0;
}
