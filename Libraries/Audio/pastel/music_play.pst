/*
    args[0]: (Value) musicObject
    args[1]: (boolean) is embedded resource
    args[2]: (string) path to music file
    args[3]: (float) starting volume (not an int type, ever)
    args[4]: (boolean) loop

    return value: true if the file was found, false if not.
*/
VM.Value lib_audio_music_play(VM.VmContext vm, Array<VM.Value> args) {
    return VM.buildBoolean(vm.globals,
        lib_audio_music_playImpl(
            (VM.ObjectInstance) args[0].internalValue, // uninitialized music object instance
            (bool) args[1].internalValue, // is embeded resource
            (string) args[2].internalValue, // path to file
            (double) args[3].internalValue, // volume ratio
            (bool) args[4].internalValue // is loop
            ) != -1);
}

int lib_audio_music_playImpl(VM.ObjectInstance musicObject, bool isResource, string path, double startingVolume, bool isLoop) {
    Extension._lib_audio_musicSetVolume(startingVolume);
    object nativeObject = null;
    if (musicObject.nativeData != null) {
        nativeObject = musicObject.nativeData[0];
    }
    if (isResource) {
        Extension._lib_audio_musicPlayResource(nativeObject, path, isLoop);
    } else {
        if (!Extension._lib_audio_musicVerifyFileExists(path)) {
            return -1;
        }
        Extension._lib_audio_musicPlayFile(nativeObject, path, isLoop);
    }
    return 0;
}
