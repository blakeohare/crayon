/*
    args[0] -> Draw queue wrapper object.
        nativeData[0] -> event queue
        nativeData[1] -> event queue length
        nativeData[2] -> image queue
        nativeData[3] -> image queue length

    args[1] -> GrahpicsTexture instance

    args[2] -> BIT MASK

    args[3 to 12] -> Copy these directly to the event queue

    Slicing args (ignored unless MASK & 1 is set)
    args[3] -> source x
    args[4] -> source width
    args[5] -> source y
    args[6] -> source height

    Stretching args (ignored unless MASK & 2 is set)
    args[7] -> target width
    args[8] -> target height

    These are always required, regardless of the mask value
    args[9] -> target x
    args[10] -> target y

    Rotation (ignored unless MASK & 4 is set)
    args[11] -> rotation

    Alpha (ignored (opaque) unless MASK & 8 is set)
    args[12] -> alpha

    GraphicsTexture's nativeData:
        data[0] -> GraphicsTextureResource's native data

        floats:
        data[1] -> texture left
        data[2] -> texture top
        data[3] -> texture right
        data[4] -> texture bottom

        ints:
        data[5] -> pixel width
        data[6] -> pixel height

    GraphicsTextureResource's nativeData:
        data[0] -> bool: is GL based?
        data[1] -> bool: is texture loaded?
        data[2] -> int: GL texture ID
        data[3] -> image resource
        data[4] -> pixel width
        data[5] -> pixel height
*/
Value lib_graphics2d_addImageRenderEvent(VmContext vm, Array<Value> args) {
    int i = 0;

    Array<object> drawQueueData = Core.ForceParens((ObjectInstance) args[0].internalValue).nativeData;

    // Get the event queue, expand it
    Array<int> eventQueue = (Array<int>) drawQueueData[0];
    int queueLength = (int) drawQueueData[1];
    if (queueLength >= eventQueue.Size()) {
        eventQueue = lib_graphics2d_expandEventQueueCapacity(eventQueue);
        drawQueueData[0] = eventQueue;
    }
    drawQueueData[1] = queueLength + 16;

    // Do the same with the image queue. Image queue is not created by the native data int writer, so it may be null.
    Array<Array<object>> imageNativeDataQueue = (Array<Array<object>>) drawQueueData[2]; // image queue
    int imageNativeDataQueueSize = 0;
    if (imageNativeDataQueue == null) {
        imageNativeDataQueue = new Array<Array<object>>(16);
    } else {
        imageNativeDataQueueSize = (int) drawQueueData[3];
    }
    if (imageNativeDataQueueSize >= imageNativeDataQueue.Size()) {
        Array<Array<object>> objArrayArray2 = new Array<Array<object>>(imageNativeDataQueueSize * 2 + 16);
        for (i = 0; i < imageNativeDataQueueSize; i += 1) {
            objArrayArray2[i] = imageNativeDataQueue[i];
        }
        imageNativeDataQueue = objArrayArray2;
        drawQueueData[2] = imageNativeDataQueue;
    }
    drawQueueData[3] = imageNativeDataQueueSize + 1;

    // Add the image object's nativeData array to the image queue
    Array<object> imageNativeData = Core.ForceParens((ObjectInstance) args[1].internalValue).nativeData;
    imageNativeDataQueue[imageNativeDataQueueSize] = imageNativeData;

    bool isValid = true;
    bool isNoop = false;

    // This is an image draw event
    eventQueue[queueLength] = 6;
    // Bit mask
    int flag = (int) args[2].internalValue;
    eventQueue[queueLength | 1] = flag;

    // rotation
    if ((flag & 4) != 0) {
        Value rotationValue = args[11];
        double theta = 0.0;
        if (rotationValue.type == Types.FLOAT) theta = (double) rotationValue.internalValue;
        else if (rotationValue.type == Types.INTEGER) theta += (int) rotationValue.internalValue;
        else isValid = false;

        eventQueue[queueLength | 10] = Core.Int(canonicalizeAngle(theta) * 1048576);
    }

    // alpha
    if (isValid && (flag & 8) != 0) {
        Value alphaValue = args[12];
        int alpha = 0;
        if (alphaValue.type == Types.INTEGER) alpha = (int) alphaValue.internalValue;
        else if (alphaValue.type == Types.FLOAT) alpha = Core.Int(0.5 + (double) alphaValue.internalValue);
        else isValid = false;

        if (i > 254) eventQueue[queueLength | 1] = flag - 8; // unset the alpha flag if alpha is 255+
        else if (i < 0) isNoop = true;
        else eventQueue[queueLength | 11] = alpha;
    }

    Value value = null;
    // copy all the numbers
    for (i = 3; i < 11; i += 1) {
        // just blindly copy the rest of the numbers rounding floats to ints
        value = args[i];
        if (value.type == Types.INTEGER) eventQueue[queueLength + i - 1] = (int) value.internalValue;
        else if (value.type == Types.FLOAT) eventQueue[queueLength + i - 1] = Core.Int(0.5 + (double) value.internalValue);
        else isValid = false;
    }

    // slicing
    if ((flag & 1) != 0) {
        int actualWidth = (int) imageNativeData[5]; // image width
        int sourceX = eventQueue[queueLength | 2]; // source x
        int sourceWidth = eventQueue[queueLength | 4]; // desired width
        if (sourceX < 0 || (sourceX + sourceWidth) > actualWidth || sourceWidth < 0) {
            isValid = false;
        } else if (sourceWidth == 0) {
            isNoop = true;
        }

        int actualHeight = (int) imageNativeData[6]; // image height
        int sourceY = eventQueue[queueLength | 3]; // source y
        int sourceHeight = eventQueue[queueLength | 5]; // desired height
        if (sourceY < 0 || (sourceY + sourceHeight) > actualHeight || sourceHeight < 0) {
            isValid = false;
        } else if (sourceHeight == 0) {
            isNoop = true;
        }
    }

    // stretching
    if ((flag & 2) != 0) {

        // validate target width
        if (eventQueue[queueLength | 6] <= 0) {
            if (eventQueue[queueLength | 6] < 0) isValid = false;
            else isNoop = true;
        }

        // validate target height
        if (eventQueue[queueLength | 7] <= 0) {
            if (eventQueue[queueLength | 7] < 0) isValid = false;
            else isNoop = true;
        }
    }

    // Revert the operation from the queue if it either
    // achieves nothing or is invalid.
    if (isNoop || !isValid) {
        // These variables still have their old values since they're used as offsets.
        drawQueueData[1] = queueLength;
        drawQueueData[3] = imageNativeDataQueueSize;
    }

    if (isValid) {
        return VALUE_TRUE;
    }
    return VALUE_FALSE;
}

Array<int> lib_graphics2d_expandEventQueueCapacity(Array<int> a) {
    int len = a.Length();
    Array<int> output = new Array<int>(len * 2 + 16);
    for (int i = 0; i < len; i += 1) {
        output[i] = a[i];
    }
    return output;
}
