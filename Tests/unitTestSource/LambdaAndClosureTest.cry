import CrayonUnit;

class LambdaAndClosureTest : Test {

    constructor() : base() { }

    function testClosureNoInteractions() {
        fn1 = this.closureNoInteractionsTestHelper(0);
        fn2 = this.closureNoInteractionsTestHelper(100);

        assertThat(fn1['get']()).isEqualTo(0);
        assertThat(fn2['get']()).isEqualTo(100);

        fn1['set'](42);
        assertThat(fn1['get']()).isEqualTo(42);
        assertThat(fn2['get']()).isEqualTo(100);

        fn1['increment']();
        fn2['increment']();
        assertThat(fn1['get']()).isEqualTo(43);
        assertThat(fn2['get']()).isEqualTo(101);
    }

    function testMapAndFilter() {
        t = [1, 2, 3, 4, 5, 6]
            .map(x => x * 2)
            .filter(x => x % 3 != 0);

        assertThat(t).contains([2, 4, 8, 10]).inOrder();
    }

    function testLambdaSyntax() {
        fn1 = (a) => { return a + 1; };
        fn2 = a => { return a + 2; };
        fn3 = (a, b) => { return a + b; };
        fn4 = (a) => { a + 3; };
        fn5 = a => a + 5;
        assertThat(fn1(100)).isEqualTo(101);
        assertThat(fn2(200)).isEqualTo(202);
        assertThat(fn3(300, 400)).isEqualTo(700);
        assertThat(fn4(500)).isEqualTo(503);
        assertThat(fn5(600)).isEqualTo(605);
    }

    function testArgCollision() {
        x = 42;
        fn = x => 2 * x;
        assertThat(fn(5)).isEqualTo(10);
        assertThat(x).isEqualTo(42);

        // This one looks a little weird, but the fact that 'a'
        // is declared in a branch that is not in a direct parent
        // scope is important.
        foo = () => 5; // prevents compile-time optimization
        if (foo() > 1) {
            a = 7;
        }
        b = 11;
        fn = (a, b) => 2 * a * b;
        assertThat(fn(3, 5)).isEqualTo(30);
        assertThat(a).isEqualTo(7);
    }

    function closureNoInteractionsTestHelper(startingValue) {

        value = startingValue;

        return {
            'get': () => { return value; },
            'set': (newValue) => { value = newValue; },
            'increment': () => { value++; }
        };
    }

    function testBasic() {
        value = 10;

        inc = () => {
            value += 1;
        };

        dec = () => {
            value -= 1;
        };

        inc();
        inc();
        inc();

        dec();

        assertThat(value).isEqualTo(12);
    }

    function testNested1() {

        meow = 0;
        blarg = () => {
            meow = 42;

            inc = () => {
                meow += 4;
            };

            inc();
            inc();

        };

        blarg();

        assertThat(meow).isEqualTo(50);
    }

    function testNested2() {
        woof = 0;
        blarg = () => {

            doThings = () => {
                inc = () => {
                    woof += 5;
                };

                return inc;
            };

            return doThings;
        };

        dt = blarg();
        incr = dt();

        incr();
        incr();
        incr();

        assertThat(woof).isEqualTo(15);
    }

    function testSplit() {

        x = 100;
        y = 10;

        thing = condition => {
            if (condition == 1) {
                x += 1;
            } else {
                x -= 1;
            }

            if (condition == 1) {
                y += 1;
            } else if (condition == 2) {
                y -= 1;
            } else {
                // I do not reference y at all here.
            }
        };

        thing(1);

        assertThat(x).isEqualTo(101);
        assertThat(y).isEqualTo(11);
    }

    function testMutateFromOutside() {
        value = 100;

        getValue = () => {
            return value;
        };

        value *= 2;

        x = getValue();

        assertThat(x).isEqualTo(200);
    }
}
