/*
    args[0] -> matrix1
    args[1] -> matrix2
    args[2] -> matrix2 is valid
    args[3] -> output matrix
    args[4] -> output matrix is valid

*/
VM.Value lib_matrices_addMatrix(VM.VmContext vm, Array<VM.Value> args) {

    VM.ObjectInstance obj = (VM.ObjectInstance) args[0].internalValue;
    Array<object> nd1 = obj.nativeData;
    if (!(bool) args[2].internalValue) {
        nd1[5] = "Input must be a matrix";
        return vm.globalNull;
    }
    Array<double> left = (Array<double>) nd1[0];
    int width = (int) nd1[1];
    int height = (int) nd1[2];

    obj = (VM.ObjectInstance) args[1].internalValue;
    Array<object> nd2 = obj.nativeData;
    Array<double> right = (Array<double>) nd2[0];

    if ((int) nd2[1] != width ||
        (int) nd2[2] != height) {
        nd1[5] = "Matrices must be the same size.";
        return vm.globalNull;
    }
    Array<double> output = left;
    bool isInline = args[3].type == VM.Types.NULL;
    if (isInline) {
        nd1[4] = true;
    } else if (!(bool) args[4].internalValue) {
        nd1[5] = "Output value must be a matrix";
        return vm.globalNull;
    } else {
        obj = (VM.ObjectInstance) args[3].internalValue;
        Array<object> nd3 = obj.nativeData;
        output = (Array<double>) nd3[0];
        if ((int) nd3[1] != width ||
            (int) nd3[2] != height) {
            nd1[5] = "Output matrix must have the same size as the inputs.";
            return vm.globalNull;
        }
        nd3[4] = true;
    }

    int length = width * height;
    for (int i = 0; i < length; i += 1) {
        output[i] = left[i] + right[i];
    }

    return args[0];
}
