/*
    arg 1 -> Database object.
    arg 2 -> Result object (out param). Add result to native_data[0].
    arg 3 -> string: SQL query
    arg 4 -> out list for numeric data.
      list[0] -> insert ID, if applicable, or null
      list[1] -> num rows of result
    arg 5 -> out list for column data
      list[2n + 0] -> column name as a value string
      list[2n + 1] -> column type as an integer (0: bool, 1: int, 2: float, 3: string)

    Output is an error, if one occurs, or null.
*/
VM.Value lib_mysql_runQuery(VM.VmContext vm, Array<VM.Value> args) {
    VM.Value arg1 = args[0];
    VM.Value arg2 = args[1];
    VM.Value arg3 = args[2];
    VM.Value arg4 = args[3];
    VM.Value arg5 = args[4];
    VM.ObjectInstance objInstance1 = (VM.ObjectInstance) arg1.internalValue;
    object object1 = objInstance1.nativeData[0];
    List<int> intList1 = new List<int>();
    List<string> stringList1 = new List<string>();
    object object2 = Native._lib_mysql_query(object1, (string) arg3.internalValue, Core.StringBuffer16, Core.IntBuffer16, stringList1, intList1);
    string errMsg = Core.StringBuffer16[0];
    if (errMsg == null) {
        List<VM.Value> list1 = (List<VM.Value>) arg4.internalValue;
        List<VM.Value> list2 = (List<VM.Value>) arg5.internalValue;
        int int1 = 0;
        if (object2 != null) {
            VM.ObjectInstance objInstance2 = (VM.ObjectInstance) arg2.internalValue;
            objInstance2.nativeData = new Array<object>(1);
            objInstance2.nativeData[0] = object2;
            list1[1] = VM.buildInteger(vm.globals, Native._lib_mysql_num_rows(object2));
            for (int1 = 0; int1 < stringList1.Size(); int1 += 1) {
                list2.Add(VM.buildString(vm.globals, stringList1[int1]));
                list2.Add(VM.buildInteger(vm.globals, intList1[int1]));
            }
        } else {
            list1[1] = vm.globalNull;
        }

        if (Core.IntBuffer16[0] == -1) {
            list1[0] = vm.globalNull;
        } else {
            list1[0] = VM.buildInteger(vm.globals, int1);
        }

        return vm.globalNull;
    }

    return VM.buildString(vm.globals, errMsg);
}
