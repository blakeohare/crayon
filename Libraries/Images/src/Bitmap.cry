namespace Images {

    class ImageFormatException : Exception {
        constructor() : base("The file is not a valid PNG or JPEG image.") { }
    }

    class Bitmap {

        field width;
        field height;

        constructor(width, height) {
            if (height == null && width == Images.Internal.ImagesHelper.INST) {
                // This is for the internal loader
            } else {
                Images.Internal.ImagesHelper.verifyInt('width', width, true);
                Images.Internal.ImagesHelper.verifyInt('height', height, true);
                this.width = width;
                this.height = height;
                $$$('imageCreate', this, width, height);
            }
        }

        static function fromResource(path) {
            // TODO: how to designate a specific module?
            if (path != '') {
                if (path[0] == '/') path = path[1:];
                sz = [];
                bmp = Images.Internal.ResourceManifest.getBitmapCopyBlocking('@', path);
                if (bmp != null) return bmp;
            }
            throw new Exception("Resource does not exist: '" + path + "'");
        }

        static function fromBytes(bytes) {
            return Images.Internal.ImagesHelper.createImageFromBytes(bytes, null);
        }

        static function fromBase64(str) {
            return Images.Internal.ImagesHelper.createImageFromBytes(null, str);
        }

        function getPixel(x, y) {
            c = [];
            sc = $$$('imageGetPixel', this, null, x, y, c);
            if (sc == 0) return c;
            Images.Internal.ImagesHelper.pixelError(sc, x, y, this.width, this.height);
        }

        function edit() {
            session = new EditSession(Images.Internal.ImagesHelper.INST, this);
            return session;
        }

        function clone() {
            return this.scale(this.width, this.height);
        }

        function scale(newWidth, newHeight) {
            Images.Internal.ImagesHelper.verifyInt('width', newWidth, true);
            Images.Internal.ImagesHelper.verifyInt('height', newHeight, true);
            b = new Bitmap(Images.Internal.ImagesHelper.INST, null);
            b.width = newWidth;
            b.height = newHeight;
            $$$('imageScale', this, b, newWidth, newHeight, 1);
            return b;
        }
    }
}
