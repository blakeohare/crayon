void ImageHelper_ImageBlit(
    ObjectInstance target,
    ObjectInstance src,
    int sx, int sy, int sw, int sh,
    int tx, int ty, int tw, int th) {

    Extension.CoreFunc_ImageBlit(target.nativeData[0], src.nativeData[0], sx, sy, sw, sh, tx, ty, tw, th);
}

void ImageHelper_ImageCreate(ObjectInstance o, int w, int h) {
    o.nativeData = new Array<object>(1);
    o.nativeData[0] = Extension.CoreFunc_ImageNewBmp(w, h);
}

Dictionary<int, object> ImageHelper_GetChunkCache(ObjectInstance cacheWrapper) {
    if (cacheWrapper.nativeData == null) {
        cacheWrapper.nativeData = new Array<object>(1);
        cacheWrapper.nativeData[0] = new Dictionary<int, object>();
    }
    return (Dictionary<int, object>) cacheWrapper.nativeData[0];
}

void ImageHelper_GetChunkSync(ObjectInstance cacheWrapper, ObjectInstance o, int cid) {
    o.nativeData = new Array<object>(1);
    o.nativeData[0] = null;
    Dictionary<int, object> lookup = ImageHelper_GetChunkCache(cacheWrapper);
    if (lookup.Contains(cid)) {
        o.nativeData[0] = lookup[cid];
    }
}

// The type checking for the pixel code is done here instead of in Crayon code so that this can be fast since it may be common to run this in a loop.

/*
    Errors:
    0 - OK!
    1 - (get/set) invalid coordinate type
    2 - (get/set) invalid coordinate range
    3 - (set) invalid types for color
    4 - (set) invalid range for color
    5 - (set) invalid list length
*/
int ImageHelper_GetPixel(Array<Value> nums, ObjectInstance bmp, ObjectInstance edit, Value xv, Value yv, ListImpl pOut, Array<int> arr) {
    if (xv.type != Types.INTEGER || yv.type != Types.INTEGER) return 1;
    object e = null;
    if (edit != null) e = edit.nativeData[0];

    Extension.CoreFunc_ImageGetPixel(bmp.nativeData[0], e, (int)xv.internalValue, (int)yv.internalValue, arr);
    if (arr[4] == 0) return 2;

    if (@ext_boolean("ARRAY_IS_LIST")) {
        List<Value> c = new List<Value>();
        pOut.size = 4;
        pOut.list = c;
        c.Add(nums[arr[0]]);
        c.Add(nums[arr[1]]);
        c.Add(nums[arr[2]]);
        c.Add(nums[arr[3]]);
    } else {
        if (pOut.capacity < 4) {
            pOut.capacity = 4;
            pOut.array = new Array<Value>(4);
        }
        pOut.size = 4;
        pOut.array[0] = nums[arr[0]];
        pOut.array[1] = nums[arr[1]];
        pOut.array[2] = nums[arr[2]];
        pOut.array[3] = nums[arr[3]];
    }
    return 0;
}

int ImageHelper_SetPixel(ObjectInstance edit, Value xv1, Value yv1, Value xv2, Value yv2, Value rOrList, Value gv, Value bv, Value av) {
    if (xv1.type != Types.INTEGER || yv1.type != Types.INTEGER) return 1;
    if (xv2.type != Types.INTEGER || yv2.type != Types.INTEGER) return 1;
    int r = 0;
    int g = 0;
    int b = 0;
    int a = 255;
    if (rOrList.type == Types.LIST) {
        ListImpl color = (ListImpl)rOrList.internalValue;
        r = color.size;
        if (r == 4) {
            if (@ext_boolean("ARRAY_IS_LIST")) {
                av = color.list[3];
            } else {
                av = color.array[3];
            }
        } else if (r != 3) return 5;

        if (@ext_boolean("ARRAY_IS_LIST")) {
            rOrList = color.list[0];
            gv = color.list[1];
            bv = color.list[2];
        } else {
            rOrList = color.array[0];
            gv = color.array[1];
            bv = color.array[2];
        }
    } else if (rOrList.type != Types.INTEGER) {
        return 3;
    }

    if (rOrList.type != Types.INTEGER || gv.type != Types.INTEGER || bv.type != Types.INTEGER || av.type != Types.INTEGER) return 3;
    r = (int)rOrList.internalValue;
    g = (int)gv.internalValue;
    b = (int)bv.internalValue;
    a = (int)av.internalValue;
    if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255 || a < 0 || a > 255) return 4;
    bool outOfRange = Extension.CoreFunc_ImageSetPixel(
        edit.nativeData[0],
        (int)xv1.internalValue, (int)yv1.internalValue,
        (int)xv2.internalValue, (int)yv2.internalValue,
        r, g, b, a);
    if (outOfRange) return 2;
    return 0;
}

/*
    The loaded callback takes 3 args:
        - (int) chunk ID that was loaded
        - (int) number of chunks in the set currently loaded
        - (int) total number of chunks in set
*/
void ImageHelper_LoadChunk(VmContext vm, ObjectInstance cacheWrapper, int chunkId, ListImpl allChunkIds, Value loadedCallback) {
    int size = allChunkIds.size;
    Array<int> chunkIds = new Array<int>(size);
    for (int i = 0; i < size; ++i) {
        if (@ext_boolean("ARRAY_IS_LIST")) {
            chunkIds[i] = (int)allChunkIds.list[i].internalValue;
        } else {
            chunkIds[i] = (int)allChunkIds.array[i].internalValue;
        }
    }
    Extension.CoreFunc_ImageChunkLoadAsync(vm, ImageHelper_GetChunkCache(cacheWrapper), chunkId, chunkIds, loadedCallback);
}

/*
    algo values:
        1 - nearest neighbor
        nothing else is supported yet!
*/
void ImageHelper_Scale(ObjectInstance src, ObjectInstance dest, int newWidth, int newHeight, int algo) {
    dest.nativeData = new Array<object>(1);
    dest.nativeData[0] = Extension.CoreFunc_ImageScale(src.nativeData[0], newWidth, newHeight, algo);
}

void ImageHelper_SessionStart(ObjectInstance edit, ObjectInstance bmp) {
    edit.nativeData = new Array<object>(1);
    edit.nativeData[0] = Extension.CoreFunc_ImageStartEditSession(bmp.nativeData[0]);
}

void ImageHelper_SessionFinish(ObjectInstance edit, ObjectInstance bmp) {
    Extension.CoreFunc_ImageEndEditSession(edit.nativeData[0], bmp.nativeData[0]);
}

/*
    status codes:
    0 - success
    1 - not a proper byte list or base 64 string
    2 - format invalid
    3 - can't run synchronously, status code will be sent to the callback.
*/
int ImageHelper_fromBytes(
    VmGlobals globals,
    ObjectInstance bmp,
    bool isB64,
    Value rawData,
    ListImpl sizeOut,
    Value callback) { // not necessary on all platforms. Return 3 if used.

    object data = null;
    if (isB64) {
        if (rawData.type != Types.STRING) return 1;
        data = rawData.internalValue;
    } else {
        if (rawData.type != Types.LIST) return 1;
        data = listImplToBytes((ListImpl)rawData.internalValue);
        if (data == null) return 1;
    }
    Array<int> sizeOutInt = new Array<int>(2);
    bmp.nativeData = new Array<object>(1);
    // TODO: once VM Suspend-with-block is implemented, maybe rewrite this to just use the callback.
    bool isSync = Extension.CoreFunc_ImageFromBytes(data, sizeOutInt, bmp.nativeData, callback);
    if (isSync) {
        if (bmp.nativeData[0] == null) return 2;
        addToList(sizeOut, buildInteger(globals, sizeOutInt[0]));
        addToList(sizeOut, buildInteger(globals, sizeOutInt[1]));
        return 0;
    }

    return 3;
}

Value ImageHelper_ImageEncode(VmGlobals globals, object bmp, int format) {
    Array<bool> o = new Array<bool>(1);
    object result = Extension.CoreFunc_ImageEncode(bmp, format, o);
    if (o[0]) {
        return buildString(globals, (string) result);
    }
    return bytesToListValue(globals, (Array<int>) result);
}
