/*
    row[0] -> ID# for the CNI Function.
    row[1] -> number of args
    row[2] -> output used

    metadata.cniFunctionPointer[id] -> the function pointer

*/
nativeFp = metadata.cniFunctionsById[row[0]];

if (nativeFp == null) {
    hasInterrupt = EX_InvalidInvocation(ec, "CNI method could not be found.");
} else {
    _len = row[1];
    valueStackSize -= _len;

    valueArray1 = new Array<Value>(_len);
    for (i = 0; i < _len; i += 1) {
        valueArray1[i] = valueStack[valueStackSize + i];
    }

    prepareToSuspend(ec, stack, valueStackSize, pc);

    value = nativeFp(vm, valueArray1);

    if (ec.executionStateChange) {
        ec.executionStateChange = false;
        // TODO: declare constants
        if (ec.executionStateChangeCommand == 1) {
            // Suspend VM
            return suspendInterpreter();
        }
    }

    if (row[2] == 1) {
        @import("inline/ValueStackCapacityCheck.pst");
        valueStack[valueStackSize] = value;
        valueStackSize += 1;
    }
}
