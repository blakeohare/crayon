if (argCount != 1) {
    hasInterrupt = EX_InvalidArgument(ec, primitiveMethodWrongArgCountError("class isA method", 1, argCount));
} else {
    int1 = classValue.classId;
    value = funcArgs[0];
    if (value.type != Types.CLASS) {
        hasInterrupt = EX_InvalidArgument(ec, "class isA method requires another class reference.");
    } else {
        classValue = ((ClassValue) value.internalValue);
        int2 = classValue.classId;

        output = VALUE_FALSE;
        if (isClassASubclassOf(int1, int2)) {
            output = VALUE_TRUE;
        }
    }
}
