import Math;

namespace Game {

    static class Internal {
        // TODO: do this lookup directly in U3 before sending values over.
        static field HACK_keyLookup = null;
        static field HACK_packagePrivate = new Object();

        static function doPumpEvents(window) {
            if (Internal.HACK_keyLookup == null) {
                lookup = {
                    'left': KeyboardKey.LEFT,
                    'up': KeyboardKey.UP,
                    'right': KeyboardKey.RIGHT,
                    'down': KeyboardKey.DOWN,
                    'space': KeyboardKey.SPACE,
                    'enter': KeyboardKey.ENTER,
                };
                for (i = 0; i < 26; ++i) {
                    lookup[chr(ord('a') + i)] = KeyboardKey.A + i;
                }
                for (i = 0; i < 10; ++i) {
                    lookup[chr(ord('0') + i)] = KeyboardKey.NUM_0 + i;
                }
                Internal.HACK_keyLookup = lookup;
            }
            output = [];
            for (item : window._fields['win']._u3window.flushInputData()) {
                name = item['name'];
                args = item['args'];
                switch (item['name']) {
                    case 'keydown':
                    case 'keyup':
                        t = args[0].split('|');
                        kcode = Internal.HACK_keyLookup.get(t[0]);
                        if (kcode != null) {
                            output.add(new KeyEvent(kcode, name == 'keydown'));
                        }
                        break;

                    case 'mousemove':
                    case 'mousedown':
                    case 'mouseup':
                        x = args[0];
                        y = args[1];
                        b = args[2];
                        if (name == 'mousemove') {
                            output.add(new MouseMoveEvent(x, y));
                        } else {
                            // TODO: move this logic into the constructor.
                            isDown = name == 'mousedown';
                            type = isDown ? EventType.MOUSE_LEFT_DOWN : EventType.MOUSE_LEFT_UP;
                            output.add(new MouseClickEvent(type, EventButton.LEFT, name == 'mousedown', x, y));
                        }
                        break;
                }
            }

            for (q : window._fields['quits']) {
                t = EventQuitType.CLOSE_BUTTON;
                if (q[0] == 'alt-f4') {
                    t = EventQuitType.ALT_F4;
                }
                output.add(new QuitEvent(t, q[1]));
            }
            window._fields['quits'].clear();

            return output;
        }

        static function doClockTick(window, drawingContext) {
            drawingContext.flush(true);
            Internal.fillBg(window);
            f = window._fields;
            if (!f.get('open')) return;
            start = f.get('un') ?? Core.currentTime();
            now = Core.currentTime();
            diff = now - start;
            target = 1.0 / f['f'];
            delay = Math.max(0, target - diff);
            Core.sleep(delay);
            f['un'] = Core.currentTime();
            return window;
        }

        static function fillBg(window) {
            draw = window._fields.get('draw');
            if (draw == null) return;
            c = window._fields['bg'];
            draw.fill(c[0], c[1], c[2]);
        }

        static function doGameLoop(window) {
            drawingContext = window._fields['draw'];
            inputState = new InputState(Internal.HACK_packagePrivate, window);

            while (window._fields['open']) {

                events = Internal.doPumpEvents(window);
                inputState._newEvents = events;
                inputState._keyPresses.clear();
                inputState._keyReleases.clear();

                for (event : events) {
                    switch (event.type) {
                        case EventType.KEY_DOWN:
                            inputState._keysPressed[event.key] = true;
                            inputState._keyPresses.add(event.key);
                            break;
                        case EventType.KEY_UP:
                            inputState._keysPressed[event.key] = false;
                            inputState._keyReleases.add(event.key);
                            break;

                        case EventType.QUIT:
                            window.close();
                            return;

                        // TODO: mouse events
                        // TODO: gamepad events
                    }
                }

                updater = window._fields.get('u');
                if (updater != null) {
                    updater(inputState);
                }

                Internal.fillBg(window);
                renderer = window._fields.get('r');
                if (renderer != null) {
                    renderer(drawingContext);
                }

                Internal.doClockTick(window, drawingContext);
            }
        }

        static function parseMouseCoord(e, win) {
            x = Math.floor(e.ratioX * win._fields['w'] + .5);
            y = Math.floor(e.ratioY * win._fields['h'] + .5);
            return [x, y];
        }
    }
}
