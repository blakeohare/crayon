namespace Nori {
    enum ElementProperties {
        RENDER_LEFT = 0,
        RENDER_TOP = 1,
        RENDER_RIGHT = 2,
        RENDER_BOTTOM = 3,
        RENDER_WIDTH = 4,
        RENDER_HEIGHT = 5,

        X = 10,
        Y = 11,
        WIDTH = 12,
        HEIGHT = 13,
        HORIZONTAL_ALIGNMENT = 14,
        VERTICAL_ALIGNMENT = 15,
        BACKGROUND_RGBA = 16,

        MISC_0 = 20,
        MISC_STRING_0 = 21,
    }

    enum ElementTypeId {
        UNKNOWN = 0,

        RECTANGLE = 1,
        CANVAS = 2,
        SCROLL_PANEL = 3,
        BUTTON = 4,
        LABEL = 5,
    }

    enum Alignment {
        FRONT = 0,
        CENTER = 1,
        BACK = 2,
        STRETCH = 3,
    }

    enum HorizontalAlignment {
        LEFT = Alignment.FRONT,
        CENTER = Alignment.CENTER,
        RIGHT = Alignment.BACK,
        STRETCH = Alignment.STRETCH,
    }

    enum VerticalAlignment {
        TOP = Alignment.FRONT,
        CENTER = Alignment.CENTER,
        BOTTOM = Alignment.BACK,
        STRETCH = Alignment.STRETCH,
    }

    class Element {

        field _typeId = ElementTypeId.UNKNOWN;
        field _nativeInstance = null;
        field _parent = null;
        field _viewParent = null;
        field _window = null;
        field _isViewRoot = false;
        field _isVirtual = false; // true for non-view-root panels that don't have a backing UI element
        field _isWindowRoot = false;

        field _requiredWidth = 0;
        field _requiredHeight = 0;
        field _allocatedWidth = null;
        field _allocatedHeight = null;

        static field PROPERTIES_TEMPLATE = [null] * (ElementProperties.max() + 1);

        static constructor() {
            Element.PROPERTIES_TEMPLATE[ElementProperties.HORIZONTAL_ALIGNMENT] = HorizontalAlignment.LEFT;
            Element.PROPERTIES_TEMPLATE[ElementProperties.VERTICAL_ALIGNMENT] = VerticalAlignment.TOP;
            Element.PROPERTIES_TEMPLATE[ElementProperties.X] = 0;
            Element.PROPERTIES_TEMPLATE[ElementProperties.Y] = 0;
        }

        field _properties = Element.PROPERTIES_TEMPLATE.clone();

        // Dictionary of handler type to a list pair of [handler ID, function pointer].
        field _handlers = null;

        constructor() { }

        function _setValue(key, value) {
            this._properties[key] = value;
            if (this._nativeInstance != null) {
                $$lib_nori_invalidateElementProperty(this._typeId, this._nativeInstance, key, value);
            }
            return this;
        }

        static field HANDLER_ID = 0;

        function _registerHandler(type, fp) {
            if (this._handlers == null) this._handlers = {};
            entry = this._handlers.get(type);
            if (entry != null) {
                entry[1] = fp;
            } else {
                id = Element.HANDLER_ID++;
                entry = [id, fp];
                this._handlers[type] = entry;
            }

            if (this._window != null) {
                this._window._handlers[id] = [type, this];
            }
            if (this._nativeInstance != null) {
                $$lib_nori_registerHandler(this._nativeInstance, this._typeId, type, entry[0]);
            }
            return this;
        }

        function _invalidateViewRootLayout() {
            throw new Core.Exception("TODO");
        }

        function setWidth(value) { if (this._window != null) this._invalidateViewRootLayout(); return this._setValue(ElementProperties.WIDTH, value); }
        function setHeight(value) { if (this._window != null) this._invalidateViewRootLayout(); return this._setValue(ElementProperties.HEIGHT, value); }
        function setX(value) { if (this._window != null) this._invalidateViewRootLayout(); return this._setValue(ElementProperties.X, value); }
        function setY(value) { if (this._window != null) this._invalidateViewRootLayout(); return this._setValue(ElementProperties.Y, value); }
        function setHorizontalAlignment(value) { if (this._window != null) this._invalidateViewRootLayout(); return this._setValue(ElementProperties.HORIZONTAL_ALIGNMENT, value); }
        function setVerticalAlignment(value) { if (this._window != null) this._invalidateViewRootLayout(); return this._setValue(ElementProperties.VERTICAL_ALIGNMENT, value); }

        function _updateAbsoluteRequiredSize() {
            this._requiredWidth = this._properties[ElementProperties.HORIZONTAL_ALIGNMENT] == HorizontalAlignment.STRETCH
                ? 0
                : (this._properties[ElementProperties.WIDTH] ?? 0);
            this._requiredHeight = this._properties[ElementProperties.VERTICAL_ALIGNMENT] == VerticalAlignment.STRETCH
                ? 0
                : (this._properties[ElementProperties.HEIGHT] ?? 0);
        }

        function _allocateAvailableSpace(left, top, right, bottom, width, height, haOverride, vaOverride) {
            ha = haOverride ?? this._properties[ElementProperties.HORIZONTAL_ALIGNMENT];
            va = vaOverride ?? this._properties[ElementProperties.VERTICAL_ALIGNMENT];

            // For stretch alignment, use the minimum required size if there is infinite space, otherwise fill the available size.
            // For non-stretch alignments, use the set size if available, otherwise use the minimum required size.
            this._allocatedWidth = ha == HorizontalAlignment.STRETCH
                ? (width ?? this._requiredWidth)
                : (this._properties[ElementProperties.WIDTH] ?? this._requiredWidth);
            this._allocatedHeight = va == VerticalAlignment.STRETCH
                ? (height ?? this._requiredHeight)
                : (this._properties[ElementProperties.HEIGHT] ?? this._requiredHeight);

            this._properties[ElementProperties.RENDER_WIDTH] = this._allocatedWidth;
            this._properties[ElementProperties.RENDER_HEIGHT] = this._allocatedHeight;

            switch (ha) {
                case HorizontalAlignment.LEFT:
                case HorizontalAlignment.STRETCH:
                    Core.assert(left != null);
                    t = left + this._properties[ElementProperties.X];
                    this._properties[ElementProperties.RENDER_LEFT] = t;
                    this._properties[ElementProperties.RENDER_RIGHT] = t + this._allocatedWidth;
                    break;
                case HorizontalAlignment.RIGHT:
                    Core.assert(right != null);
                    t = right - this._properties[ElementProperties.X];
                    this._properties[ElementProperties.RENDER_RIGHT] = t;
                    this._properties[ElementProperties.RENDER_LEFT] = t - this._allocatedWidth;
                    break;
                case HorizontalAlignment.CENTER:
                    Core.assert(left != null && right != null);
                    t = (left + right - this._allocatedWidth) / 2 + this._properties[ElementProperties.X];
                    this._properties[ElementProperties.RENDER_LEFT] = t;
                    this._properties[ElementProperties.RENDER_RIGHT] = t + this._allocatedWidth;
                    break;
            }

            switch (va) {
                case VerticalAlignment.TOP:
                case VerticalAlignment.STRETCH:
                    Core.assert(top != null);
                    t = top + this._properties[ElementProperties.Y];
                    this._properties[ElementProperties.RENDER_TOP] = t;
                    this._properties[ElementProperties.RENDER_BOTTOM] = t + this._allocatedHeight;
                    break;
                case VerticalAlignment.BOTTOM:
                    Core.assert(bottom != null);
                    t = bottom - this._properties[ElementProperties.Y];
                    this._properties[ElementProperties.RENDER_BOTTOM] = t;
                    this._properties[ElementProperties.RENDER_TOP] = t - this._allocatedHeight;
                    break;
                case VerticalAlignment.CENTER:
                    Core.assert(top != null && bottom != null);
                    t = (top + bottom - this._allocatedHeight) / 2 + this._properties[ElementProperties.Y];
                    this._properties[ElementProperties.RENDER_TOP] = t;
                    this._properties[ElementProperties.RENDER_BOTTOM] = t + this._allocatedHeight;
                    break;
            }
        }
    }
}
