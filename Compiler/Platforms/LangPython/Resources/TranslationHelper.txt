TranslationHelper_globals = {}

TranslationHelper_StringBuffer16 = [None] * 16
TranslationHelper_IntBuffer16 = [0] * 16
TranslationHelper_FloatBuffer16 = [0.0] * 16
TranslationHelper_NoneListOfOne = [None]

TranslationHelper_StringType = type('')

def always_true(): return True
def always_false(): return False

def TranslationHelper_setResourceManifest(value):
  TranslationHelper_globals['res'] = value

def TranslationHelper_getResourceManifest():
  return TranslationHelper_globals['res']

def TranslationHelper_setProgramData(value):
  TranslationHelper_globals['pd'] = value

def TranslationHelper_getProgramData():
  return TranslationHelper_globals['pd']

def TranslationHelper_sortedCopyOfList(list):
  list = list[:]
  list.sort()
  return list

def TranslationHelper_determineLibraryAvailability(name, ver):
  return TranslationHelper_globals['libreg'].loadLibrary(name, ver)

def TranslationHelper_setLibraries(libraries):
  TranslationHelper_globals['libreg'] = LibraryRegistry(libraries)

def TranslationHelper_isValidInteger(value):
  if len(value) == 0: return False
  if value[0] == '-': value = value[1:]
  return value.isdigit()

def TranslationHelper_tryParseFloat(value, floatOut):
  try:
    floatOut[1] = float(value)
    floatOut[0] = 1.0
  except:
    floatOut[0] = -1.0

def TranslationHelper_base64ToString(value):
  u_value = base64.b64decode(value)
  if type(u_value) == TranslationHelper_StringType:
    return u_value
  return u_value.decode('utf8')

def string_check_slice(haystack, i, needle):
  return haystack[i:i + len(needle)] == needle

def string_substring(s, start, length = None):
  if length == None: return s[start:]
  return s[start:start + length]

def _parse_float_helper(f_out, value):
  try:
    output = float(value)
    f_out[0] = 1
    f_out[1] = output
  except:
    f_out[0] = -1
	
_NUM_CHARS = {}
for c in '0123456789':
  _NUM_CHARS[c] = True

def _is_valid_integer(value):
  first = True
  if value == '-': return False
  for c in value:
    if first:
      first = False
      if c == '-':
        continue
    if not _NUM_CHARS.get(c, False):
      return False
  return True

def wrappedChr(code):
  if code < 0 or code > 255: return '?'
  return chr(code)

def create_assertion(message):
  raise Exception(message)

def _clear_list(list):
  while len(list) > 0:
    list.pop()

def create_sorted_copy_of_list(items):
  items = items[:]
  items.sort()
  return items

_TranslationHelper_fnFinders = []

def TranslationHelper_getFunction(name):
  for fnFinderFn in _TranslationHelper_fnFinders:
    output = fnFinderFn(name)
    if output != None:
      return output
  return None

def TranslationHelper_registerFunctionFinder(fnFinderFn):
  _TranslationHelper_fnFinders.append(fnFinderFn)
