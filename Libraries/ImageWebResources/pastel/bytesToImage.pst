/*
    arg1: HttpResponse object. nativeData[0] contains a byte array
    arg2: an output vector
        list[1] -> ImageResources.ImageNativeData instance. Must populate the nativeData here.
            nativeData[0] -> platform image instance
            nativeData[1] -> width
            nativeData[2] -> height
        list[2] -> image width
        list[3] -> image height

    returns true on success.
*/
VM.Value lib_imagewebresources_bytesToImage(VM.VmContext vm, Array<VM.Value> args) {

    // Get the byte array
    VM.ObjectInstance objInstance1 = (VM.ObjectInstance) args[0].internalValue;
    object object1 = objInstance1.nativeData[0];

    // Get the output vector.
    VM.ListImpl list1 = (VM.ListImpl) args[1].internalValue;

    // Get the ImageNativeData object from the output vector and get its nativeData ready, which will
    // serve as the output vector for $_lib_imagewebresources_byteToImage
    VM.Value value = VM.getItemFromList(list1, 0);

    // TODO: Use common native data init function
    Array<object> objArray1 = new Array<object>(3);
    objInstance1 = (VM.ObjectInstance) value.internalValue;
    objInstance1.nativeData = objArray1;

    // Pass the nativeData and the byte array and create an image object and calculate its width.
    if (Native._lib_imagewebresources_bytesToImage(object1, objArray1)) {
        VM.Value width = VM.buildInteger(vm.globals, (int) objArray1[1]);
        VM.Value height = VM.buildInteger(vm.globals, (int) objArray1[2]);
        if (@ext_boolean("ARRAY_IS_LIST")) {
            list1.list[1] = width;
            list1.list[2] = height;
        } else {
            list1.array[1] = width;
            list1.array[2] = height;
        }
        return vm.globalTrue;
    }

    return vm.globalFalse;
}
