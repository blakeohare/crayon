//import Dispatcher;
import Math;
import U3Direct;

namespace Nori {

    const Frame_OnResize = 'frame.onresize';
    const Frame_OnKeyDown = 'frame.keydown';
    const Frame_OnKeyUp = 'frame.keyup';

    /*
        Represents a window-like UI object.

        nativeData[0] -> native handle to the window.
    */
    class Frame {

        field _title = 'Untitled Window';
        field _fullFlushElements = {};
        field _partialFlushElements = {};
        field _dirtyPanels = {};
        field _queuedCommandsWireData = [];

        field _elementById = {};
        field _isShown = false;
        field _rootElementId = null;
        field _rootElementChanged = false;
        field _handlers = {};
        field _loadQueue = [];
        field _dirtyFrameAttributes = {};

        field _size = [400, 300];

        // for platforms that dictate the window size (browser window and mobile screen) this
        // will insert vertical or horizontal bars at the sides to maintain the aspect ratio.
        field _keepAspectRatio = false;

        field _internalBorder;

        field _u3window;

        field _fontResourceLinks = [];

        constructor() {
            this._u3window = new U3Window(this.handleUiGeneratedEvent);
            this._handlers['on-render-pass'] = [this._maybeFireOnLoadHandlers, null];
            this._handlers['on-timeout-callback'] = [this._handleTimeout, (args) => { return [Core.parseInt(args)]; }];
            this._internalBorder = this._setContentInternal(new Border());
        }

        function _setContentInternal(e) {
            e._parent = this;
            Panel._applyFrameToElementAndChildren(e, this);
            this._rootElementId = e._id;
            this._rootElementChanged = true;
            return e;
        }

        function setTitle(title) {
            // TODO: if it's already shown, then need to send a message.
            this._title = title + '';
            return this;
        }

        function addFontResourceLink(name, url) {
            this._fontResourceLinks.add([name, url]);
            return this;
        }

        function setContent(e) {
            this._internalBorder.setChild(e);
            return this;
        }

        static function parseTwoInt(a) {
            a = a.split(',');
            return [parseInt(a[0]), parseInt(a[1])];
        }

        function setResizeHandler(fn) {
            this._handlers[Frame_OnResize] = [fn, Frame.parseTwoInt];
            return this;
        }

        function clearResizeHandler() {
            this._handlers[Frame_OnResize] = null;
            return this;
        }

        function setKeyDownHandler(fn) {
            this._handlers[Frame_OnKeyDown] = [fn, KeyboardEventArg.parseKeyDown];
            this._dirtyFrameAttributes[Frame_OnKeyDown] = 1;
            return this;
        }

        function setKeyUpHandler(fn) {
            this._handlers[Frame_OnKeyUp] = [fn, KeyboardEventArg.parseKeyUp];
            this._dirtyFrameAttributes[Frame_OnKeyUp] = 1;
            return this;
        }

        /*
            This is a list of serialized data for the frame.

            The first item is the element ID for the root element of the frame.

            The 2nd element is a count of elements that have been removed from the visible frame.
            They may still exist but are simply invisible now and should be treated as removed by the renderer.
            After the count is the actual list of elements which exists as a list of pairs (so the length of this next
            part is double the number indicated in the count). The first item in each pair is the element removed and
            the 2nd item in each pair is the panel ID from which it was removed. If the root element was removed, 0 is used
            as the frame's ID.

            The remaining data is a list of elements. No count is given as it's just the rest of the list.

            Each element contains 4 basic properties: type, ID, children count, property count.
            Following these properties are the children ID's, which are then followed by property data
            which is double the length of the property count (because it's an alternating list of keys and values.
        */
        function _getRenderData() {

            wireData = [];

            // Font data must ALWAYS be sent first.
            // It will pause execution of the flush until the font is loaded.
            if (this._fontResourceLinks.length > 0) {
                for (f : this._fontResourceLinks) {
                    wireData.add('FR', 0, Frame.escapeStringToHex(f[1]), Frame.escapeStringToHex(f[0]));
                }
                this._fontResourceLinks.clear();
            }

            if (this._fullFlushElements.length > 0) {
                for (id : this._fullFlushElements.keys()) {
                    e = this._fullFlushElements[id];
                    e._flushVisualProperties(wireData, true);
                }
                this._fullFlushElements.clear();
            }

            if (this._partialFlushElements.length > 0) {
                for (id : this._partialFlushElements.keys()) {
                    e = this._partialFlushElements[id];
                    e._flushVisualProperties(wireData, false);
                }
                this._partialFlushElements.clear();
            }

            if (this._dirtyPanels.length > 0) {
                for (id : this._dirtyPanels.keys()) {
                    panel = this._dirtyPanels[id];
                    if (panel._canFlushIncrementally) {
                        wireData.add('CI', id, panel._childRemovalCount, panel._childrenIdsAdded.length);
                        wireData.concat(panel._childrenIdsAdded);
                    } else {
                        panel._canFlushIncrementally = true;
                        wireData.add('CF', id, panel._children.length);
                        wireData.concat(panel._childrenIds);
                    }
                    panel._childrenIdsAdded.clear();
                    panel._childRemovalCount = 0;
                }
                this._dirtyPanels.clear();
            }

            if (this._queuedCommandsWireData.length > 0) {
                wireData.concat(this._queuedCommandsWireData);
                this._queuedCommandsWireData.clear();
            }

            if (this._rootElementChanged) {
                wireData.add('RE', this._rootElementId);
                this._rootElementChanged = false;
            }

            if (this._dirtyFrameAttributes.length > 0) {
                for (attr : this._dirtyFrameAttributes.keys()) {
                    wireData.add('FA', 0, attr, this._dirtyFrameAttributes[attr]);
                }
                this._dirtyFrameAttributes.clear();
            }

            return wireData;
        }

        function _flushUpdatesIfNeeded() {
            if (this._partialFlushElements.length != 0 ||
                this._fullFlushElements.length != 0 ||
                this._dirtyPanels.length != 0) {

                this.flushUpdates();
            }
        }

        function flushUpdates() {
            renderData = this._getRenderData();

            this._u3window.sendData(renderData);
        }

        function dispatcherCbComplete() {
            return this._flushUpdatesIfNeeded();
        }

        function setWidth(w) {
            this._size[0] = Math.floor(w);
            return this;
        }

        function setHeight(h) {
            this._size[1] = Math.floor(h);
            return this;
        }

        function keepAspectRatio() {
            this._keepAspectRatio = true;
        }

        function show(blocking = true) {
            if (!this._isShown) {
                this._isShown = true;
                renderData = this._getRenderData();
                this._u3window.show(this._title, this._size[0], this._size[1], renderData, blocking == true, this._keepAspectRatio);
            }
            return this;
        }

        // callback takes in a string argument for the type of close ('close-button' or 'alt-f4')
        function onClose(cb) {
            this._u3window.overrideCloseBehavior(cb);
        }

        function close() {
            if (this._isShown) {
                this._isShown = false;
                this._u3window.close();
            }
        }

        static function escapeStringToHex(str) {
            hex = '0123456789abcdef';
            output = [];
            for (c : str) {
                code = Core.ord(c);
                output.add(hex[(code >> 4) & 15], hex[code & 15]);
            }
            return output.join('');
        }

        function _maybeFireOnLoadHandlers() {
            if (this._isShown) {
                lq = this._loadQueue.clone();
                this._loadQueue.clear();
                for (e : lq) {
                    cb = e._handlers.get(Element_OnLoad);
                    if (cb != null) {
                        cb[0]();
                    }
                }
                this._flushUpdatesIfNeeded();
            }
        }

        field _callbackIdAlloc = 0;
        field _callbacksById = {};

        function _setTimedCallback(deadline, cb) {
            t = Math.max(0, Math.floor(1000 * (deadline - Core.currentTime()) + .5));
            id = ++this._callbackIdAlloc;
            this._callbacksById[id] = cb;

            // TODO: U3Direct
            this._u3window.sendData(['TO', id, t]);
        }

        function _handleTimeout(id) {
            cb = this._callbacksById.get(id);
            if (cb == null) throw new Exception(); // this shouldn't happen
            this._callbacksById.remove(id);
            cb();
            this._flushUpdatesIfNeeded();
        }

        function handleUiGeneratedEvent(type, id, argString) {
            elementOrFrame = id == -1 ? this : this._elementById.get(id);
            if (elementOrFrame != null) {
                handlerAndParser = elementOrFrame._handlers.get(type);
                if (handlerAndParser != null) {
                    handler = handlerAndParser[0];
                    parser = handlerAndParser[1];
                    args = parser == null ? [] : parser(argString);
                    handler.invoke(args);
                    this._flushUpdatesIfNeeded();
                }
            }
        }
    }

    function postLoadHandler(frame) {
        frame._maybeFireOnLoadHandlers();
    }
}
