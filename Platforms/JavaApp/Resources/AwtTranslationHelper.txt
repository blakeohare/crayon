package org.crayonlang.interpreter;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;

import org.crayonlang.interpreter.structs.Value;

public final class AwtTranslationHelper {

    private AwtTranslationHelper() {}

    public static String getRawByteCodeString() {
        return ResourceReader.readFileText("resources/bytecode.txt");
    }
	
    public static String getTextResource(String path) {
        return ResourceReader.readFileText("resources/" + path);
    }

    public static BufferedImage flipImage(Object original, boolean flipX, boolean flipY) {
        BufferedImage originalImage = (BufferedImage) original;
        if (!flipX && !flipY) return originalImage;
        int x = 0;
        int y = 0;
        int width = originalImage.getWidth();
        int height = originalImage.getHeight();
        BufferedImage flippedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = flippedImage.createGraphics();
        if (flipX) {
            x = width;
            width = -width;
        }
        if (flipY) {
            y = height;
            height = -height;
        }
        g.drawImage(originalImage, x, y, width, height, null);
        g.dispose();
        return flippedImage;
    }

    public static String[] directoryListing(String path) {
        File folder = new File(path);
        ArrayList<String> output = new ArrayList<>();
        for (File file : folder.listFiles()) {
            output.add(file.getName());
        }
        return output.toArray(new String[output.size()]);
    }

    private static boolean isWindowsCached = System.getProperty("os.name").startsWith("Windows");
    public static boolean isWindows() {
        return isWindowsCached;
    }

    public static String readFile(String path) {
        try {
            byte[] bytes = Files.readAllBytes(Paths.get(path));
            return new String(bytes);
        } catch (IOException e) {
            return null;
        }
    }

    public static int writeFile(String path, String contents) {
        byte[] bytes = contents.getBytes();
        try {
            FileOutputStream fos = new FileOutputStream(path);
            fos.write(bytes);
            fos.close();
            return 0;
        } catch (IOException e) {
            // TODO: test with errors 1-3
            return 4;
        }
    }

    public static boolean checkPathExistence(String path, boolean dirOnly, boolean checkCase) {
        Path p;
        try {
            p = Paths.get(path);
        } catch (java.nio.file.InvalidPathException ipe) {
            return false;
        }
        return dirOnly ? Files.isDirectory(p) : Files.exists(p);
    }

    private static String appDataRoot = null;
    public static String getAppDataRoot() {
        if (appDataRoot == null) {
            if (isWindows()) {
                String appData = System.getenv().get("APPDATA");
                if (appData == null) throw new IllegalStateException("%APPDATA% not set on Windows. How strange is that.");
                appDataRoot = appData.replace('\\', '/') + "/Polarity";
            } else {
                appDataRoot = "~/.Polarity";
            }
        }
        return appDataRoot;
    }

	// TODO: Ogg decoding in Java
	private static class MusicDummyObject {
		private String path;
		public MusicDummyObject(String path) {
			this.path = path;
		}
	}

    public static Object loadMusicFromResource(String path) {
        return new MusicDummyObject(path);
    }

    public static BufferedImage scaleImage(Object imageObj, int width, int height) {
		BufferedImage image = (BufferedImage) imageObj;
        BufferedImage newImage = new BufferedImage(width, height, image.getType());
        Graphics2D g = newImage.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        g.drawImage(image, 0, 0, width, height, 0, 0, image.getWidth(), image.getHeight(), null);
        g.dispose();
        return newImage;
    }

	public static BufferedImage generateNativeBitmapOfSize(int width, int height) {
        return new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	}

	public static String getImageResourceManifestString() {
		return ResourceReader.readFileText("resources/imagesheetmanifest.txt");
	}

	public static void imageResourceBlitImage(
		Object target, Object source,
		int targetX, int targetY,
		int sourceX, int sourceY,
		int width, int height) {
		
		Graphics g = ((BufferedImage) target).getGraphics();
		g.drawImage(
			(BufferedImage) source,
			targetX, targetY,
			targetX + width, targetY + height,
			sourceX, sourceY,
			sourceX + width, sourceY + height,
			null);
        g.dispose();
	}

	public static void imageLoadAsync(String genFileName, Object[] nativeImageDataNativeData, Object[] imageLoaderNativeData) {
		// TODO: implement this for real and add mutex checks to checkLoaderIsDone
		boolean loaded = imageLoadSync(genFileName, nativeImageDataNativeData, null);
		imageLoaderNativeData[2] = loaded ? 1 : 2;
	}

	public static boolean imageLoadSync(String genFileName, Object[] nativeImageDataNativeData, ArrayList<Value> outStatusCheesy) {
		BufferedImage image = ResourceReader.loadImageFromLocalFile("images/" + genFileName);
		if (image != null) {
			if (outStatusCheesy != null) java.util.Collections.reverse(outStatusCheesy);
			nativeImageDataNativeData[0] = image;
			nativeImageDataNativeData[1] = image.getWidth();
			nativeImageDataNativeData[2] = image.getHeight();
			return true;
		}
		return false;
	}

	public static void checkLoaderIsDone(
		Object[] imageLoaderNativeData,
		Object[] nativeImageDataNativeData,
		ArrayList<Value> output) {
		
		// TODO: add mutex checks when imageLoadAsync is implemented
		int status = (int)imageLoaderNativeData[2];
		// TODO: release mutex

		output.set(0, Interpreter.v_buildInteger(status));
	}

	private static HashMap<String, java.awt.Font> systemFonts = null;
	private static HashMap<Integer, java.awt.Font> loadedFonts = new HashMap<>();
	private static HashMap<String, java.awt.Font> loadedFontsWithStyle = new HashMap<>();

	public static java.awt.Font getFont(int fontId, double size, boolean isBold, boolean isItalic) {
		int sizeKey = (int) (size * 1024 + .5);
		String key = fontId + "," + sizeKey + "," + (isBold ? "1" : "0") + "," + (isItalic ? "1" : "0");
		java.awt.Font output = loadedFontsWithStyle.get(key);
		if (output == null) {
			output = loadedFonts.get(fontId);
			int style = (isBold ? java.awt.Font.BOLD : 0) | (isItalic ? java.awt.Font.ITALIC : 0);
			output = output.deriveFont(style, (float) size);
			loadedFontsWithStyle.put(key, output);
		}
		return output;
	}

	public static boolean loadFont(boolean isSystem, String name, int globalId) {
		if (isSystem) {
			if (systemFonts == null) {
				systemFonts = new HashMap<>();
				for (java.awt.Font font : java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts()) {
					String fontName = font.getFontName();
					systemFonts.put(fontName, font);
				}
			}

			java.awt.Font systemFont = systemFonts.get(name);

			if (systemFont != null) {
				loadedFonts.put(globalId, systemFont);
				return true;
			}
			return false;
		} else {
			throw new RuntimeException("Not implemented.");
		}
	}

	public static int pushCodePoints(ArrayList<Integer> codePoints, String value) {
		int length = value.length();

		for (int i = 0; i < length; ++i) {
			char c = value.charAt(i);
			codePoints.add((int) c);
		}

		return length;
	}
}
