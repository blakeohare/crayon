/*
    args[0] -> list of integers
    args[1] -> format
        0: UNKNOWN - auto detection desired
        1: UTF8
        2: UTF16
        3: UTF32
    args[2] -> output list. Add the string value to this list.
*/
Value textencoding_convertBytesToText(VmContext vm, Value arg1, Value arg2, Value arg3) {

    // TODO: the args here are taken directly from the old CNI-based library. I need to go through and rename and unwrap these accordingly.

    if (arg1.type != Types.LIST) {
        return buildInteger(vm.globals, 2);
    }

    ListImpl byteList = (ListImpl) arg1.internalValue;
    int format = (int) arg2.internalValue;
    ListImpl output = (ListImpl) arg3.internalValue;
    Array<string> strOut = Core.StringBuffer16;
    int length = byteList.size;
    Array<int> unwrappedBytes = new Array<int>(length);
    int i = 0;
    Value value = null;
    int c = 0;
    while (i < length) {
        if (@ext_boolean("ARRAY_IS_LIST")) {
            value = byteList.list[i];
        } else {
            value = byteList.array[i];
        }
        if (value.type != Types.INTEGER) {
            return buildInteger(vm.globals, 3); // list contains a non-integer.
        }
        c = (int)value.internalValue;
        if (c < 0 || c > 255) {
            return buildInteger(vm.globals, 3);
        }
        unwrappedBytes[i] = c;
        i += 1;
    }
    int sc = Extension.CoreFunc_TextEncoding_ConvertBytesToText(unwrappedBytes, format, strOut);
    if (sc == 0) addToList(output, buildString(vm.globals, strOut[0]));
    return buildInteger(vm.globals, sc);
}

/*
    args[0] -> string value
    args[1] -> format
        1: ASCII
        2: ISO-8859-1
        3: UTF-8
        4: UTF-16 Little Endian
        5: UTF-16 Big Endian
        6: UTF-32 Little Endian
        7: UTF-32 Big Endian
    args[2] -> include BOM (bool)
    args[3] -> output list.
        Create a new list and add that list to the output list.
        This will result in a NESTED list where this output list that is passed in will have only 1 item in it.
*/
Value textencoding_convertTextToBytes(VmContext vm, Value arg1, Value arg2, Value arg3, Value arg4) {

    // TODO: the args here are taken directly from the old CNI-based library. I need to go through and rename and unwrap these accordingly.

    string value = (string) arg1.internalValue;
    int format = (int) arg2.internalValue;
    bool includeBom = (bool) arg3.internalValue;
    ListImpl output = (ListImpl) arg4.internalValue;
    List<Value> byteList = new List<Value>();
    Array<int> intOut = Core.IntBuffer16;
    int sc = Extension.CoreFunc_TextEncoding_ConvertTextToBytes(
        value,
        includeBom,
        format,
        byteList,
        vm.globals.positiveIntegers,
        intOut);

    // Swap the endian-ness.
    int swapWordSize = intOut[0];
    if (swapWordSize != 0) {
        int i = 0;
        int j = 0;
        int length = byteList.Size();
        Value swap = null;
        int half = swapWordSize >> 1;
        int k = 0;
        while (i < length) {
            k = i + swapWordSize - 1;
            for (j = 0; j < half; j += 1) {
                swap = byteList[i + j];
                byteList[i + j] = byteList[k - j];
                byteList[k - j] = swap;
            }
            i += swapWordSize;
        }
    }
    if (sc == 0) addToList(output, buildList(byteList));
    return buildInteger(vm.globals, sc);
}
