import Images;

namespace Nori {

    const Image_Source = 'img.src';
    const Image_NearestNeighbor = 'img.nn';

    class Image : Element {

        static field globalImageIdAlloc = 1;

        field _imageData = {
            'v': 0,
            'bmp': null,
            'b64': '',
        };

        constructor() : base('Image') { }

        function isNearestNeighbor() { return this._getBoolProperty(Image_NearestNeighbor); }
        function setNearestNeighbor(value) { return this._setBoolProperty(Image_NearestNeighbor, value); }

        function setSource(bitmap) {
            d = this._imageData;
            oldBmp = d['bmp'];
            if (bitmap == null) {
                if (oldBmp != null) {
                    d['v'] = 0;
                    d['bmp'] = null;
                    d['b64'] = '';
                }
                return this._clearProperty(Image_Source);
            }

            if (!(bitmap is Images.Bitmap)) throw new InvalidArgumentException("argument must be an Images.Bitmap instance");

            if (oldBmp != bitmap || oldBmp == null || bitmap._versionId != d['v']) {
                d['v'] = bitmap._versionId;
                d['bmp'] = bitmap;
                d['b64'] = bitmap._lastPng ?? bitmap.toBase64(Images.ImageFormat.PNG);

                return this._setStringProperty(Image_Source, d['b64']);
            }
            return this;
        }

        function refreshImage() {
            return this.setSource(this._imageData['bmp']);
        }

        function setAttributeWithString(name, strValue) {
            switch (name) {
                case 'nearestNeighbor': return this._setBooleanAsString(Image_NearestNeighbor, strValue);
                default: return base.setAttributeWithString(name, strValue);
            }
        }
    }
}
