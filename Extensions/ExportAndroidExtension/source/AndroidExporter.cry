import Base64;
import CrayonExporter;
import FileIO;
import FileIOTemp;
import Json;
import Resources;
import TextEncoding;
import Wax;

class AndroidExporter {

    field buildData;
    field resDb;
    field properties;
    field cbxBundle;
    field templates;
    field outputDir;
    field args;

    constructor(buildData, useTempDir, args) {
        this.buildData = buildData;
        this.cbxBundle = this.buildData.getCbxBundle();
        this.resDb = this.cbxBundle.getResourceDatabase();
        this.properties = this.buildData.getExportProperties();
        this.templates = new TemplateLoader();

        this.outputDir = useTempDir
            ? FileIOTemp.TempFiles.createDirectory(5 * 60) // temp dir exists for 5 minutes
            : this.properties.getOutputDirectory();
        this.args = args;
    }

    function getOrientation() {
        orientations = this.args.get('orientations') ?? [];
        up = false;
        down = false;
        left = false;
        right = false;

        for (raw : orientations) {
            switch (raw) {
                case 'portrait': up = true; break;
                case 'upsidedown': down = true; break;
                case 'landscape': left = true; right = true; break;
                case 'landscapeleft': left = true; break;
                case 'landscaperight': right = true; break;
                case 'all': return 'fullSensor';
                default: return null;
            }
        }

        vert = up && down;
        hor = left && right;
        anyVert = up || down;
        anyHor = left || right;

        if (!anyHor && !anyVert) return 'unspecified';

        if (!anyHor) {
            if (vert) return 'sensorPortrait';
            if (up) return 'portrait';
            return 'reversePortrait';
        }

        if (!anyVert) {
            if (hor) return 'sensorLandscape';
            if (left) return 'landscape';
            return 'reverseLandscape';
        }

        if (hor && vert) return 'fullSensor';

        return 'fullSensor'; // enabling both orientations in one direction but only allowing one orientation in the transverse direction isn't a valid supported option in android, at least at the moment and as far as I can tell.
    }

    function getEscapedAndroidSdk() {
        androidSdk = this.args.get('androidSdk');
        if (androidSdk == '') return null;

        sb = [];
        for (i = 0; i < androidSdk.length; i++) {
            c = androidSdk[i];
            switch (c) {
                case ':': sb.add('\\:'); break;
                case '\\': sb.add('\\\\'); break;
                default: sb.add(c); break;
            }
        }
        return sb.join('');
    }

    function exportJsBaseProject() {

        response = WaxHub.getActiveHub().awaitSendRequest('ExportWebExtension', {
            'buildData': this.buildData._data,
            'extArgs': {
                'useTmpDir': true,
                'filePrefix': '/',
                'fullPage': true,
                'min': false,
            }
        });

        return response;
    }

    function export() {
        errors = [];

        projectId = this.buildData.getProjectId();

        androidSdkEscaped = this.getEscapedAndroidSdk();
        if (androidSdkEscaped == null) {
            errors.add("Cannot export Android projects without having the ANDROID_HOME environment variable set to the location of the Android SDK. This can be overridden with the androidSdk extension argument.");
        }

        title = this.args.get('title');
        if (title.length == 0) {
            errors.add("App title is blank.");
        }

        javaPkg = this.args.get('javaPackage');
        if (javaPkg.length == 0) {
            errors.add("Java Package name is blank.");
        }

        // TODO: validate java package name

        if (errors.length > 0) {
            return { "errors": errors };
        }

        this.templates
            .addReplacement('PROJECT_ID', projectId)
            .addReplacement('PROJECT_ID_LOWERCASE', projectId.lower())
            .addReplacement('ANDROID_SDK_LOCATION', androidSdkEscaped)
            .addReplacement('JAVA_PACKAGE', javaPkg)
            .addReplacement('PROJECT_TITLE', title)
            .addReplacement('ANDROID_ORIENTATION', this.getOrientation());

        response = this.exportJsBaseProject();
        errors = response.get('errors') ?? [];
        if (errors.length > 0) {
            return response;
        }
        jsDir = response.get('outputDir');
        files = {};
        includeWorkspace = !FileIO.fileExists(this.canonicalizePath(this.outputDir + '/.idea/workspace.xml'));
        this.doExport(jsDir, files, includeWorkspace);
        FileData.writeToDisk(this.outputDir, files);
    }

    function canonicalizePath(path) {
        parts = path.split('/');
        out = [parts[0]];
        for (i = 1; i < parts.length; i++) {
            if (parts[i] != '') out.add(parts[i]);
        }
        return FileIO.pathJoin(out);
    }

    function doExport(jsProjDir, filesOut, includeWorkspace) {
        projectId = this.buildData.getProjectId();
        javaPackage = this.args.get('javaPackage');
        javaPackageDir = javaPackage.replace('.', '/');

        files = {};
        for (file : this.gatherFilePaths(jsProjDir)) {
            files[file] = true;
        }
        files['test_server.py'] = false;

        for (path : files.keys()) {
            if (files[path]) {
                absPath = this.canonicalizePath(jsProjDir + '/' + path);
                if (path.endsWith('.js') || path.endsWith('.txt') || path.endsWith('.html')) {
                    text = FileIO.fileReadText(absPath);
                    text = this.alterBaseWebFile(path, text);
                    file = FileData.createTextFile(text);
                } else {
                    bytes = FileIO.fileReadBytes(absPath);
                    file = FileData.createBinaryFileFromBytes(bytes);
                }
                filesOut['app/src/main/assets/' + path] = file;
            }
        }

        filesOut['app/src/main/assets/android.js'] = FileData.createTextFile(this.templates.getText('app/src/main/assets/android.js'));

        ideaXmlFiles = ['compiler', 'encodings', 'gradle', 'misc', 'modules', 'vcs', 'copyright/profile_settings', 'scopes/scope_settings'];
        if (includeWorkspace) ideaXmlFiles.add('workspace');
        for (ideaFile : ideaXmlFiles) {
            filesOut['.idea/' + ideaFile + '.xml'] = this.getTextFile('idea/' + ideaFile + '.xml');
        }

        filesOut['app/.gitignore'] = this.getTextFile('app/gitignore.txt');
        filesOut['app/app.iml'] = this.getTextFile('app/app.iml');
        filesOut['app/build.gradle'] = this.getTextFile('app/build.gradle');
        filesOut['app/proguard-rules.txt'] = this.getTextFile('app/proguard-rules.txt');
        filesOut['app/src/main/AndroidManifest.xml'] = this.getTextFile('app/src/main/AndroidManifest.xml');

        filesOut['gradle/wrapper/gradle-wrapper.jar'] = FileData.createBinaryFileFromBytes(this.templates.getBinary('gradle/wrapper/gradle-wrapper.jar'));
        filesOut['gradle/wrapper/gradle-wrapper.properties'] = this.getTextFile('gradle/wrapper/gradle-wrapper.properties');

        filesOut['.gitignore'] = this.getTextFile('gitignore.txt');
        filesOut['build.gradle'] = this.getTextFile('build.gradle');
        filesOut[projectId.lower() + '.iml'] = this.getTextFile('PROJECT_ID.iml');
        filesOut['gradle.properties'] = this.getTextFile('gradle.properties');
        filesOut['gradlew'] = this.getTextFile('gradlew');
        filesOut['gradlew.bat'] = this.getTextFile('gradlew.bat');
        filesOut['local.properties'] = this.getTextFile('local.properties');
        filesOut['settings.gradle'] = this.getTextFile('settings.gradle');

        filesOut['app/src/main/java/' + javaPackageDir + '/app/CrayonWebView.java'] = this.getTextFile('app/src/main/java/CrayonWebView.java');
        filesOut['app/src/main/java/' + javaPackageDir + '/app/MainActivity.java'] = this.getTextFile('app/src/main/java/MainActivity.java');
    }

    function getTextFile(path) {
        return FileData.createTextFile(this.templates.getText(path));
    }

    function gatherFilePaths(dir) {
        out = [];
        this.gatherFilePathsImpl(dir, '', out);
        return out;
    }

    function alterBaseWebFile(path, content) {
        switch (path) {
            case 'index.html': return this.modifyIndexHtml(content);
            default: return content;
        }
    }

    function modifyIndexHtml(code) {
        lines = code.split('\n');
        newLines = [];
        for (line : lines) {
            if (line.contains('favicon.ico')) continue;
            if (line.trim() == '</head>') {
                newLines.add(
                    "<script src=\"android.js\"></script>",
                    "<style type=\"text/css\">",
                    "  body { margin:0px; background-color:#000; }",
                    "  #crayon_host {",
                    "    background-color:#000;",
                    "    text-align:left;",
                    "    width:100%;",
                    "    height:100%;",
                    "  }",
                    "</style>");
            }
            newLines.add(line);
        }

        code = newLines.join('\n');
        code = code.replace(
            '<script src="',
            '<script src="file:///android_asset/');

        return code;
    }

    function gatherFilePathsImpl(dir, prefix, out) {
        for (file : FileIO.directoryList(dir)) {
            skip = false;
            switch (file.lower()) {
                case '.ds_store':
                case 'thumbs.db':
                case '.gitignore':
                    skip = true;
                    break;
            }

            if (skip) continue;

            absPath = dir + '/' + file;
            relPath = prefix + (prefix == '' ? '' : '/') + file;

            if (FileIO.directoryExists(absPath)) {
                this.gatherFilePathsImpl(absPath, relPath, out);
            } else {
                out.add(relPath);
            }
        }
    }
}
