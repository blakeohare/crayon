import Environment;

namespace Ipc {

    function isNamedPipeSupported() {
        env = Environment.getEnvironment();
        return env['platform'] == 'windows';
    }

    function ensureNamedPipeSupported() {
        if (!isNamedPipeSupported()) {
            throw new InvalidOperationException("Named pipes are not supported on this platform.");
        }
    }

    class NamedPipeClient {

        constructor(name) {
            ensureNamedPipeSupported();
            NamedPipeClient.throwIfErr($$$('ipcNamedPipeCreate', this, name));
        }

        function writeLine(s) {
            NamedPipeClient.throwIfErr($$$('ipcNamedPipeSend', this, (s ?? '') + ''));
        }

        function flush() {
            NamedPipeClient.throwIfErr($$$('ipcNamedPipeFlush', this));
        }

        static function throwIfErr(s) {
            if (s != null) throw new Exception(s);
        }
    }

    class NamedPipeServer {

        field _name;
        field _onData = data => {};
        field _onStart = () => {};
        field _onClose = () => {};

        constructor(name) {
            ensureNamedPipeSupported();
            this._name = name;
        }

        function setListener(cb) {
            this._onData = cb;
            return this;
        }

        function setOnStart(cb) {
            this._onStart = cb;
            return this;
        }

        function setOnClosed(cb) {
            this._onClose = cb;
            return this;
        }

        function start() {
            NamedPipeClient.throwIfErr($$$('ipcNamedPipeServerCreate',
                this,
                this._name,
                () => { this._onStart(); },
                data => { this._onData(data); },
                () => { this._onClose(); }));
        }

        function close() {
            NamedPipeClient.throwIfErr($$$('ipcNamedPipeServerClose', this));
        }
    }
}
