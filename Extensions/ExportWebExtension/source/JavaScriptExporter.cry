import Base64;
import CrayonExporter;
import FileIOTemp;
import Json;
import TextEncoding;

class JavaScriptExporter {

    field buildData;
    field resDb;
    field properties;
    field cbxBundle;
    field templates;
    field outputDir;
    field args;

    constructor(buildData, useTempDir, args) {
        this.buildData = buildData;
        this.cbxBundle = this.buildData.getCbxBundle();
        this.resDb = this.cbxBundle.getResourceDatabase();
        this.properties = this.buildData.getExportProperties();
        this.templates = new TemplateLoader();
        this.outputDir = useTempDir
            ? FileIOTemp.TempFiles.createDirectory(5 * 60) // temp dir exists for 5 minutes
            : this.properties.getOutputDirectory();
        this.args = args;
    }

    function export() {
        files = {};
        this.doExport(files);
        FileData.writeToDisk(this.outputDir, files);
    }

    function doExport(filesOut) {

        projectId = this.buildData.getProjectId();

        this.templates.addReplacement('PROJECT_ID', projectId);
        this.templates.addReplacement('TITLE', projectId);
        this.templates.addReplacement('PROJECT_TITLE', this.args.get('title') ?? projectId);
        this.templates.addReplacement('FAVICON', this.properties.hasIcons()
            ? ('<link rel="shortcut icon" href="' + this.args.get('filePrefix', '') + 'favicon.ico">')
            : '');
        this.templates.addReplacement('CSS_EXTRA', this.args.get('fullPage') == true
            ? [
                '#crayon_host { background-color:#000; text-align:left; width: 100%; height: 100%; }',
                'body { overflow:hidden; }'
            ].join('\n')
            : '');
        this.templates.addReplacement('JS_EXTRA_HEAD', [
            this.args.get('usesU3') == true ? '<script src=\"u3.js\"></script>' : '',
            this.args.get('fullPage') == true ? '<script type="text/javascript">C$common$globalOptions["fullscreen"] = true;</script>' : '',
        ].join('\n'));

        filesOut['test_server.py'] = FileData.createTextFile(this.templates.getText('test_server_py.txt'));
        filesOut['index.html'] = FileData.createTextFile(this.templates.getText('index_html.txt'));
        filesOut['common.js'] = FileData.createTextFile(this.templates.getText('common_js.txt'));
        filesOut['vm.js'] = FileData.createTextFile(this.templates.getText('vm_js.txt'));
        filesOut['bytecode.js'] = FileData.createTextFile('C$bytecode = ' + Json.serializeJson(this.cbxBundle.getByteCode()) + ';\n');

        resLookup = {};
        fileNames = this.resDb.getFileNames();
        files = this.resDb.getFiles();
        for (i = 0; i < files.length; i++) {
            resLookup[fileNames[i]] = files[i];
        }
        resources = [];
        manifest = this.resDb.getManifestText();
        for (line : manifest.split('\n')) {
            parts = line.split(',');
            if (parts.length >= 3) {
                type = parts[0];
                name = parts[-1];

                switch (type) {
                    case 'TXT':
                        res = resLookup['res/' + name];
                        txt = res.getTextContent();
                        if (txt == null) {
                            txtBase64 = res.getBytesB64();
                            txtBytes = base64ToBytes(txtBase64);
                            txt = TextEncoding.convertBytesToText(txtBytes, TextFormat.UTF8);
                        }
                        resources.add('C$common$addTextRes(', Json.serializeJson(name), ', ', Json.serializeJson(txt), ');\n');
                        break;
                    case 'IMG':
                        filesOut['resources/' + name] = FileData.createBinaryFileFromBytes([1, 2, 3]);
                        break;
                    case 'SND':
                        filesOut['resources/' + name] = FileData.createBinaryFileFromBytes([1, 2, 3]);
                        break;
                    case 'BIN':
                        // consider placing a limit on this and instead relying on reading files via XHR
                        bytesB64 = resLookup['res/' + name].getBytesB64();
                        resources.add('C$common$addBinaryRes(', Json.serializeJson(name), ', ', '"', bytesB64, '");\n');
                        break;
                }
            }
        }
        resources.add('C$common$resourceManifest = ', Json.serializeJson(manifest), ';\n');
        filesOut['resources.js'] = FileData.createTextFile(resources.join(''));
    }
}
