using System;
using System.Linq;
using System.Collections.Generic;
using Interpreter.Structs;

namespace Interpreter.Vm
{
    public static class TranslationHelper
    {
        public static readonly Random Random = new Random();

        public static ProgramData ProgramData { get; set; }
        public static int[] IntBuffer16 { get; private set; }
        public static double[] FloatBuffer16 { get; private set; }
        public static string[] StringBuffer16 { get; private set; }
        public static string[] CommandLineArgs { get; set; }
        public static string ResourceManifest { get; set; }
        public static string ImageSheetManifest { get; set; }
        public static string ByteCode { get; set; }

        public static readonly bool IsWindows =
            Environment.OSVersion.Platform == PlatformID.Win32NT ||
            Environment.OSVersion.Platform == PlatformID.Win32S ||
            Environment.OSVersion.Platform == PlatformID.Win32Windows ||
            Environment.OSVersion.Platform == PlatformID.WinCE;

        static TranslationHelper()
        {
            IntBuffer16 = new int[16];
            FloatBuffer16 = new double[16];
            StringBuffer16 = new string[16];
            CommandLineArgs = new string[0];
        }

        public static void RunInterpreter(int executionContextId)
        {
            CrashIfStatusIsBad(CrayonWrapper.v_runInterpreter(executionContextId));
        }

        public static void RunInterpreter(Value functionPointer, params Value[] args)
        {
            CrashIfStatusIsBad(CrayonWrapper.v_runInterpreterWithFunctionPointer(functionPointer, args));
        }

        private static void CrashIfStatusIsBad(int status)
        {
            if (status == 3)
            {
                System.Environment.Exit(1);
            }
        }

        private static string[] cmdLineArgs = null;
        public static void SetCmdLineArgs(string[] args) { cmdLineArgs = args.ToArray(); }
        public static string[] GetCmdLineArgs() { return cmdLineArgs; }

        public static void ShuffleInPlace<T>(List<T> list)
        {
            if (list.Count < 2) return;

            int length = list.Count;
            int tIndex;
            T tValue;
            for (int i = length - 1; i >= 0; --i)
            {
                tIndex = Random.Next(length);
                tValue = list[tIndex];
                list[tIndex] = list[i];
                list[i] = tValue;
            }
        }

        public static List<T> ListConcat<T>(List<T> a, List<T> b)
        {
            List<T> output = new List<T>(a.Count + b.Count);
            output.AddRange(a);
            output.AddRange(b);
            return output;
        }

        public static List<Value> MultiplyList(List<Value> items, int times)
        {
            List<Value> output = new List<Value>(items.Count * times);
            while (times-- > 0)
            {
                output.AddRange(items);
            }
            return output;
        }

        public static List<T> NewListOfSize<T>(int size)
        {
            List<T> output = new List<T>(size);
            while (size-- > 0)
            {
                output.Add(default(T));
            }
            return output;
        }

        private static readonly string[] SPLIT_SEP = new string[1];

        public static string[] StringSplit(string value, string sep)
        {
            if (sep.Length == 1)
            {
                return value.Split(sep[0]);
            }

            if (sep.Length == 0)
            {
                return value.ToCharArray().Select<char, string>(c => "" + c).ToArray();
            }

            SPLIT_SEP[0] = sep;
            return value.Split(SPLIT_SEP, StringSplitOptions.None);
        }

        public static string StringReverse(string value)
        {
            if (value.Length < 2) return value;
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            for (int i = value.Length - 1; i >= 0; --i)
            {
                sb.Append(value[i]);
            }
            return sb.ToString();
        }

        public static bool CheckStringSlice(string haystack, int index, string value)
        {
            if (index + value.Length > haystack.Length) return false;
            for (int i = value.Length - 1; i >= 0; --i)
            {
                if (haystack[index + i] != value[i])
                {
                    return false;
                }
            }
            return true;
        }

        public static void Assertion(string message)
        {
            throw new Exception(message);
        }

        public static void ParseFloatOrReturnNull(double[] outParam, string rawValue)
        {
            double output;
            if (double.TryParse(rawValue, out output))
            {
                outParam[0] = 1;
                outParam[1] = output;
            }
            else
            {
                outParam[0] = -1;
            }
        }

        public static bool AlwaysTrue()
        {
            return true;
        }

        public static bool AlwaysFalse()
        {
            return false;
        }

        public static bool IsValidInteger(string value)
        {
            char c;
            for (int i = value.Length - 1; i >= 0; --i)
            {
                c = value[i];
                if (c < '0' || c > '9')
                {
                    return false;
                }
            }
            return true;
        }

        public static void ParseFloat(string strValue, double[] output)
        {
            double fValue;
            if (double.TryParse(strValue, out fValue))
            {
                output[0] = 1;
                output[1] = fValue;
            }
            else
            {
                output[0] = -1;
            }
        }

        public static string FloatToString(double value)
        {
            string output = value.ToString();
            if (output[0] == '.')
            {
                output = "0" + output;
            }
            if (!output.Contains('.'))
            {
                output += ".0";
            }
            return output;
        }

        private static object[] ARGS_PLACEHOLDER = new object[1];
        public static Value InvokeDynamicLibraryFunction(object functionPointer, Value[] args)
        {
            ARGS_PLACEHOLDER[0] = args;
            return (Value)((System.Reflection.MethodInfo)functionPointer).Invoke(null, ARGS_PLACEHOLDER);
        }

        public static int VmDetermineLibraryAvailability(string name, string version)
        {
            return TranslationHelper.LibraryRegistry.LoadLibrary(name, version);
        }

        public static int VmRunLibraryManifest(
            string name,
            object libRegObj)
        {
            Library library = TranslationHelper.LibraryRegistry.GetLibrary(name);
            if (library == null)
            {
                return 0;
            }

            try
            {
                library.RunManifest(libRegObj);
                return 0;
            }
            catch (Exception)
            {
                return 3;
            }
        }

        public static LibraryRegistry LibraryRegistry { get; set; }

        public static void RegisterLibraryFunction(
            Type libraryWrapperClass,
            object libRegObj,
            string functionName,
            int argCount)
        {
            string libraryName = libraryWrapperClass.Namespace.Split('.')[2];
            string fullyQualifiedFunctionName = "lib_" + libraryName.ToLower() + "_" + functionName;
            string compiledName = "v_lib_" + libraryName.ToLower() + "_function_" + functionName;
            System.Reflection.MethodInfo fp = libraryWrapperClass.GetMethod(compiledName);
            if (fp == null) throw new Exception("Library function not found: '" + fullyQualifiedFunctionName + "'");
            CrayonWrapper.v_registerLibraryFunction(
                fp,
                libRegObj,
                fullyQualifiedFunctionName,
                argCount);
        }

        public static bool SubstringIsEqualTo(string haystack, int index, string needle)
        {
            int needleLength = needle.Length;
            if (index + needleLength > haystack.Length) return false;
            if (needleLength == 0) return true;
            if (haystack[index] != needle[0]) return false;
            if (needleLength == 1) return true;
            for (int i = 1; i < needleLength; ++i)
            {
                if (needle[i] != haystack[index + i]) return false;
            }
            return true;
        }

        public static object ThrowNotImplemented(string msg)
        {
            throw new NotImplementedException(msg);
        }

		private static DateTime UNIX_EPOCH = new DateTime(1970, 1, 1);
		public static double CurrentTime
		{
			get
			{
				return System.DateTime.UtcNow.Subtract(UNIX_EPOCH).TotalSeconds;
			}
		}
    }
}
