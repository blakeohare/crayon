
EXT-TYPE: string BrowserInterop_GetUrlPath();
EXT-TYPE: void BrowserInterop_SetUrlPath(string path);
EXT-TYPE: string Cookie_Get(string name);
EXT-TYPE: void Cookie_Set(string name, string value, int expiration);

EXT-TYPE: void CoreFunc_DateTimeParseDate(Array<int> intOut, object nativeTz, int year, int month, int day, int hour, int minute, int microseconds);
EXT-TYPE: bool CoreFunc_DateTimeUnixToStructured(Array<int> intOut, object nativeTz, double unixTimestamp);
EXT-TYPE: object CoreFunc_DateTimeGetDataForLocalTimeZone(Array<string> strOut, Array<int> intOut);
EXT-TYPE: int CoreFunc_DateTimeGetUtcOffsetAt(object nativeTimezone, int unixTime);
EXT-TYPE: bool CoreFunc_DateTimeIsDstOccurringAt(object nativeTz, int unixTimestamp);
EXT-TYPE: Array<object> CoreFunc_DateTimeInitializeTimeZoneList();

EXT-TYPE: string CoreFunc_EnvironmentDescriptor();
EXT-TYPE: string CoreFunc_EnvironmentGetVariable(string name);
EXT-TYPE: bool CoreFunc_EnvironmentIsMobile();

EXT-TYPE: void CoreFunc_HttpSend(VmContext vm, Value callback, Value failCallback, string url, string method, string contentType, Array<int> contentBinary, string contentText, Array<string> headerKvp, Value bytesObj, Array<object> bytesObjNativeData);

EXT-TYPE: bool CoreFunc_ImageB64BytesPreferred();
EXT-TYPE: void CoreFunc_ImageBlit(object bmpTarget, object bmpSource, int targetX, int targetY, int targetWidth, int targetHeight, int sourceX, int sourceY, int sourceWidth, int sourceHeight);
EXT-TYPE: void CoreFunc_ImageChunkLoadAsync(VmContext vm, Dictionary<int, object> chunkCache, int chunkId, Array<int> chunkIds, Value callback);
EXT-TYPE: object CoreFunc_ImageEncode(object bmp, int format, Array<bool> formatOut);
EXT-TYPE: void CoreFunc_ImageEndEditSession(object edit, object bmp);
EXT-TYPE: bool CoreFunc_ImageFromBytes(object byteArrayOrB64String, Array<int> sizeOut, Array<object> bmpNativeDataOut, Value callback);
EXT-TYPE: void CoreFunc_ImageGetPixel(object bmp, object nullableEditSession, int x, int y, Array<int> statusAndColorOut);
EXT-TYPE: object CoreFunc_ImageNewBmp(int width, int height);
EXT-TYPE: object CoreFunc_ImageScale(object bmp, int newWidth, int newHeight, int algo);
EXT-TYPE: bool CoreFunc_ImageSetPixel(object editSession, int x1, int y1, int x2, int y2, int r, int g, int b, int a);
EXT-TYPE: object CoreFunc_ImageStartEditSession(object bmp);

EXT-TYPE: Value CoreFunc_JsonParse(VmGlobals globals, string text);

EXT-TYPE: void CoreFunc_LaunchBrowser(string url, int frame, string frameName);

EXT-TYPE: void JsInterop_CallbackReturn(int callbackId, string returnJson);
EXT-TYPE: bool JsInterop_Invoke(string name, string argsJson, Value nullableCallback);
EXT-TYPE: void JsInterop_RegisterCallback(string name, bool returnsAValue, Value fn);

EXT-TYPE: Array<object> CoreFunc_NamedPipeCreate(string pipeName);
EXT-TYPE: string CoreFunc_NamedPipeSend(object pipe, string data);
EXT-TYPE: string CoreFunc_NamedPipeFlush(object pipe);
EXT-TYPE: object CoreFunc_NamedPipeServerCreate(VmContext vm, string name, Value startFn, Value dataFn, Value closeFn);
EXT-TYPE: string CoreFunc_NamedPipeServerClose(object pipe);

EXT-TYPE: int CoreFunc_ProcessCurrentId();
EXT-TYPE: object CoreFunc_ProcessRun(VmContext vm, string execPath, Array<string> args, Value onDataCb, Array<int> intOut, string cwd, int flags);
EXT-TYPE: string CoreFunc_ProcessList();
EXT-TYPE: bool CoreFunc_ProcessKill(int pid);

EXT-TYPE: string CoreFunc_ResourceGetText(string path);

EXT-TYPE: int CoreFunc_TextEncoding_ConvertBytesToText(Array<int> byteValues, int format, Array<string> strOut);
EXT-TYPE: int CoreFunc_TextEncoding_ConvertTextToBytes(string value, bool includeBom, int format, List<Value> byteList, Array<Value> positiveIntegers, Array<int> intOut);

EXT-TYPE: void CoreFunc_TimedCallback(VmContext vm, Value cb, double delay);

EXT-TYPE: string UnixSocket_ClientCreate(VmContext vm, Array<object> nativeSocketOut, string path, Value onReadyCb, Value onDisonnectCb);
EXT-TYPE: string UnixSocket_ClientSend(object nativeSocket, string msg);
EXT-TYPE: string UnixSocket_ServerCreate(VmContext vm, Array<object> nativeSocketOut, string path, Value onRecvCb);
EXT-TYPE: void UnixSocket_ServerDisconnect(object nativeSocket);

# TODO: change the names of these
EXT-TYPE: int _lib_fileiocommon_getDirParent(string path, Array<string> stringOut);
EXT-TYPE: string _lib_fileiocommon_getDirRoot(string path);
EXT-TYPE: bool _lib_fileiocommon_directoryExists(object diskRef, string path);
EXT-TYPE: int _lib_fileiocommon_directoryCreate(object diskRef, string path);
EXT-TYPE: int _lib_fileiocommon_directoryDelete(object diskRef, string path);
EXT-TYPE: int _lib_fileiocommon_directoryList(object diskRef, string directoryPath, bool includeFullPathOtherwiseIncludeJustFilenames, List<string> outputList);
EXT-TYPE: int _lib_fileiocommon_directoryMove(object diskRef, string pathFrom, string pathTo);
EXT-TYPE: int _lib_fileiocommon_fileDelete(object diskRef, string wellFormedPath);
EXT-TYPE: int _lib_fileiocommon_fileMove(object diskRef, string wellFormedPathFrom, string wellFormedPathTo, bool trueForCopyFalseForMove, bool allowOverwrite);
EXT-TYPE: int _lib_fileiocommon_fileRead(object diskRef, string wellFormedSandboxedPath, bool readDataAsBytes, Array<string> stringOut, Array<Value> integers, List<Value> outputListForBytes);
EXT-TYPE: int _lib_fileiocommon_fileWrite(object diskRef, string wellFormedSandboxedPath, int formatEnum, string textOrNull, object byteArrayOrNull);
EXT-TYPE: string _lib_fileiocommon_getCurrentDirectory();
EXT-TYPE: void _lib_fileiocommon_getFileInfo(object diskRef, string wellFormedSandboxedPath, int propertiesBitMask, Array<int> intOutParams, Array<double> floatOutParams);
EXT-TYPE: string _lib_fileiocommon_getUserDirectory();
EXT-TYPE: object _lib_fileiocommon_initializeDisk(bool useLocalStorage);
