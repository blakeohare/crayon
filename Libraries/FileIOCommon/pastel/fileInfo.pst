/*
    Fetch information about a file.

    args[0]: disk host object
    args[1]: well-formed and sandboxed path
    args[2]: a bit mask of properties to fetch
    args[3]: output list, size is already 6 containing old data.

        output[0] -> bool: exists
        output[1] -> bool: is directory?
        output[2] -> int: file size bytes // TODO: deal with integer overflow
        output[3] -> bool: is readonly?
        output[4] -> float: file created timestamp
        output[5] -> float: file modified timestamp

    mask & 1 -> fetch size
    mask & 2 -> fetch readonly
    mask & 4 -> fetch created timestamp
    mask & 8 -> fetch modified timestamp

    directory and existence status are always fetched.
*/
VM.Value lib_fileiocommon_fileInfo(VM.VmContext vm, Array<VM.Value> args) {
    int mask = (int) args[2].internalValue;
    Native._lib_fileiocommon_getFileInfo(
        lib_fileiocommon_getDiskObject(args[0]),
        (string) args[1].internalValue,
        mask,
        Core.IntBuffer16,
        Core.FloatBuffer16);

    VM.ListImpl outputList = (VM.ListImpl) args[3].internalValue;
    VM.clearList(outputList);
    VM.VmGlobals globals = vm.globals;

    // exists
    VM.addToList(outputList, VM.buildBoolean(globals, Core.IntBuffer16[0] > 0));

    // is directory?
    VM.addToList(outputList, VM.buildBoolean(globals, Core.IntBuffer16[1] > 0));

    // size
    if ((mask & 1) != 0) {
        VM.addToList(outputList, VM.buildInteger(globals, Core.IntBuffer16[2]));
    } else {
        VM.addToList(outputList, globals.valueNull);
    }

    // readonly?
    if ((mask & 2) != 0) {
        VM.addToList(outputList, VM.buildBoolean(globals, Core.IntBuffer16[3] > 0));
    } else {
        VM.addToList(outputList, globals.valueNull);
    }

    // created timestamp
    if ((mask & 4) != 0) {
        VM.addToList(outputList, VM.buildFloat(globals, Core.FloatBuffer16[0]));
    } else {
        VM.addToList(outputList, globals.valueNull);
    }

    // modified timestamp
    if ((mask & 8) != 0) {
        VM.addToList(outputList, VM.buildFloat(globals, Core.FloatBuffer16[1]));
    } else {
        VM.addToList(outputList, globals.valueNull);
    }

    return args[3];
}
