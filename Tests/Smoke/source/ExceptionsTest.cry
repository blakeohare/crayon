import CrayonUnit;

class ExceptionsTest : Test {

	constructor() : base() { }

	function testNoException() {
		trace = 'A';

		// try/catch/finally
		try {
			trace += 'B';
		} catch (Exception) {
			trace += 'C';
		} finally {
			trace += 'D';
		}
		trace += 'E';
		assertThat(trace).isEqualTo('ABDE');

		// try/catch
		trace = 'A';
		try {
			trace += 'B';
		} catch (Exception) {
			trace += 'C';
		}
		trace += 'D';
		assertThat(trace).isEqualTo('ABD');

		// try/catch/catch
		trace = 'A';
		try {
			trace += 'B';
		} catch (NullReferenceException) {
			trace += 'C';
		} catch (InvalidArgumentException) {
			trace += 'D';
		}
		trace += 'E';
		assertThat(trace).isEqualTo('ABE');

		// try/catch/catch/finally
		trace = 'A';
		try {
			trace += 'B';
		} catch (NullReferenceException) {
			trace += 'C';
		} catch (InvalidArgumentException) {
			trace += 'D';
		} finally {
			trace += 'E';
		}
		trace += 'F';
		assertThat(trace).isEqualTo('ABEF');

		// try/finally
		trace = 'A';
		try {
			trace += 'B';
		} finally {
			trace += 'C';
		}
		trace += 'D';
		assertThat(trace).isEqualTo('ABCD');
	}

	function doThrow(type, msg = null) {
		throw type.createInstance(msg ?? "Exception!");
	}

	function testSimpleExceptionRouting() {
		trace = [];
		try {
			this.testSimpleException_tryFinally(trace);
			trace.add('[caught]');
		} catch (Exception e) { 
			trace.add('[bubbled]');
		}
		assertThat(trace.join()).isEqualTo('ABD[bubbled]');
		
		trace = [];
		try {
			this.testSimpleException_tryCatchFinally(trace);
			trace.add('[caught]');
		} catch (Exception e) { 
			trace.add('[bubbled]');
		}
		assertThat(trace.join()).isEqualTo('ABDEF[caught]');

		trace = [];
		try {
			this.testSimpleExceptionRouting_tryCatchCatchFinally(trace, NullReferenceException.class);
			trace.add('[caught]');
		} catch (Exception e) { 
			trace.add('[bubbled]');
		}
		assertThat(trace.join()).isEqualTo('ABDGH[caught]');

		trace = [];
		try {
			this.testSimpleExceptionRouting_tryCatchCatchFinally(trace, InvalidArgumentException.class);
			trace.add('[caught]');
		} catch (Exception e) { 
			trace.add('[bubbled]');
		}
		assertThat(trace.join()).isEqualTo('ABEGH[caught]');

		trace = [];
		try {
			this.testSimpleExceptionRouting_tryCatchCatchFinally(trace, DivisionByZeroException.class);
			trace.add('[caught]');
		} catch (Exception e) { 
			trace.add('[bubbled]');
		}
		assertThat(trace.join()).isEqualTo('ABFGH[caught]');
	}

	function testSimpleExceptionRouting_tryCatchCatchFinally(trace, exceptionType) {
		trace.add('A');
		try {
			trace.add('B');
			this.doThrow(exceptionType);
			trace.add('C');
		} catch (NullReferenceException) {
			trace.add('D');
		} catch (InvalidArgumentException) {
			trace.add('E');
		} catch (Exception) {
			trace.add('F');
		} finally {
			trace.add('G');
		}
		trace.add('H');
	}

	function testSimpleException_tryFinally(trace) {
		trace.add('A');
		try {
			trace.add('B');
			this.doThrow(Exception.class);
			trace.add('C');
		} finally {
			trace.add('D');
		}
		trace.add('E');
	}

	function testSimpleException_tryCatchFinally(trace) {
		trace.add('A');
		try {
			trace.add('B');
			this.doThrow(Exception.class);
			trace.add('C');
		} catch (Exception) {
			trace.add('D');
		} finally {
			trace.add('E');
		}
		trace.add('F');
	}
}
