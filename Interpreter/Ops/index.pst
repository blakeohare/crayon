
// all codepaths push a value, so only subtract 1
valueStackSize -= 1;
value = valueStack[valueStackSize];
root = valueStack[(valueStackSize - 1)];

if (root.type == Types.LIST) {
    if (value.type != Types.INTEGER) {
        hasInterrupt = EX_InvalidArgument(ec, "List index must be an integer.");
    } else {
        i = (int) value.internalValue;
        list1 = (List<Value>) root.internalValue;
        if (i < 0) {
            i += list1.Size();
        }
        if (i < 0 || i >= list1.Size()) {
            hasInterrupt = EX_IndexOutOfRange(ec, "List index is out of bounds");
        } else {
            valueStack[valueStackSize - 1] = list1[i];
        }
    }
} else if (root.type == Types.DICTIONARY) {
    dictImpl = (DictImpl) root.internalValue;
    keyType = value.type;
    if (keyType != dictImpl.keyType) {
        if (dictImpl.size == 0) {
            hasInterrupt = EX_KeyNotFound(ec, "Key not found. Dictionary is empty.");
        } else {
            hasInterrupt = EX_InvalidKey(ec, Core.StringConcatAll("Incorrect key type. This dictionary contains ", getTypeFromId(dictImpl.keyType), " keys. Provided key is a ", getTypeFromId(keyType), "."));
        }
    } else {
        if (keyType == Types.INTEGER) {
            intKey = (int) value.internalValue;
        } else if (keyType == Types.STRING) {
            stringKey = (string) value.internalValue;
        } else if (keyType == Types.INSTANCE) {
            objInstance1 = (ObjectInstance) value.internalValue;
            intKey = objInstance1.objectId;
        } else {
            if (dictImpl.size == 0) {
                hasInterrupt = EX_KeyNotFound(ec, "Key not found. Dictionary is empty.");
            } else {
                hasInterrupt = EX_KeyNotFound(ec, "Key not found.");
            }
        }

        if (!hasInterrupt) {
            if (keyType == Types.STRING) {
                dictStringValueLookup = (Dictionary<string, Value>) dictImpl.valueStringLookup;
                if (dictStringValueLookup.Contains(stringKey)) {
                    output = dictStringValueLookup[stringKey];
                } else {
                    hasInterrupt = EX_KeyNotFound(ec, Core.StringConcatAll("Key not found: '", stringKey, "'"));
                }
            } else {
                dictIntValueLookup = (Dictionary<int, Value>) dictImpl.valueIntLookup;
                if (dictIntValueLookup.Contains(intKey)) {
                    output = dictIntValueLookup[intKey];
                } else {
                    hasInterrupt = EX_KeyNotFound(ec, "Key not found.");
                }
            }

            if (!hasInterrupt) {
                if (output == null) {
                    // TODO: can't this be removed? Aren't the checks above sufficient? Or can the lookups contain null values?
                    hasInterrupt = EX_KeyNotFound(ec, "Key not found.");
                } else {
                    valueStack[valueStackSize - 1] = output;
                }
            }
        }
    }
} else if (root.type == Types.STRING) {
    string1 = ((string) root.internalValue);
    if (value.type != Types.INTEGER) {
        hasInterrupt = EX_InvalidArgument(ec, "String indices must be integers.");
    } else {
        int1 = ((int) value.internalValue);
        if (int1 < 0) {
            int1 += string1.Size();
        }
        if ((int1 < 0) || (int1 >= string1.Size())) {
            hasInterrupt = EX_IndexOutOfRange(ec, "String index out of range.");
        } else {
            // Single char strings are common.
            valueStack[(valueStackSize - 1)] = buildCommonString(Core.CharToString(string1[int1]));
        }
    }
} else {
    hasInterrupt = EX_InvalidArgument(ec, Core.StringConcatAll("Cannot index into this type: ", getTypeFromId(root.type)));
}
