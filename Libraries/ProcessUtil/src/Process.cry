import Dispatcher;

namespace ProcessUtil {

    /*
        Process bridge native data:
            nativeData[0] -> is finished?
            nativeData[1] -> exit code
            nativeData[2] -> STDOUT lines
            nativeData[3] -> STDERR lines
            nativeData[4] -> mutex for above items (used by native code, if necessary)
    */
    class ProcessResult {

        field _processBridge;

        constructor(bridge) {
            this._processBridge = bridge;
        }

        function isRunning() { return this.getReturnCode() == null; }
        function getReturnCode() { return ProcessResult._procReadBridge(this, 1)[0]; }
        function getStdOutLines() { return ProcessResult._procReadBridge(this, 2); }
        function getStdErrLines() { return ProcessResult._procReadBridge(this, 3); }

        static function _procReadBridge(r, id) {
            lines = [];
            $lib_processutil_readBridge(r._processBridge, lines, id);
            return lines;
        }
    }

    class Process {

        field _executable = null;
        field _args = null;

        constructor() { }

        static function isSupported() {
            return $lib_processutil_isSupported();
        }

        function setExecutable(e) {
            this._executable = e + '';
            return this;
        }

        function setArgs(args) {
            if (typeof(args) != Type.LIST) args = [args];
            for (arg : args) {
                if (typeof(arg) != Type.STRING) {
                    throw new InvalidArgumentException("Invalid argument for process arg: " + (arg ?? 'null'));
                }
            }
            this._args = args.clone();
            return this;
        }

        function launch() { return this._launchImpl(null); }
        function launchAsync(cb) { return this._launchImpl(cb); }

        function _launchImpl(cb) {
            if (!Process.isSupported()) {
                throw new NotImplementedException("This platform does not support launching processes.");
            }

            innerProc = new Core.Object();

            isAsync = cb != null;
            cbStandIn = null;
            if (isAsync) {
                wrappedCb = () => {
                    response = new ProcessResult(innerProc);
                    cb(response);
                };

                // Let the dispatcher know that something is in the pipes so that Dispatcher.flush() knows
                // to yield the main thread briefly if Dispatcher.flush() is called synchronously.
                cbRefKey = DispatcherInternal.queueConditionalCallback(wrappedCb);
                cbStandIn = () => {
                    DispatcherInternal.conditionalCallbackCompleted(cbRefKey);
                };
            }
            $lib_processutil_launchProcess(innerProc, this._executable, this._args, isAsync, cbStandIn, DispatcherInternal._nativeQueue);

            if (cb == null) {
                return new ProcessResult(innerProc);
            }

            return null;
        }
    }
}
