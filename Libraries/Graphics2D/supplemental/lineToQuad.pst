// TODO: go through and make these variable names reasonable instead of the
// auto-gen carry-over stuff from the transpiler from the days of yore.

/*

    Converts some numbers indicating a line and some width into quadrilateral corner coordinates.
    The line is never perfectly horizontal or vertical so inverting the slope is always safe.

    arg 1: object instance with the drawing queue

    Before:
        queue[n + 1] -> start X
        queue[n + 2] -> start Y
        queue[n + 3] -> end X
        queue[n + 4] -> end Y
        queue[n + 5] -> stroke width
        queue[n + 6] -> 0
        queue[n + 7] -> 0
        queue[n + 8] -> 0

    After:
        Quadrilateral ABCD
        queue[n + 1] -> AX
        queue[n + 2] -> AY
        queue[n + 3] -> BX
        queue[n + 4] -> BY
        queue[n + 5] -> CX
        queue[n + 6] -> CY
        queue[n + 7] -> DX
        queue[n + 8] -> DY

*/
Value lib_graphics2d_lineToQuad(VmContext vm, Array<Value> args) {
    double float1 = 0.0;
    double float2 = 0.0;
    double float3 = 0.0;
    int i = 0;
    int int1 = 0;
    int int2 = 0;
    int int3 = 0;
    int int4 = 0;
    int int5 = 0;
    Array<int> intArray1 = null;
    int j = 0;
    int len = 0;
    Array<object> objArray1 = null;
    ObjectInstance objInstance1 = null;
    Value output = VALUE_NULL;
    Value arg1 = args[0];

    objInstance1 = ((ObjectInstance) arg1.internalValue);
    objArray1 = objInstance1.nativeData;
    intArray1 = ((Array<int>) objArray1[0]); // event queue
    len = ((int) objArray1[1]) - 16;

    int1 = intArray1[(len + 1)]; // start X
    int2 = intArray1[(len + 2)]; // start Y
    int3 = intArray1[(len + 3)]; // end X
    int4 = intArray1[(len + 4)]; // end Y
    int5 = intArray1[(len + 5)]; // stroke width
    float1 = (0.0 + int4) - int2; // rise
    float2 = (0.0 + int3) - int1; // run
    float3 = Core.FloatDivision(float1, float2); // slope

    float1 = Core.FloatDivision(int5, 2.0); // half of the width
    if (float1 < 0.5) float1 = 1.0; // just above sqrt(2) / 2

    // yOffset = (stroke radius) / sqrt(slope ** 2 + 1)
    float2 = Core.FloatDivision(float1, Core.ForceParens(Core.Pow(((float3 * float3) + 1), 0.5)));

    // xOffset = -yOffset * slope
    float1 = -float2 * float3;

    // Ax and Bx
    // If same, move Bx down
    i = Core.Int(((int1 + float1) + 0.5));
    j = Core.Int(((int1 - float1) + 0.5));
    if (i == j) {
        j += 1;
    }

    // Ay and By
    // If same, move By right
    intArray1[(len + 1)] = i;
    intArray1[(len + 3)] = j;
    i = Core.Int(((int2 + float2) + 0.5));
    j = Core.Int(((int2 - float2) + 0.5));
    if (i == j) {
        j += 1;
    }

    // Cx and Dx
    // If same, move Cx down
    intArray1[(len + 2)] = i;
    intArray1[(len + 4)] = j;
    i = Core.Int(((int3 - float1) + 0.5));
    j = Core.Int(((int3 + float1) + 0.5));
    if (i == j) {
        i += 1;
    }

    // Cy and Dy
    // If same, move Cy right
    intArray1[(len + 5)] = i;
    intArray1[(len + 7)] = j;
    i = Core.Int(((int4 - float2) + 0.5));
    j = Core.Int(((int4 + float2) + 0.5));
    if (i == j) {
        i += 1;
    }
    intArray1[(len + 6)] = i;
    intArray1[(len + 8)] = j;

    return vm.globalNull;
}
