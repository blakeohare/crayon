InterpreterResult errorResult(string error) {
    return new InterpreterResult(InterpreterResultStatus.FATAL_ERROR, error, 0.0, 0, false, "");
}

InterpreterResult uncaughtExceptionResult(VmContext vm, Value exception) {
    return new InterpreterResult(InterpreterResultStatus.FATAL_ERROR, unrollExceptionOutput(vm, exception), 0.0, 0, false, "");
}

InterpreterResult suspendInterpreter() {
    return new InterpreterResult(InterpreterResultStatus.SUSPENDED, null, 0.0, 0, false, "");
}

InterpreterResult interpreterFinished(VmContext vm, ExecutionContext ec) {
    if (ec != null) {
        int id = ec.id;
        if (vm.executionContexts.Contains(id)) {
            vm.executionContexts.Remove(id);
        }
    }
    return new InterpreterResult(InterpreterResultStatus.FINISHED, null, 0.0, 0, false, "");
}

bool EX_AssertionFailed(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.ASSERTION_FAILED, exMsg); }
bool EX_DivisionByZero(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.DIVISION_BY_ZERO, exMsg); }
bool EX_Fatal(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.FATAL, exMsg); }
bool EX_IndexOutOfRange(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.INDEX_OUT_OF_RANGE, exMsg); }
bool EX_InvalidArgument(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.INVALID_ARGUMENT, exMsg); }
bool EX_InvalidAssignment(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.INVALID_ASSIGNMENT, exMsg); }
bool EX_InvalidInvocation(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.INVALID_INVOCATION, exMsg); }
bool EX_InvalidKey(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.INVALID_KEY, exMsg); }
bool EX_KeyNotFound(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.KEY_NOT_FOUND, exMsg); }
bool EX_NullReference(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.NULL_REFERENCE, exMsg); }
bool EX_UnassignedVariable(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.UNASSIGNED_VARIABLE, exMsg); }
bool EX_UnknownField(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.UNKNOWN_FIELD, exMsg); }
bool EX_UnsupportedOperation(ExecutionContext ec, string exMsg) { return generateException2(ec, CoreExceptionTypes.UNSUPPORTED_OPERATION, exMsg); }

bool generateException2(ExecutionContext ec, int exceptionType, string exMsg) {
    ec.activeInterrupt = new Interrupt(
        InterruptType.EXCEPTION,
        exceptionType,
        exMsg,
        0.0); // ignored
    return true;
}

// This will push a stack frame onto the stack as though _LIB_CORE_generateExeption(type, message) is being called.
// But then it will return an REINVOKE status. The idea is this will be called with a return from interpretImpl.
InterpreterResult generateException(
        VmContext vm,
        StackFrame stack,
        int pc,
        int valueStackSize,
        ExecutionContext ec,
        int type,
        string message) {

    ec.currentValueStackSize = valueStackSize;
    stack.pc = pc;
    ec.localsStackSetToken = stack.localsStackSetToken + 1;
    MagicNumbers mn = vm.metadata.magicNumbers;
    int generateExceptionFunctionId = mn.coreGenerateExceptionFunctionId;
    FunctionInfo functionInfo = vm.metadata.functionTable[generateExceptionFunctionId];
    pc = functionInfo.pc;
    if (ec.localsStack.Size() <= (functionInfo.localsSize + stack.localsStackOffsetEnd)) {
        increaseLocalsStackCapacity(ec, functionInfo.localsSize);
    }
    int localsIndex = stack.localsStackOffsetEnd;
    ec.localsStack[localsIndex] = buildInteger(vm.globals, type);
    ec.localsStack[localsIndex + 1] = buildString(vm.globals, message);
    ec.localsStackSet[localsIndex] = ec.localsStackSetToken;
    ec.localsStackSet[localsIndex + 1] = ec.localsStackSetToken;
    ec.stackTop = new StackFrame(
        pc + 1, // won't have the end of the interpreter loop to do the +1 for us.
        ec.localsStackSetToken,
        stack.localsStackOffsetEnd,
        stack.localsStackOffsetEnd + functionInfo.localsSize,
        stack,
        false,
        null,
        valueStackSize,
        0,
        stack.depth + 1,
        PostFinallyBehavior.NOTHING,
        null,
        null);

    return new InterpreterResult(InterpreterResultStatus.REINVOKE, null, 0.0, 0, false, "");
}

InterpreterResult interpret(VmContext vm, int executionContextId) {
    InterpreterResult output = interpretImpl(vm, executionContextId);
    while (output.status == InterpreterResultStatus.REINVOKE) {
        output = interpretImpl(vm, executionContextId);
    }
    return output;
}

ExecutionContext interpreterGetExecutionContext(VmContext vm, int executionContextId) {
    Dictionary<int, ExecutionContext> executionContexts = vm.executionContexts;
    if (!executionContexts.Contains(executionContextId)) {
        return null;
    }
    return executionContexts[executionContextId];
}

InterpreterResult interpretImpl(VmContext vm, int executionContextId) {
    VmMetadata metadata = vm.metadata;
    VmGlobals globals = vm.globals;
    Value VALUE_NULL = globals.valueNull;
    Value VALUE_TRUE = globals.boolTrue;
    Value VALUE_FALSE = globals.boolFalse;
    Value VALUE_INT_ONE = globals.intOne;
    Value VALUE_INT_ZERO = globals.intZero;
    Value VALUE_FLOAT_ZERO = globals.floatZero;
    Value VALUE_FLOAT_ONE = globals.floatOne;
    Array<Value> INTEGER_POSITIVE_CACHE = globals.positiveIntegers;
    Array<Value> INTEGER_NEGATIVE_CACHE = globals.negativeIntegers;

    Dictionary<int, ExecutionContext> executionContexts = vm.executionContexts;
    ExecutionContext ec = interpreterGetExecutionContext(vm, executionContextId);
    if (ec == null) {
        // Stale context ID's may possibly be invoked. Pretend that they run and finish.
        return interpreterFinished(vm, null);
    }

    ec.executionCounter += 1;

    StackFrame stack = ec.stackTop;
    Array<int> ops = vm.byteCode.ops;
    Array<Array<int>> args = vm.byteCode.args;
    Array<string> stringArgs = vm.byteCode.stringArgs;
    Array<ClassInfo> classTable = vm.metadata.classTable;
    Array<FunctionInfo> functionTable = vm.metadata.functionTable;
    Array<Value> literalTable = vm.metadata.literalTable;
    Array<string> identifiers = vm.metadata.identifiers;
    Array<Value> valueStack = ec.valueStack;
    int valueStackSize = ec.currentValueStackSize;
    int valueStackCapacity = valueStack.Size();
    bool hasInterrupt = false;

    int type = 0;
    int nameId = 0;
    int classId = 0;
    int functionId = 0;
    int localeId = 0;
    ClassInfo classInfo = null;
    int len = 0;
    Value root = null;
    Array<int> row = null;
    int argCount = 0;
    Array<string> stringList = null;
    bool returnValueUsed = false;
    Value output = null;
    FunctionInfo functionInfo = null;
    int keyType = 0;
    int intKey = 0;
    string stringKey = null;
    Dictionary<int, Value> dictIntKeyLookup = null;
    Dictionary<int, Value> dictIntValueLookup = null;
    Dictionary<string, Value> dictStringKeyLookup = null;
    Dictionary<string, Value> dictStringValueLookup = null;
    bool first = false;
    bool primitiveMethodToCoreLibraryFallback = false;
    bool bool1 = false;
    bool bool2 = false;
    bool staticConstructorNotInvoked = true;
    int int1 = 0;
    int int2 = 0;
    int int3 = 0;
    int i = 0;
    int j = 0;
    double float1 = 0.0;
    double float2 = 0.0;
    double float3 = 0.0;
    Array<double> floatList1 = new Array<double>(2);
    Value value = null;
    Value value2 = null;
    Value value3 = null;
    string string1 = null;
    string string2 = null;
    ObjectInstance objInstance1 = null;
    ObjectInstance objInstance2 = null;
    List<Value> list1 = null;
    List<Value> list2 = null;
    DictImpl dictImpl = null;
    DictImpl dictImpl2 = null;
    List<string> stringList1 = null;
    List<int> intList1 = null;
    Array<Value> valueArray1 = null;
    Array<int> intArray1 = null;
    Array<int> intArray2 = null;
    Array<object> objArray1 = null;
    FunctionPointer functionPointer1 = null;
    Dictionary<int, int> intIntDict1 = null;
    StackFrame stackFrame2 = null;
    Value leftValue = null;
    Value rightValue = null;
    ClassValue classValue = null;
    Value arg1 = null;
    Value arg2 = null;
    Value arg3 = null;
    Array<int> globalNameIdToPrimitiveMethodName = vm.metadata.globalNameIdToPrimitiveMethodName;
    MagicNumbers magicNumbers = vm.metadata.magicNumbers;
    Array<Dictionary<int, int>> integerSwitches = vm.metadata.integerSwitchLookups;
    Array<Dictionary<string, int>> stringSwitches = vm.metadata.stringSwitchLookups;
    Dictionary<int, int> integerSwitch = null;
    Dictionary<string, int> stringSwitch = null;
    Array<Array<int>> esfData = vm.metadata.esfData;
    Dictionary<int, ClosureValuePointer> closure = null;
    Dictionary<int, ClosureValuePointer> parentClosure = null;

    Array<Value> localsStack = ec.localsStack;
    Array<int> localsStackSet = ec.localsStackSet;
    int localsStackSetToken = stack.localsStackSetToken;
    int localsStackCapacity = localsStack.Size();
    int localsStackOffset = stack.localsStackOffset;
    Array<Value> funcArgs = vm.funcArgs;
    int pc = stack.pc;
    Func<Value, VmContext, Array<Value>> nativeFp = null;

    while (true) {
        row = args[pc];
        switch (ops[pc]) {
            case OpCodes.ADD_LITERAL: Core.EmitComment("ADD_LITERAL"); @import("Ops/add_literal.pst"); break;
            case OpCodes.ADD_NAME: Core.EmitComment("ADD_NAME"); @import("Ops/add_name.pst"); break;
            case OpCodes.ASSIGN_CLOSURE: Core.EmitComment("ASSIGN_CLOSURE"); @import("Ops/assign_closure.pst"); break;
            case OpCodes.ASSIGN_INDEX: Core.EmitComment("ASSIGN_INDEX"); @import("Ops/assign_index.pst"); break;
            case OpCodes.ASSIGN_STATIC_FIELD: Core.EmitComment("ASSIGN_STATIC_FIELD"); @import("Ops/assign_static_field.pst"); break;
            case OpCodes.ASSIGN_STEP: Core.EmitComment("ASSIGN_STEP"); @import("Ops/assign_step.pst"); break;
            case OpCodes.ASSIGN_THIS_STEP: Core.EmitComment("ASSIGN_THIS_STEP"); @import("Ops/assign_this_step.pst"); break;
            case OpCodes.ASSIGN_LOCAL: Core.EmitComment("ASSIGN_LOCAL"); @import("Ops/assign_local.pst"); break;
            case OpCodes.BINARY_OP: Core.EmitComment("BINARY_OP"); @import("Ops/binary_op.pst"); break;
            case OpCodes.BOOLEAN_NOT: Core.EmitComment("BOOLEAN_NOT"); @import("Ops/boolean_not.pst"); break;
            case OpCodes.BREAK: Core.EmitComment("BREAK"); @import("Ops/break.pst"); break;
            case OpCodes.BUILD_SWITCH_INT: Core.EmitComment("BUILD_SWITCH_INT"); @import("Ops/build_switch_int.pst"); break;
            case OpCodes.BUILD_SWITCH_STRING: Core.EmitComment("BUILD_SWITCH_STRING"); @import("Ops/build_switch_string.pst"); break;
            case OpCodes.CALL_FUNCTION: Core.EmitComment("CALL_FUNCTION"); @import("Ops/call_function.pst"); break;
            case OpCodes.CLASS_DEFINITION: Core.EmitComment("CLASS_DEFINITION"); @import("Ops/class_definition.pst"); break;
            case OpCodes.CNI_INVOKE: Core.EmitComment("CNI_INVOKE"); @import("Ops/cni_invoke.pst"); break;
            case OpCodes.CNI_REGISTER: Core.EmitComment("CNI_REGISTER"); @import("Ops/cni_register.pst"); break;
            case OpCodes.COMMAND_LINE_ARGS: Core.EmitComment("COMMAND_LINE_ARGS"); @import("Ops/command_line_args.pst"); break;
            case OpCodes.CONTINUE: Core.EmitComment("CONTINUE"); @import("Ops/continue.pst"); break;
            case OpCodes.CORE_FUNCTION: Core.EmitComment("CORE_FUNCTION"); @import("Ops/core_function.pst"); break;
            case OpCodes.DEF_DICTIONARY: Core.EmitComment("DEF_DICT"); @import("Ops/def_dictionary.pst"); break;
            case OpCodes.DEF_LIST: Core.EmitComment("DEF_LIST"); @import("Ops/def_list.pst"); break;
            case OpCodes.DEF_ORIGINAL_CODE: Core.EmitComment("DEF_ORIGINAL_CODE"); @import("Ops/def_original_code.pst"); break;
            case OpCodes.DEREF_CLOSURE: Core.EmitComment("DEREF_CLOSURE"); @import("Ops/deref_closure.pst"); break;
            case OpCodes.DEREF_DOT: Core.EmitComment("DEREF_DOT"); @import("Ops/deref_dot.pst"); break;
            case OpCodes.DEREF_INSTANCE_FIELD: Core.EmitComment("DEREF_INSTANCE_FIELD"); @import("Ops/deref_instance_field.pst"); break;
            case OpCodes.DEREF_STATIC_FIELD: Core.EmitComment("DEREF_STATIC_FIELD"); @import("Ops/deref_static_field.pst"); break;
            case OpCodes.DUPLICATE_STACK_TOP: Core.EmitComment("DUPLICATE_STACK_TOP"); @import("Ops/duplicate_stack_top.pst"); break;
            case OpCodes.EQUALS: Core.EmitComment("EQUALS"); @import("Ops/equals.pst"); break;
            case OpCodes.ESF_LOOKUP: Core.EmitComment("ESF_LOOKUP"); @import("Ops/esf_lookup.pst"); break;
            case OpCodes.EXCEPTION_HANDLED_TOGGLE: Core.EmitComment("EXCEPTION_HANDLED_TOGGLE"); @import("Ops/exception_handled_toggle.pst"); break;
            case OpCodes.FINALIZE_INITIALIZATION: Core.EmitComment("FINALIZE_INITIALIZATION"); @import("Ops/finalize_initialization.pst"); break;
            case OpCodes.FINALLY_END: Core.EmitComment("FINALLY_END"); @import("Ops/finally_end.pst"); break;
            case OpCodes.FUNCTION_DEFINITION: Core.EmitComment("FUNCTION_DEFINITION"); @import("Ops/function_definition.pst"); break;
            case OpCodes.INDEX: Core.EmitComment("INDEX"); @import("Ops/index.pst"); break;
            case OpCodes.IS_COMPARISON: Core.EmitComment("IS_COMPARISON"); @import("Ops/is_comparison.pst"); break;
            case OpCodes.ITERATION_STEP: Core.EmitComment("ITERATION_STEP"); @import("Ops/iteration_step.pst"); break;
            case OpCodes.JUMP: Core.EmitComment("JUMP"); @import("Ops/jump.pst"); break;
            case OpCodes.JUMP_IF_EXCEPTION_OF_TYPE: Core.EmitComment("JUMP_IF_EXCEPTION_OF_TYPE"); @import("Ops/jump_if_exception_of_type.pst"); break;
            case OpCodes.JUMP_IF_FALSE: Core.EmitComment("JUMP_IF_FALSE"); @import("Ops/jump_if_false.pst"); break;
            case OpCodes.JUMP_IF_FALSE_NO_POP: Core.EmitComment("JUMP_IF_FALSE_NON_POP"); @import("Ops/jump_if_false_no_pop.pst"); break;
            case OpCodes.JUMP_IF_TRUE: Core.EmitComment("JUMP_IF_TRUE"); @import("Ops/jump_if_true.pst"); break;
            case OpCodes.JUMP_IF_TRUE_NO_POP: Core.EmitComment("JUMP_IF_TRUE_NO_POP"); @import("Ops/jump_if_true_no_pop.pst"); break;
            case OpCodes.LAMBDA: Core.EmitComment("LAMBDA"); @import("Ops/lambda.pst"); break;
            case OpCodes.LIB_DECLARATION: Core.EmitComment("LIB_DECLARATION"); @import("Ops/lib_declaration.pst"); break;
            case OpCodes.LIST_SLICE: Core.EmitComment("LIST_SLICE"); @import("Ops/list_slice.pst"); break;
            case OpCodes.LITERAL: Core.EmitComment("LITERAL"); @import("Ops/literal.pst"); break;
            case OpCodes.LITERAL_STREAM: Core.EmitComment("LITERAL_STREAM"); @import("Ops/literal_stream.pst"); break;
            case OpCodes.LOCAL: Core.EmitComment("LOCAL"); @import("Ops/local.pst"); break;
            case OpCodes.LOC_TABLE: Core.EmitComment("LOC_TABLE"); @import("Ops/loc_table.pst"); break;
            case OpCodes.NEGATIVE_SIGN: Core.EmitComment("NEGATIVE_SIGN");@import("Ops/negative_sign.pst"); break;
            case OpCodes.POP: Core.EmitComment("POP"); @import("Ops/pop.pst"); break;
            case OpCodes.POP_IF_NULL_OR_JUMP: Core.EmitComment("POP_IF_NULL_OR_JUMP"); @import("Ops/pop_if_null_or_jump.pst"); break;
            case OpCodes.PUSH_FUNC_REF: Core.EmitComment("PUSH_FUNC_REF"); @import("Ops/push_func_ref.pst"); break;
            case OpCodes.RETURN: Core.EmitComment("RETURN"); @import("Ops/return.pst"); break;
            case OpCodes.STACK_INSERTION_FOR_INCREMENT: Core.EmitComment("STACK_INSERTION_FOR_INCREMENT"); @import("Ops/stack_insertion_for_increment.pst"); break;
            case OpCodes.STACK_SWAP_POP: Core.EmitComment("STACK_SWAP_POP"); @import("Ops/stack_swap_pop.pst"); break;
            case OpCodes.SWITCH_INT: Core.EmitComment("SWITCH_INT"); @import("Ops/switch_int.pst"); break;
            case OpCodes.SWITCH_STRING: Core.EmitComment("SWITCH_STRING"); @import("Ops/switch_string.pst"); break;
            case OpCodes.THIS: Core.EmitComment("THIS"); @import("Ops/this.pst"); break;
            case OpCodes.THROW: Core.EmitComment("THROW"); @import("Ops/throw.pst"); break;
            case OpCodes.TOKEN_DATA: Core.EmitComment("TOKEN_DATA"); @import("Ops/token_data.pst"); break;
            case OpCodes.USER_CODE_START: Core.EmitComment("USER_CODE_START"); @import("Ops/user_code_start.pst"); break;
            case OpCodes.VALUE_STACK_DEPTH: Core.EmitComment("VALUE_STACK_DEPTH"); @import("Ops/value_stack_depth.pst"); break;
            case OpCodes.VERIFY_TYPE_IS_ITERABLE: Core.EmitComment("VERIFY_TYPE_IS_ITERABLE"); @import("Ops/verify_type_is_iterable.pst"); break;

            default:
                Core.EmitComment("THIS SHOULD NEVER HAPPEN");
                return generateException(vm, stack, pc, valueStackSize, ec, CoreExceptionTypes.FATAL, Core.StringConcatAll("Bad op code: ", Core.IntToString(ops[pc])));
        }

        if (hasInterrupt) {
            Interrupt interrupt = ec.activeInterrupt;
            ec.activeInterrupt = null;
            if (interrupt.type == InterruptType.EXCEPTION) {
                return generateException(vm, stack, pc, valueStackSize, ec, interrupt.exceptionType, interrupt.exceptionMessage);
            }
            if (interrupt.type == InterruptType.SLEEP) {
                return new InterpreterResult(InterpreterResultStatus.REINVOKE, "", interrupt.sleepDurationSeconds, 0, false, "");
            }
            if (interrupt.type == InterruptType.LOAD_ASSEMBLY) {
                return new InterpreterResult(InterpreterResultStatus.LOAD_ASSEMBLY, "", 0.0, 0, false, interrupt.exceptionMessage);
            }
        }

        if (@ext_boolean("HAS_INCREMENT")) {
            ++pc;
        } else {
            pc += 1;
        }
    }
}

// returns a status code:
// 0 - list is empty
// 1 - list has contents
// 2 - list is a simple clone
// 3 - start index is out of bounds
// 4 - start index occurs after begin index (relative to direction)
int canonicalizeListSliceArgs(
        Array<int> outParams,
        Value beginValue,
        Value endValue,
        int beginIndex,
        int endIndex,
        int stepAmount,
        int length,
        bool isForward) {

    if (beginValue == null) {
        if (isForward) beginIndex = 0;
        else beginIndex = length - 1;
    }
    if (endValue == null) {
        if (isForward) endIndex = length;
        else endIndex = -1 - length;  // if it were -1, it'll get canonicalized into length - 1.
    }

    if (beginIndex < 0) beginIndex += length;
    if (endIndex < 0) endIndex += length;

    if (beginIndex == 0 && endIndex == length && stepAmount == 1) return 2;

    if (isForward) {
        if (beginIndex >= length) return 0;
        if (beginIndex < 0) return 3;
        if (endIndex < beginIndex) return 4;
        if (beginIndex == endIndex) return 0;
        if (endIndex > length) endIndex = length;
    } else {
        if (beginIndex < 0) return 0;
        if (beginIndex >= length) return 3;
        if (endIndex > beginIndex) return 4;
        if (beginIndex == endIndex) return 0;
        if (endIndex < -1) endIndex = -1;
    }
    outParams[0] = beginIndex;
    outParams[1] = endIndex;
    return 1;
}

List<Token> generateTokenListFromPcs(VmContext vm, List<int> pcs) {
    List<Token> output = new List<Token>();
    Array<List<Token>> tokensByPc = vm.tokenData;
    Token token = null;
    int i = 0;
    while (i < pcs.Size()) {
        List<Token> localTokens = tokensByPc[pcs[i]];
        if (localTokens == null) {
            if (output.Size() > 0) { // Don't push null token data if there is no data. This is the root scope that invokes main.
                output.Add(null);
            }
        } else {
            token = localTokens[0];
            if (@ext_boolean("IS_RELEASE")) {
                if ((output.Size() > 0) || (token != null && !tokenHelplerIsFilePathLibrary(vm, token.fileId, vm.sourceCode))) {
                    output.Add(token);
                }
            } else {
                output.Add(token);
            }
        }
        i += 1;
    }

    if (@ext_boolean("IS_RELEASE")) {
        // On release builds, pop the top of the stack such that the exception appears to originate from user code.
        int length = output.Size();
        while (length > 0) {
            token = output[(length - 1)]; // top token
            if ((token != null) && tokenHelplerIsFilePathLibrary(vm, token.fileId, vm.sourceCode)) {
                output.Pop();
                length -= 1;
            } else {
                length = -1; // cheesy break
            }
        }
    }

    return output;
}

// detect if a stack trace item is a library
// not a library --> my/src/foo.cry, Line: 2, Col 3
// not a library --> my/src[1]/foo.cry, Line: 4, Col 5
// library --> [Lib:foo.cry] Line: 6, Col 7
bool stackItemIsLibrary(string stackInfo) {
    if (stackInfo[0] != '[') return false;
    int cIndex = stackInfo.IndexOf(":");
    return cIndex > 0 && cIndex < stackInfo.IndexOf("]");
}

List<string> tokenHelperConvertPcsToStackTraceStrings(VmContext vm, List<int> pcs) {
    List<Token> tokens = generateTokenListFromPcs(vm, pcs);
    Array<string> files = vm.sourceCode;
    List<string> output = new List<string>();
    for (int i = 0; i < tokens.Size(); i += 1) {
        Token token = tokens[i];
        if (token == null) {
            output.Add("[No stack information]");
        } else {
            int line = token.lineIndex;
            int col = token.colIndex;
            string fileData = files[token.fileId];
            Array<string> lines = fileData.Split("\n");
            string filename = lines[0];
            string linevalue = lines[line + 1];
            output.Add(Core.StringConcatAll(filename, ", Line: ", Core.IntToString(line + 1), ", Col: ", Core.IntToString(col + 1)));
        }
    }
    return output;
}

string tokenHelperGetFormattedPointerToToken(VmContext vm, Token token) {
    string line = tokenHelperGetFileLine(vm, token.fileId, token.lineIndex + 1);
    if (line == null) {
        return null;
    }
    int columnIndex = token.colIndex;
    int lineLength = line.Size();
    line = line.TrimStart();
    line = line.Replace("\t", " ");
    int offset = lineLength - line.Size();
    columnIndex -= offset;
    string line2 = "";
    while (columnIndex > 0) {
        columnIndex -= 1;
        line2 = Core.StringConcatAll(line2, " ");
    }
    line2 = Core.StringConcatAll(line2, "^");
    return Core.StringConcatAll(line, "\n", line2);
}

string tokenHelperGetFileLine(VmContext vm, int fileId, int lineNum) {
    string sourceCode = vm.sourceCode[fileId];
    if (sourceCode == null) {
        return null;
    }
    return sourceCode.Split("\n")[lineNum];
}

bool tokenHelplerIsFilePathLibrary(VmContext vm, int fileId, Array<string> allFiles) {
    string filename = tokenHelperGetFileLine(vm, fileId, 0); // line 0 is the file name
    return !filename.ToLower().EndsWith(".cry");
}

// This saves the state of the interpreter so that it's ready to have
// interpret() called again. Even though this is only called once directly
// in the translated crayon interpreter code, certain platforms will need
// to call this manually.
int prepareToSuspend(ExecutionContext ec, StackFrame stack, int valueStackSize, int currentPc) {
    ec.stackTop = stack;
    ec.currentValueStackSize = valueStackSize;
    stack.pc = currentPc + 1;
    return 0;
}

Array<Value> valueStackIncreaseCapacity(ExecutionContext ec) {
    Array<Value> stack = ec.valueStack;
    int oldCapacity = stack.Size();
    int newCapacity = oldCapacity * 2;
    Array<Value> newStack = new Array<Value>(newCapacity);
    for (int i = oldCapacity - 1; i >= 0; i -= 1) {
        newStack[i] = stack[i];
    }
    ec.valueStack = newStack;
    return newStack;
}

string unrollExceptionOutput(VmContext vm, Value exceptionInstance) {
    ObjectInstance objInstance = ((ObjectInstance) exceptionInstance.internalValue);
    ClassInfo classInfo = vm.metadata.classTable[objInstance.classId];
    List<int> pcs = ((List<int>) objInstance.nativeData[1]);
    string codeFormattedPointer = "";

    string exceptionName = classInfo.fullyQualifiedName;
    string message = valueToString(vm, objInstance.members[1]);
    List<string> trace = tokenHelperConvertPcsToStackTraceStrings(vm, pcs);
    trace.Pop();
    trace.Add("Stack Trace:");
    trace.Reverse();
    pcs.Reverse();

    bool showLibStack = vm.environment.showLibStack;

    if (!showLibStack && !stackItemIsLibrary(trace[0])) {
        while (stackItemIsLibrary(trace[trace.Size() - 1])) {
            trace.Pop();
            pcs.Pop();
        }
    }

    List<Token> tokensAtPc = vm.tokenData[pcs[pcs.Size() - 1]];
    if (tokensAtPc != null) {
        codeFormattedPointer = Core.StringConcatAll("\n\n", tokenHelperGetFormattedPointerToToken(vm, tokensAtPc[0]));
    }

    string stackTrace = trace.Join("\n");
    return Core.StringConcatAll(stackTrace, codeFormattedPointer, "\n", exceptionName, ": ", message);
}

bool isPcFromCore(VmContext vm, int pc) {
    List<Token> tokens = vm.tokenData[pc];
    if (tokens == null) {
        return false;
    }
    Token token = tokens[0];
    string filename = tokenHelperGetFileLine(vm, token.fileId, 0);
    return Core.StringEquals("[Core]", filename);
}

int vm_getCurrentExecutionContextId(VmContext vm) {
    return vm.lastExecutionContextId;
}

ExecutionContext getExecutionContext(VmContext vm, int id) {
    if (id == -1) {
        id = vm.lastExecutionContextId;
    }
    if (vm.executionContexts.Contains(id)) {
        return vm.executionContexts[id];
    }
    return null;
}

int vm_suspend_with_status(VmContext vm, int status) {
    return vm_suspend_for_context(getExecutionContext(vm, -1), status);
}

// status is an enum value in InterpreterStatus.
int vm_suspend(VmContext vm, int status) {
    return vm_suspend_for_context(getExecutionContext(vm, -1), 1);
}

int vm_suspend_for_context(ExecutionContext ec, int status) {
    ec.executionStateChange = true;
    ec.executionStateChangeCommand = status;
    return 0;
}
