import Math;
import Nori;

namespace Gamepad {

    const TOLERANCE_EPSILON = 0.02;

    enum DeviceStyle {
        XBOX,
        PLAYSTATION,
        UNKNOWN,
    }

    class Device {
        field _name;
        field _fingerprint;
        field _buttonCount;
        field _axisCount;
        field _state;
        field _deadZoneFixer = false; // when enabled, all axis magnitudes are passed through the equation value = max(0.0, value * 1.25 - .25)
        field _circularAxes = {};
        field _style = DeviceStyle.UNKNOWN;
        field _stateGettersById = {};

        @private constructor(dict) { // dict is the raw dict used to track changes in U3Direct.
            this._name = dict['name'];
            this._axisCount = dict['axes'].length;
            this._buttonCount = dict['buttons'].length;
            this._fingerprint = [this._name, this._axisCount, this._buttonCount].join(',');
            this._state = dict;
            for (i = 0; i < this._axisCount; ++i) {
                this._initStateGetter(i, true);
            }
            for (i = 0; i < this._buttonCount; ++i) {
                this._initStateGetter(i, false);
            }
            this.autoConfigureXBox();
        }

        function getName() { return this._name; }

        function enableDeadZoneFixer() {
            this._deadZoneFixer = true;
            return this;
        }

        function disableDeadZoneFixer() {
            this._deadZoneFixer = false;
            return this;
        }

        function enableCircularAxis(alias) {
            this._circularAxes[alias] = true;
            return this;
        }

        function _initStateGetter(index, isAxis) {
            axes = this._state['axes'];
            buttons = this._state['buttons'];
            if (isAxis) {
                this._stateGettersById['A' + index + '+'] = () => {
                    a = axes[index];
                    a = a > 0 ? a : 0.0;
                    if (this._deadZoneFixer) a = Math.max(0.0, a * 1.25 - .25);
                    if (a < TOLERANCE_EPSILON) a = 0.0;
                    else if (a > 1.0 - TOLERANCE_EPSILON) a = 1.0;
                    return a;
                };
                this._stateGettersById['A' + index + '-'] = () => {
                    a = axes[index];
                    a = a < 0 ? -a : 0.0;
                    if (this._deadZoneFixer) a = Math.max(0.0, a * 1.25 - .25);
                    if (a < TOLERANCE_EPSILON) a = 0.0;
                    else if (a > 1.0 - TOLERANCE_EPSILON) a = 1.0;
                    return a;
                };
            } else {
                this._stateGettersById['B' + index] = () => buttons[index] ? 1.0 : 0.0;
            }
        }

        static function _create(dict) { return new Device(dict); }
        static field _gamepads = [];
        static field _newDeviceCallback = null;

        function autoConfigureXBox() {
            return this.autoConfigure(
                'axis1', 'axis2',
                'axis1-btn', 'axis2-btn',
                'dpad',
                'x', 'y', 'b', 'a',
                'left-bumper', 'right-bumper',
                'left-trigger', 'right-trigger',
                'start', 'back');
        }

        function autoConfigure(
                axis1, axis2,
                axis1Btn, axis2Btn,
                dpad,
                bW, bN, bE, bS,
                bumperL, bumperR,
                trigL, trigR,
                start, back) {
            return this
                .setAxisAliasForRawIds(axis1, 'A0-', 'A1-', 'A0+', 'A1+')
                .setAxisAliasForRawIds(axis2, 'A2-', 'A3-', 'A2+', 'A3+')
                .setButtonAliasForRawId(axis1Btn, 'B10')
                .setButtonAliasForRawId(axis2Btn, 'B11')
                .setAxisAliasForRawIds(dpad, 'B14', 'B12', 'B15', 'B13')
                .setButtonAliasForRawId(bW, 'B2')
                .setButtonAliasForRawId(bN, 'B3')
                .setButtonAliasForRawId(bE, 'B1')
                .setButtonAliasForRawId(bS, 'B0')
                .setButtonAliasForRawId(bumperL, 'B4')
                .setButtonAliasForRawId(bumperR, 'B5')
                .setButtonAliasForRawId(trigL, 'B6')
                .setButtonAliasForRawId(trigR, 'B7')
                .setButtonAliasForRawId(back, 'B8')
                .setButtonAliasForRawId(start, 'B9');
        }

        function getCurrentPressedRawId() {
            buttons = this._state['buttons'];
            for (i = 0; i < buttons.length; ++i) {
                if (buttons[i]) {
                    return 'B' + i;
                }
            }

            axes = this._state['axes'];
            for (i = 0; i < axes.length; ++i) {
                if (Math.abs(axes[i]) > .3) {
                    return 'A' + i + (axes[i] > 0 ? '+' : '-');
                }
            }

            return null;
        }

        /*
            Raw ID's are either:
            - "B" + button index for buttons
            - "A" + axis index + direction (where direction is "+" or "-")
        */
        field _aliasToRawId = {};
        field _rawIdToAlias = {};
        field _onChangeCallbacks = {};

        function setButtonAliasForRawId(buttonName, rawId) {
            if (buttonName == null) return this;
            this._rawIdToAlias[rawId] = buttonName;
            this._aliasToRawId[buttonName] = ['B', rawId];
            return this;
        }

        function setThrottleAliasForRawIds(throttleName, rawIdNeg, rawIdPos) {
            if (throttleName == null) return this;
            this._rawIdToAlias[rawIdPos] = throttleName;
            this._rawIdToAlias[rawIdNeg] = throttleName;
            this._aliasToRawId[throttleName] = ['T', rawIdNeg, rawIdPos];
            return this;
        }

        function setAxisAliasForRawIds(axisName, rawIdLeft, rawIdUp, rawIdRight, rawIdDown) {
            if (axisName == null) return this;
            this._rawIdToAlias[rawIdLeft] = axisName;
            this._rawIdToAlias[rawIdUp] = axisName;
            this._rawIdToAlias[rawIdRight] = axisName;
            this._rawIdToAlias[rawIdDown] = axisName;
            this._aliasToRawId[axisName] = ['A', rawIdLeft, rawIdUp, rawIdRight, rawIdDown];
            return this;
        }

        function _tickleDeviceState() {
            evs = this._state['dirty'];
            if (evs.length > 0) {
                touchedAliases = {};
                for (rawId : evs) {
                    alias = this._rawIdToAlias.get(rawId);
                    if (alias != null && this._onChangeCallbacks.get(alias) != null) {
                        touchedAliases[alias] = true;
                    }
                }
                evs.clear();
                for (alias : touchedAliases.keys()) {
                    cbs = this._onChangeCallbacks[alias];
                    instr = this._rawIdToAlias.get(alias);
                    if (instr != null) {
                        for (cb : cbs) {
                            switch (instr[0]) {
                                case 'A': cb(this.getAxisState(alias)); break;
                                case 'T': cb(this.getThrottleState(alias)); break;
                                case 'B': cb(this.getButtonState(alias)); break;
                                default: throw new Exception();
                            }
                        }
                    }
                }
            }
        }

        function getButtonState(alias) {
            instr = this._aliasToRawId.get(alias);
            if (instr == null || instr[0] != 'B') return false;
            g = this._stateGettersById.get(instr[1]);
            if (g != null) { return g() > 0.5; }
            return false;
        }

        function getAxisState(alias) {
            instr = this._aliasToRawId.get(alias);
            if (instr == null || instr[0] != 'A') return [0, 0];
            xn = this._stateGettersById.get(instr[1]);
            yn = this._stateGettersById.get(instr[2]);
            xp = this._stateGettersById.get(instr[3]);
            yp = this._stateGettersById.get(instr[4]);

            xn = xn == null ? 0.0 : xn();
            yn = yn == null ? 0.0 : yn();
            xp = xp == null ? 0.0 : xp();
            yp = yp == null ? 0.0 : yp();

            x = xp - xn;
            y = yp - yn;

            if (this._circularAxes.get(alias) == true) {
                throw new NotImplementedException();
            }

            return [x, y];
        }

        function getThrottleState(alias) {
            instr = this._aliasToRawId.get(alias);
            if (instr == null || instr[0] != 'T') return [0, 0];
            n = this._stateGettersById.get(instr[1]);
            p = this._stateGettersById.get(instr[2]);

            n = n == null ? 0.0 : n();
            p = p == null ? 0.0 : p();
            return p - n;
        }

        function getRawAxisCount() { return this._axisCount; }
        function getRawAxis(index) {
            if (index < 0 || index >= this._axisCount) throw new InvalidArgumentException("Axis index out of range.");
            return this._state['axes'][index];
        }

        function getRawButtonCount() { return this._buttonCount; }
        function getRawButton(index) {
            if (index < 0 || index >= this._buttonCount) throw new InvalidArgumentException("Button index out of range.");
            return this._state['buttons'][index];
        }

        function onChange(id, cb) {
            list = this._onChangeCallbacks.get(id);
            if (list == null) {
                list = [];
                this._onChangeCallbacks[id] = list;
            }
            list.add(cb);
            return this;
        }

        function onButtonDown(id, cb) {
            return this.onChange(id, value => {
                if (value == true) cb();
            });
        }

        function onButtonUp(id, cb) {
            return this.onChange(id, value => {
                if (value == false) cb();
            });
        }
    }

    function getGamepads() {
        return Device._gamepads.clone();
    }

    function initializeGamepads(frame, newDeviceCallback = null) {
        if (!(frame is Nori.Frame)) throw new InvalidArgumentException("Argument must be a Nori.Frame instance.");
        Device._newDeviceCallback = newDeviceCallback;

        u3win = frame._u3window;
        u3win._deviceTouchedCallback = () => { _tickleDeviceState(u3win); };
        u3win._newDeviceCallback = () => { _tickleDeviceManifest(u3win); };

        u3win.sendData(['GP', -1]);
    }

    function _tickleDeviceManifest(u3win) {
        newDevices = [];
        for (i = 0; i < u3win._gamepads.length; ++i) {
            while (i >= Device._gamepads.length) Device._gamepads.add(null);
            device = Device._create(u3win._gamepads[i]);
            Device._gamepads[i] = device;
            newDevices.add(device);
        }
        cb = Device._newDeviceCallback;
        if (cb != null) {
            for (device : newDevices) {
                cb(device);
            }
        }
    }

    function _tickleDeviceState(u3win) {
        for (device : Device._gamepads) {
            device._tickleDeviceState();
        }
    }
}
