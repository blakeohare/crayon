package %%%JAVA_PACKAGE%%%.app;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.webkit.ConsoleMessage;
import android.webkit.JavascriptInterface;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import java.util.ArrayList;
import java.util.HashMap;

public class CrayonWebView extends WebView {

    private int executionContextId;
    private boolean readyToReceiveMessages = false;
    private boolean useNaturalMouseEvents = false;

    public CrayonWebView(Context context, int width, int height) {
        super(context);

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
            this.getSettings().setAllowUniversalAccessFromFileURLs(true);
            this.getSettings().setAllowFileAccessFromFileURLs(true);
        }

        this.setSystemUiVisibility(
            SYSTEM_UI_FLAG_FULLSCREEN |
            SYSTEM_UI_FLAG_HIDE_NAVIGATION |
            SYSTEM_UI_FLAG_IMMERSIVE_STICKY);

        this.getSettings().setJavaScriptEnabled(true);
        this.getSettings().setDomStorageEnabled(true);
        this.setPivotX(0);
        this.setPivotY(0);
        this.setScaleX(2);
        this.setScaleY(2);
        this.setBackgroundColor(getResources().getColor(android.R.color.black));
        this.setWebViewClient(new CrayonWebViewClient());
        this.setWebChromeClient(new WebChromeClient() {
            @Override
            public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
                String filename = consoleMessage.sourceId();
                Log.d("JS", "<" + filename + ":" + consoleMessage.lineNumber() + "> " + consoleMessage.message());
                return super.onConsoleMessage(consoleMessage);
            }
        });
        this.setClickable(true);
        this.addJavascriptInterface(new JavaScriptBridge(this), "JavaScriptBridge");
        this.loadUrl("file:///android_asset/index.html");
        final CrayonWebView outerThis = this;
        this.addOnLayoutChangeListener(new OnLayoutChangeListener() {
            @Override
            public void onLayoutChange(View view, int left, int top, int right, int bottom, int i4, int i5, int i6, int i7) {
                outerThis.sendMessage(
                    "screen-ratio",
                    "" + (10000 * (bottom - top) / (right - left)),
                    false);
            }
        });
    }

    @Override
    public boolean onTouchEvent(MotionEvent e) {
        int action = e.getAction();
        switch (action) {
            case MotionEvent.ACTION_MOVE:
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP:
            case MotionEvent.ACTION_POINTER_DOWN:
                boolean isUp = action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP;
                int pointerCount = e.getPointerCount();
                StringBuilder msg = new StringBuilder();
                for (int i = 0; i < pointerCount; ++i) {
                    if (isUp && i == e.getActionIndex()) continue;
                    float rawX = e.getX(i) - this.getLeft();
                    float rawY = e.getY(i) - this.getTop();
                    int x = (int) (2 * 100000 * rawX / this.getWidth());
                    int y = (int) (2 * 100000 * rawY / this.getHeight());
                    msg.append(' ');
                    msg.append(x);
                    msg.append(' ');
                    msg.append(y);
                }
                this.sendMessage("touch-points-status", pointerCount + msg.toString(), false);
                break;
            default:
                break;
        }
        this.handleMouseEvent(e);
        return true;
    }

    private void handleMouseEvent(MotionEvent e) {
        int mouseEventTypeId = 0;
        switch (e.getAction()) {
            case MotionEvent.ACTION_MOVE:
                mouseEventTypeId = 32;
                break;
            case MotionEvent.ACTION_DOWN:
                mouseEventTypeId = 33;
                break;
            case MotionEvent.ACTION_UP:
                mouseEventTypeId = 34;
                break;
            default:
                return;
        }
        // don't know what the game size is on Java side so give coordinates in ratios * 100000 (as ints).
        float rawX = e.getX() - this.getLeft();
        float rawY = e.getY() - this.getTop();
        int x = (int) (2 * 100000 * rawX / this.getWidth());
        int y = (int) (2 * 100000 * rawY / this.getHeight());
        this.sendMessage("touch-event", mouseEventTypeId + " " + x + " " + y, false);
    }

    private MotionEvent.PointerCoords pc = new MotionEvent.PointerCoords();
    private int[] coordsOut = new int[2];
    private void getTouchCoords(MotionEvent e, int pointerIndex) {
        e.getPointerCoords(pointerIndex, pc);
        float rawX = pc.x - this.getLeft();
        float rawY = pc.y - this.getTop();
        int x = (int) (2 * 100000 * rawX / this.getWidth());
        int y = (int) (2 * 100000 * rawY / this.getHeight());
        coordsOut[0] = x;
        coordsOut[1] = y;
    }

    /*
        Crayon Pointer ID's are unique to the lifetime of the app.
        Android Pointer ID's are unique to the lifetime of the gesture.

        When a pointer down event is received, add a lookup to this mapping from the Android ID
        to the crayon ID (nextId). When the pointer up event is received, remove it. Every time
        you send an event, convert it. Every time you create a new event, increment nextId.
     */
    private HashMap<Integer, Integer> pointerIdConversion = new HashMap<>();
    private int nextId = 1;
    private int convertPointerId(int androidPointerId) {
        Integer crayonId = pointerIdConversion.get(androidPointerId);
        if (crayonId == null) {
            crayonId = nextId++;
            pointerIdConversion.put(androidPointerId, crayonId);
        }
        return crayonId;
    }

    private void handleMultiTouchEvent(MotionEvent e) {
        int rawActionValue = e.getAction();

        int actionType = (rawActionValue & MotionEvent.ACTION_MASK);
        int pointerIndex = (rawActionValue & MotionEvent.ACTION_POINTER_INDEX_MASK)
                >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
        int pointerId = e.getPointerId(pointerIndex);
        getTouchCoords(e, pointerIndex);
        int touchEventTypeId;
        int crayonId = convertPointerId(pointerId);
        switch (actionType) {
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP:
                touchEventTypeId = 65;
                pointerIdConversion.remove(pointerId);
                break;
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_POINTER_DOWN:
                touchEventTypeId = 64;
                break;
            case MotionEvent.ACTION_MOVE:
                touchEventTypeId = 66;
                for (int i = 0; i < e.getPointerCount(); ++i) {
                    getTouchCoords(e, i);
                    crayonId = convertPointerId(e.getPointerId(i));
                    this.sendMessage("touch-event", touchEventTypeId + " " + coordsOut[0] + " " + coordsOut[1] + " " + crayonId, false);
                }
                return;
            default:
                return;
        }

        this.sendMessage("touch-event", touchEventTypeId + " " + coordsOut[0] + " " + coordsOut[1] + " " + crayonId, false);
    }

    private String urlEncode(String value) {
        int length = value.length();
        if (length == 0) return "";
        StringBuilder sb = new StringBuilder();
        sb.append((int)value.charAt(0));
        for (int i = 1; i < length; ++i) {
            sb.append(' ');
            sb.append((int)value.charAt(i));
        }
        return sb.toString();
    }

    private ArrayList<String> messageQueue = new ArrayList<>();
    private void sendMessage(String type, String msg, boolean useUrlEncode) {
        if (this.readyToReceiveMessages) {
            if (useUrlEncode) {
                type = urlEncode(type);
                msg = urlEncode(msg);
            }
            final String js = "javascript:receiveMessage('" + type + "', '" + msg + "', " + (useUrlEncode ? "true" : "false") + ")";
            final WebView wv = this;
            this.post(new Runnable() {
                @Override
                public void run() {
                    wv.loadUrl(js);
                }
            });
        } else {
            messageQueue.add(type);
            messageQueue.add(msg);
        }
    }

    void receiveMessage(String type, String msg) {
        switch (type) {

            case "ready":
                this.readyToReceiveMessages = true;
                for (int i = 0; i < messageQueue.size(); i += 2) {
                    this.sendMessage(messageQueue.get(i), messageQueue.get(i + 1), false);
                }
                messageQueue.clear();
                break;

            case "view-type":
                switch (msg) {
                    case "natural-web-view":
                        useNaturalMouseEvents = true;
                        break;
                    default:
                        throw new RuntimeException();
                }
                break;

            default:
                throw new RuntimeException("Unknown message: " + type);
        }
    }

    public class JavaScriptBridge {

        private CrayonWebView webView;

        public JavaScriptBridge(CrayonWebView webView) {
            this.webView = webView;
        }

        @JavascriptInterface
        public void onSendNativeMessage(String type, String rawValue) {
            this.webView.receiveMessage(type, rawValue);
        }
    }

    private class CrayonWebViewClient extends WebViewClient {

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {

            if(Uri.parse(url).getHost().length() == 0) {
                return false;
            }

            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
            view.getContext().startActivity(intent);
            return true;
        }
    }
}
