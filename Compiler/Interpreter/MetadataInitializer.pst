int initializeFunction(VmContext vm, Array<int> args, int currentPc, string stringArg) {
    int functionId = args[0];
    int nameId = args[1];
    int minArgCount = args[2];
    int maxArgCount = args[3];
    int functionType = args[4];
    int classId = args[5];
    int localsCount = args[6];
    int numPcOffsetsForOptionalArgs = args[8];
    Array<int> pcOffsetsForOptionalArgs = new Array<int>(numPcOffsetsForOptionalArgs + 1);
    for (int i = 0; i < numPcOffsetsForOptionalArgs; i += 1) {
        pcOffsetsForOptionalArgs[i + 1] = args[9 + i];
    }

    Array<FunctionInfo> functionTable = getFunctionTable(vm, functionId);
    functionTable[functionId] = new FunctionInfo(
        functionId,
        nameId,
        currentPc,
        minArgCount,
        maxArgCount,
        functionType,
        classId,
        localsCount,
        pcOffsetsForOptionalArgs,
        stringArg, // function name
        null);

    vm.metadata.mostRecentFunctionDef = functionTable[functionId];

    if (@ext_boolean("HAS_DEBUGGER")) {
        vm.symbolData.localVarNamesById[currentPc] = new List<string>();
    }

    // This is SUPER tacky.
    // TODO: Do this name comparison at compile time and then stick that in the arguments which will also eliminate the
    // need for the obfuscation prefix since the namespace can be checked.
    if (nameId >= 0) {
        string name = vm.metadata.identifiers[nameId];
        if (Core.StringEquals("_LIB_CORE_list_filter", name)) {
            vm.metadata.primitiveMethodFunctionIdFallbackLookup[0] = functionId;
        } else if (Core.StringEquals("_LIB_CORE_list_map", name)) {
            vm.metadata.primitiveMethodFunctionIdFallbackLookup[1] = functionId;
        } else if (Core.StringEquals("_LIB_CORE_list_sort_by_key", name)) {
            vm.metadata.primitiveMethodFunctionIdFallbackLookup[2] = functionId;
        } else if (Core.StringEquals("_LIB_CORE_invoke", name)) {
            vm.metadata.primitiveMethodFunctionIdFallbackLookup[3] = functionId;
        } else if (Core.StringEquals("_LIB_CORE_generateException", name)) {
            MagicNumbers mn = vm.metadata.magicNumbers;
            mn.coreGenerateExceptionFunctionId = functionId;
        }
    }

    return 0;
}

Dictionary<string, int> initializeStringSwitchStatement(VmContext vm, int pc, Array<int> args) {
    Dictionary<string, int> output = new Dictionary<string, int>();
    for (int i = 1; i < args.Length(); i += 2) {
        string s = (string)vm.metadata.literalTable[args[i]].internalValue;
        output[s] = args[i + 1];
    }
    vm.byteCode.stringSwitchesByPc[pc] = output;
    return output;
}

Dictionary<int, int> initializeIntSwitchStatement(VmContext vm, int pc, Array<int> args) {
    Dictionary<int, int> output = new Dictionary<int, int>();
    for (int i = 1; i < args.Length(); i += 2) {
        output[args[i]] = args[i + 1];
    }
    vm.byteCode.integerSwitchesByPc[pc] = output;
    return output;
}

Array<FunctionInfo> getFunctionTable(VmContext vm, int functionId) {
    Array<FunctionInfo> oldTable = vm.metadata.functionTable;
    int oldLength = oldTable.Size();

    if (functionId < oldLength) {
        return oldTable;
    }

    int newLength = oldLength * 2;
    if (functionId >= newLength) {
        newLength = functionId + 100;
    }

    Array<FunctionInfo> newTable = new Array<FunctionInfo>(newLength);
    for (int i = 0; i < oldLength; i += 1) {
        newTable[i] = oldTable[i];
    }

    vm.metadata.functionTable = newTable;
    return newTable;
}

/*
    Note that static methods do not appear anywhere in the class metadata as they all get (mostly) converted
    into normal function calls (annotated with the class ID to trigger static initializers).

    args[0] -> class ID
    args[1] -> base class ID or -1 if no parent
    args[2] -> global name ID for class (potentially not unique)
    args[3] -> constructor function ID
    args[4] -> static constructor function ID or -1
    args[5] -> number of static fields
    args[6] -> assembly ID
    args[7 + 6n ... (6n + 5)] -> fields and methods that are declared in this class.
        n + 0 -> 0 if field, 1 if method
        n + 1 -> member ID (numbering starts after base class member ID's
        n + 2 -> global name ID
        for fields:
            n + 3 -> initialization instruction
                0: use a literal
                1: use an empty list
                2: use an empty dictionary
            n + 4 -> literal ID or ignored
        for methods:
            n + 3 -> function ID
            n + 4 -> not used
        n + 5 -> access modifier
            1 -> public
            2 -> private
            3 -> internal
            4 -> protected
            5 -> internal + protected
*/
int initializeClass(int pc, VmContext vm, Array<int> args, string className) {
    int i = 0;
    int memberId = 0;
    int globalId = 0;
    int functionId = 0;
    int t = 0;

    int classId = args[0];
    int baseClassId = args[1];
    int globalNameId = args[2];
    int constructorFunctionId = args[3];
    int staticConstructorFunctionId = args[4];
    int staticInitializationState = 0;
    if (staticConstructorFunctionId == -1) {
        staticInitializationState = 2;
    }
    int staticFieldCount = args[5];
    int assemblyId = args[6];

    Array<Value> staticFields = new Array<Value>(staticFieldCount);
    for (i = 0; i < staticFieldCount; i += 1) {
        staticFields[i] = vm.globals.valueNull;
    }

    ClassInfo classInfo = new ClassInfo(
        classId,
        globalNameId,
        baseClassId,
        assemblyId,
        staticInitializationState,
        staticFields,
        staticConstructorFunctionId,
        constructorFunctionId,
        0, // member count
        null, // Array of member ID -> function IDs (with -1 fallback)
        null, // Field initialization command by member ID
        null, // Literal starting value by member ID
        null, // member ID -> access modifier. 1 - PUBLIC, 2 - PRIVATE, 3 - INTERNAL, 4 - PROTECTED, 5 - INTERNAL_PROTECTED
        null, // Global name ID -> member ID
        vm.metadata.classMemberLocalizerBuilder[classId], // Locale-scoped name ID -> member ID
        null, // field type information
        className); // fully qualified class name

    Array<ClassInfo> classTable = getClassTable(vm, classId);

    classTable[classId] = classInfo;

    List<ClassInfo> classChain = new List<ClassInfo>();
    classChain.Add(classInfo);
    int classIdWalker = baseClassId;
    while (classIdWalker != -1) {
        ClassInfo walkerClass = classTable[classIdWalker];
        classChain.Add(walkerClass);
        classIdWalker = walkerClass.baseClassId;
    }

    ClassInfo baseClass = null;
    if (baseClassId != -1) {
        baseClass = classChain[1];
    }

    // populate all the members. basically just copy the member lookups for the base class and then
    // overlay the current classes value on top of it.
    // Note that the current class may re-define some methods with the same member ID as a parent class.

    // initialize members
    List<int> functionIds = new List<int>();
    List<int> fieldInitializationCommand = new List<int>();
    List<Value> fieldInitializationLiteral = new List<Value>();
    List<int> fieldAccessModifier = new List<int>();
    Dictionary<int, int> globalNameIdToMemberId = new Dictionary<int, int>();

    if (baseClass != null) {
        for (i = 0; i < baseClass.memberCount; i += 1) {
            functionIds.Add(baseClass.functionIds[i]);
            fieldInitializationCommand.Add(baseClass.fieldInitializationCommand[i]);
            fieldInitializationLiteral.Add(baseClass.fieldInitializationLiteral[i]);
            fieldAccessModifier.Add(baseClass.fieldAccessModifiers[i]);
        }

        Array<int> keys = baseClass.globalIdToMemberId.Keys();
        for (i = 0; i < keys.Size(); i += 1) {
            t = keys[i];
            globalNameIdToMemberId[t] = baseClass.globalIdToMemberId[t];
        }

        keys = baseClass.localeScopedNameIdToMemberId.Keys();
        for (i = 0; i < keys.Size(); i += 1) {
            t = keys[i];
            // TODO: throw compile time error if you attempt to change the localization of an overridden member.
            classInfo.localeScopedNameIdToMemberId[t] = baseClass.localeScopedNameIdToMemberId[t];
        }
    }

    int accessModifier = 0;
    // and now add the overrides and appends
    for (i = 7; i < args.Size(); i += 6) {
        memberId = args[i + 1];
        globalId = args[i + 2];
        accessModifier = args[i + 5];
        while (memberId >= functionIds.Size()) {
            functionIds.Add(-1);
            fieldInitializationCommand.Add(-1);
            fieldInitializationLiteral.Add(null);
            fieldAccessModifier.Add(0);
        }
        globalNameIdToMemberId[globalId] = memberId; // potentially override previous entries
        fieldAccessModifier[memberId] = accessModifier;
        if (args[i] == 0) { // field
            fieldInitializationCommand[memberId] = args[i + 3];
            t = args[i + 4]; // literal ID or -1 for NULL
            if (t == -1) {
                fieldInitializationLiteral[memberId] = vm.globals.valueNull;
            } else {
                fieldInitializationLiteral[memberId] = vm.metadata.literalTable[t];
            }
        } else { // method
            functionId = args[i + 3];
            functionIds[memberId] = functionId;
        }
    }

    classInfo.functionIds = Core.ListToArray(functionIds);
    classInfo.fieldInitializationCommand = Core.ListToArray(fieldInitializationCommand);
    classInfo.fieldInitializationLiteral = Core.ListToArray(fieldInitializationLiteral);
    classInfo.fieldAccessModifiers = Core.ListToArray(fieldAccessModifier);
    classInfo.memberCount = functionIds.Size();
    classInfo.globalIdToMemberId = globalNameIdToMemberId;

    // initialize type info for fields.
    // copy the parent class information. information for this class is included in
    // the ops that immediately follow this CLASS_DEFINITION
    classInfo.typeInfo = new Array<Array<int>>(classInfo.memberCount);
    if (baseClass != null) {
        for (i = 0; i < baseClass.typeInfo.Length(); i += 1) {
            classInfo.typeInfo[i] = baseClass.typeInfo[i];
        }
    }

    if (Core.StringEquals("Core.Exception", className)) {
        MagicNumbers mn = vm.metadata.magicNumbers;
        mn.coreExceptionClassId = classId;
    }

    return 0;
}

int initializeClassFieldTypeInfo(VmContext vm, Array<int> opCodeRow) {
    ClassInfo classInfo = vm.metadata.classTable[opCodeRow[0]];

    int memberId = opCodeRow[1];
    int len = opCodeRow.Length();
    Array<int> typeInfo = new Array<int>(len - 2);
    for (int i = 2; i < len; i += 1) {
        typeInfo[i - 2] = opCodeRow[i];
    }
    classInfo.typeInfo[memberId] = typeInfo;
    return 0;
}

Array<ClassInfo> getClassTable(VmContext vm, int classId) {
    Array<ClassInfo> oldTable = vm.metadata.classTable;
    int oldLength = oldTable.Size();
    if (classId < oldLength) {
        return oldTable;
    }
    int newLength = oldLength * 2;
    if (classId >= newLength) {
        newLength = classId + 100;
    }

    Array<ClassInfo> newTable = new Array<ClassInfo>(newLength);
    for (int i = oldLength - 1; i >= 0; i -= 1) {
        newTable[i] = oldTable[i];
    }

    vm.metadata.classTable = newTable;
    return newTable;
}

int resetLocalsStackTokens(ExecutionContext ec, StackFrame stack) {

    Array<Value> localsStack = ec.localsStack;
    Array<int> localsStackSet = ec.localsStackSet;

    int i = stack.localsStackOffsetEnd;
    while (i < localsStackSet.Size()) {
        localsStackSet[i] = 0;
        localsStack[i] = null;
        i += 1;
    }

    StackFrame stackWalker = stack;

    while (stackWalker != null) {
        int token = stackWalker.localsStackSetToken;
        stackWalker.localsStackSetToken = 1;
        for (i = stackWalker.localsStackOffset; i < stackWalker.localsStackOffsetEnd; i += 1) {
            if (localsStackSet[i] == token) {
                localsStackSet[i] = 1;
            } else {
                localsStackSet[i] = 0;
                localsStack[i] = null;
            }
        }
        stackWalker = stackWalker.previous;
    }

    ec.localsStackSetToken = 1;

    return -1;
}

int increaseLocalsStackCapacity(ExecutionContext ec, int newScopeSize) {
    Array<Value> oldLocals = ec.localsStack;
    Array<int> oldSetIndicator = ec.localsStackSet;

    int oldCapacity = oldLocals.Size();
    int newCapacity = (oldCapacity * 2) + newScopeSize;

    Array<Value> newLocals = new Array<Value>(newCapacity);
    Array<int> newSetIndicator = new Array<int>(newCapacity);

    for (int i = 0; i < oldCapacity; i += 1) {
        newLocals[i] = oldLocals[i];
        newSetIndicator[i] = oldSetIndicator[i];
    }

    ec.localsStack = newLocals;
    ec.localsStackSet = newSetIndicator;

    return 0;
}

StackFrame maybeInvokeStaticConstructor(
        VmContext vm,
        ExecutionContext ec,
        StackFrame stack,
        ClassInfo classInfo,
        int valueStackSize,
        Array<int> intOutParam) {

    Core.IntBuffer16[0] = 0;
    int classId = classInfo.id;
    if (classInfo.staticInitializationState == 1) {
        // check to make sure it's the last item on the static init stack
        List<int> classIdsBeingInitialized = vm.classStaticInitializationStack;
        if (classIdsBeingInitialized[classIdsBeingInitialized.Size() - 1] != classId) {
            Core.IntBuffer16[0] = 1;
        }
        return null;
    }

    classInfo.staticInitializationState = 1;
    vm.classStaticInitializationStack.Add(classId);

    FunctionInfo functionInfo = vm.metadata.functionTable[classInfo.staticConstructorFunctionId];

    stack.pc -= 1; // when static constructor completes, return to this same op.

    int newFrameLocalsSize = functionInfo.localsSize;
    int currentFrameLocalsEnd = stack.localsStackOffsetEnd;
    if (ec.localsStack.Size() <= (currentFrameLocalsEnd + newFrameLocalsSize)) {
        increaseLocalsStackCapacity(ec, newFrameLocalsSize);
    }

    if (ec.localsStackSetToken > 2000000000) {
        resetLocalsStackTokens(ec, stack);
    }

    ec.localsStackSetToken += 1;

    return new StackFrame(
        functionInfo.pc,
        ec.localsStackSetToken,
        currentFrameLocalsEnd,
        currentFrameLocalsEnd + newFrameLocalsSize,
        stack,
        false, // return value used?
        null, // value of 'this' keyword.
        valueStackSize,
        classId, // mark class as initialized when RETURN runs.
        stack.depth + 1,
        PostFinallyBehavior.NOTHING,
        null, // temp return value
        null);
}

/*
    There are 3n args that correspond to the n ESF tokens.

    3n + 0: PC of the beginning of the try block
    3n + 1: PC of the beginning of the exception sorting code
    3n + 2: PC of the finally block

    Final ESF data should be a per-row list of 2 values OR null if there is no ESF data:
    [pc][0] -> pc of exception sorter
    [pc][1] -> pc of finally
*/
Array<Array<int>> generateEsfData(int byteCodeLength, Array<int> esfArgs) {
    Array<Array<int>> output = new Array<Array<int>>(byteCodeLength);

    List<Array<int>> esfTokenStack = new List<Array<int>>();
    Array<int> esfTokenStackTop = null;
    int esfArgIterator = 0;
    int esfArgLength = esfArgs.Size();
    int j = 0;

    for (int pc = 0; pc < byteCodeLength; pc += 1) {
        // Check to see if a new ESF arg needs to be pushed onto the stack.
        if (esfArgIterator < esfArgLength && pc == esfArgs[esfArgIterator]) {
            // push the next esf arg onto the stack.
            esfTokenStackTop = new Array<int>(2);
            for (j = 1; j < 3; j += 1) {
                esfTokenStackTop[j - 1] = esfArgs[esfArgIterator + j];
            }
            esfTokenStack.Add(esfTokenStackTop);
            esfArgIterator += 3;
        }

        // Check to see if the top of the ESF stack needs to be popped
        while (esfTokenStackTop != null && esfTokenStackTop[1] <= pc) {
            esfTokenStack.Pop();
            if (esfTokenStack.Size() == 0) {
                esfTokenStackTop = null;
            } else {
                esfTokenStackTop = esfTokenStack[esfTokenStack.Size() - 1];
            }
        }

        // Set the stack top to the current row
        output[pc] = esfTokenStackTop;
    }

    return output;
}

int markClassAsInitialized(VmContext vm, StackFrame stack, int classId) {
    ClassInfo classInfo = vm.metadata.classTable[stack.markClassAsInitialized];
    classInfo.staticInitializationState = 2; // mark class as completely ready to use.
    vm.classStaticInitializationStack.Pop();
    return 0;
}

int addLiteralImpl(VmContext vm, Array<int> row, string stringArg) {
    VmGlobals g = vm.globals;
    int type = row[0];
    if (type == Types.NULL) {
        vm.metadata.literalTableBuilder.Add(g.valueNull);
    } else if (type == Types.BOOLEAN) {
        vm.metadata.literalTableBuilder.Add(buildBoolean(g, row[1] == 1));
    } else if (type == Types.INTEGER) {
        vm.metadata.literalTableBuilder.Add(buildInteger(g, row[1]));
    } else if (type == Types.FLOAT) {
        vm.metadata.literalTableBuilder.Add(buildFloat(g, Core.ParseFloatUnsafe(stringArg)));
    } else if (type == Types.STRING) {
        vm.metadata.literalTableBuilder.Add(buildCommonString(g, stringArg));
    } else if (type == Types.FUNCTION) {
        int index = vm.metadata.literalTableBuilder.Size();
        vm.metadata.literalTableBuilder.Add(buildCommonString(g, stringArg));
        vm.metadata.invFunctionNameLiterals[stringArg] = index;
    } else if (type == Types.CLASS) {
        ClassValue cv = new ClassValue(
            // TODO: going to need to update this for interfaces. Negative numbers too hacky?
            false, // is interface?
            row[1]); // class ID
        vm.metadata.literalTableBuilder.Add(new Value(Types.CLASS, cv));
    }

    return 0;
}

int addNameImpl(VmContext vm, string nameValue) {
    int index = vm.metadata.identifiersBuilder.Size(); // name ID (sequentially allocated so it happens to be the length of the list at the time of declaration)
    vm.metadata.invIdentifiers[nameValue] = index;
    vm.metadata.identifiersBuilder.Add(nameValue);

    if (Core.StringEquals("length", nameValue)) {
        vm.metadata.lengthId = index;
    }

    return 0;
}

int finalizeInitializationImpl(VmContext vm, string projectId, int localeCount) {

    vm.symbolData.sourceCode = Core.ListToArray(vm.symbolData.sourceCodeBuilder);
    vm.symbolData.sourceCodeBuilder = null;

    vm.metadata.magicNumbers.totalLocaleCount = localeCount;
    vm.metadata.identifiers = Core.ListToArray(vm.metadata.identifiersBuilder);
    vm.metadata.literalTable = Core.ListToArray(vm.metadata.literalTableBuilder);
    vm.metadata.globalNameIdToPrimitiveMethodName = primitiveMethodsInitializeLookup(vm.metadata.invIdentifiers);
    vm.funcArgs = new Array<Value>(vm.metadata.identifiers.Size()); // WAY over-allocated but that's okay for now, I guess.
    vm.metadata.projectId = projectId;
    vm.metadata.identifiersBuilder = null;
    vm.metadata.literalTableBuilder = null;
    vm.initializationComplete = true;

    return 0;
}

// TODO: eventually this should come from embedded resources instead of byte code (with the option of it being absent)
int defOriginalCodeImpl(VmContext vm, Array<int> row, string fileContents) {
    int fileId = row[0]; // file ID
    List<string> codeLookup = vm.symbolData.sourceCodeBuilder;
    while (codeLookup.Size() <= fileId) {
        codeLookup.Add(null);
    }
    codeLookup[fileId] = fileContents;

    return 0;
}

int tokenDataImpl(VmContext vm, Array<int> row) {
    Array<List<Token>> tokensByPc = vm.symbolData.tokenData;
    int pc = row[0] + vm.metadata.userCodeStart; // PC
    int line = row[1]; // Line
    int col = row[2]; // Col
    int file = row[3]; // File ID
    List<Token> tokens = tokensByPc[pc];
    if (tokens == null) {
        tokens = new List<Token>();
        tokensByPc[pc] = tokens;
    }
    tokens.Add(new Token(line, col, file));

    return 0;
}

/*
    format of the LOC_TABLE op is as follows
    row[0] -> class ID this is applicable to
    row[1] -> members of this class (n)
    row[(n + 1) * k + 2] -> locale ID the following n elements apply to
    row[(n + 1) * k + 3 + [0 ... n - 1]] -> the name ID's for the members for that locale

    This runs before class initialization, so the lookup table must be added to VmContext.

    The key is in the form of the nameID * totalLocaleCount + localeId.
    This mathematically namespaces name ID's to prevent collisions across different locales.
*/
int initLocTable(VmContext vm, Array<int> row) {
    int classId = row[0];
    int memberCount = row[1];
    int nameId = 0;
    int totalLocales = vm.metadata.magicNumbers.totalLocaleCount;
    Dictionary<int, int> lookup = new Dictionary<int, int>();
    for (int i = 2; i < row.Size(); i += memberCount) {
        int localeId = row[i];
        i += 1;
        for (int j = 0; j < memberCount; j += 1) {
            nameId = row[i + j];
            if (nameId != -1) {
                // These have the default-locale fallbacks filled in for non-default locale access
                lookup[nameId * totalLocales + localeId] = j;
            }
        }
    }
    vm.metadata.classMemberLocalizerBuilder[classId] = lookup;
    return 0;
}

int initFileNameSymbolData(VmContext vm) {
    SymbolData symbolData = vm.symbolData;
    if (symbolData == null) return 0;
    if (symbolData.fileNameById == null) {
        int i = 0;
        Array<string> filenames = new Array<string>(symbolData.sourceCode.Length());
        Dictionary<string, int> fileIdByPath = new Dictionary<string, int>();
        for (i = 0; i < filenames.Length(); i += 1) {
            string sourceCode = symbolData.sourceCode[i];
            if (sourceCode != null) {
                int colon = sourceCode.IndexOf("\n");
                if (colon != -1) {
                    string filename = sourceCode.SubString(0, colon);
                    filenames[i] = filename;
                    fileIdByPath[filename] = i;
                }
            }
        }
        symbolData.fileNameById = filenames;
        symbolData.fileIdByName = fileIdByPath;
    }
    return 0;
}
