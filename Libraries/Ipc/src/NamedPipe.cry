import Environment;

namespace Ipc {

    function isNamedPipeSupported() {
        env = Environment.getEnvironment();
        return env['platform'] == 'windows';
    }

    function ensureNamedPipeSupported() {
        if (!isNamedPipeSupported()) {
            throw new InvalidOperationException("Named pipes are not supported on this platform.");
        }
    }

    class NamedPipeClient {

        field _onBroken = null;
        field _isClosed = false;

        constructor(name, onBroken = null) {
            ensureNamedPipeSupported();
            this._onBroken = onBroken;
            this._handleResult($$$('ipcNamedPipeCreate', this, name));
        }

        function writeLine(s) {
            if (this._isClosed) throw new InvalidOperationException("Pipe is closed.");
            this._handleResult($$$('ipcNamedPipeSend', this, (s ?? '') + ''));
        }

        function flush() {
            if (this._isClosed) throw new InvalidOperationException("Pipe is closed.");
            this._handleResult($$$('ipcNamedPipeFlush', this));
        }

        function _handleResult(s) {
            if (s != null) {
                // TODO: more robust way of checking this error.
                if (s.contains('Pipe is broken')) {
                    this._isClosed = true;
                    if (this._onBroken != null) {
                        this._onBroken();
                    }
                } else {
                    throw new Exception(s);
                }
            }
        }
    }

    class NamedPipeServer {

        field _name;
        field _onData = data => {};
        field _onStart = () => {};
        field _onClose = () => {};

        constructor(name) {
            ensureNamedPipeSupported();
            this._name = name;
        }

        function setListener(cb) {
            this._onData = cb;
            return this;
        }

        function setOnStart(cb) {
            this._onStart = cb;
            return this;
        }

        function setOnClosed(cb) {
            this._onClose = cb;
            return this;
        }

        function start() {
            this._handleResult($$$('ipcNamedPipeServerCreate',
                this,
                this._name,
                () => { this._onStart(); },
                data => { this._onData(data); },
                () => { this._onClose(); }));
        }

        function close() {
            this._handleResult($$$('ipcNamedPipeServerClose', this));
        }

        function _handleResult(s) {
            if (s != null) {
                throw new Exception(s);
            }
        }
    }
}
